{
  "api/ECS.Components.AI.AssociatedHitbox.html": {
    "href": "api/ECS.Components.AI.AssociatedHitbox.html",
    "title": "Struct AssociatedHitbox | Super Plant BroZ",
    "summary": "Struct AssociatedHitbox Namespace ECS.Components.AI Assembly ECS.dll public struct AssociatedHitbox Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields box public Polygon box Field Value Polygon type public AttackType type Field Value AttackType"
  },
  "api/ECS.Components.AI.Attack.html": {
    "href": "api/ECS.Components.AI.Attack.html",
    "title": "Struct Attack | Super Plant BroZ",
    "summary": "Struct Attack Namespace ECS.Components.AI Assembly ECS.dll public struct Attack Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Damage public int Damage Field Value int Knockback public float Knockback Field Value float Type public AttackType Type Field Value AttackType"
  },
  "api/ECS.Components.AI.AttackInfo.html": {
    "href": "api/ECS.Components.AI.AttackInfo.html",
    "title": "Struct AttackInfo | Super Plant BroZ",
    "summary": "Struct AttackInfo Namespace ECS.Components.AI Assembly ECS.dll public struct AttackInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ActiveAttack public AttackType ActiveAttack Field Value AttackType AvailableAttacks public List<Attack> AvailableAttacks Field Value List<Attack>"
  },
  "api/ECS.Components.AI.AttackType.html": {
    "href": "api/ECS.Components.AI.AttackType.html",
    "title": "Enum AttackType | Super Plant BroZ",
    "summary": "Enum AttackType Namespace ECS.Components.AI Assembly ECS.dll public enum AttackType Fields Heavy = 2 Light = 1 None = 0 Special = 3"
  },
  "api/ECS.Components.AI.CurrentAction.html": {
    "href": "api/ECS.Components.AI.CurrentAction.html",
    "title": "Struct CurrentAction | Super Plant BroZ",
    "summary": "Struct CurrentAction Namespace ECS.Components.AI Assembly ECS.dll public struct CurrentAction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.AI.ExistedTooLong.html": {
    "href": "api/ECS.Components.AI.ExistedTooLong.html",
    "title": "Struct ExistedTooLong | Super Plant BroZ",
    "summary": "Struct ExistedTooLong Namespace ECS.Components.AI Assembly ECS.dll public struct ExistedTooLong Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.AI.Hitboxes.html": {
    "href": "api/ECS.Components.AI.Hitboxes.html",
    "title": "Struct Hitboxes | Super Plant BroZ",
    "summary": "Struct Hitboxes Namespace ECS.Components.AI Assembly ECS.dll public struct Hitboxes Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields availableHitboxes public List<AssociatedHitbox> availableHitboxes Field Value List<AssociatedHitbox>"
  },
  "api/ECS.Components.AI.ShotProjectile.html": {
    "href": "api/ECS.Components.AI.ShotProjectile.html",
    "title": "Struct ShotProjectile | Super Plant BroZ",
    "summary": "Struct ShotProjectile Namespace ECS.Components.AI Assembly ECS.dll public struct ShotProjectile Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.AI.html": {
    "href": "api/ECS.Components.AI.html",
    "title": "Namespace ECS.Components.AI | Super Plant BroZ",
    "summary": "Namespace ECS.Components.AI Structs AssociatedHitbox Attack AttackInfo CurrentAction ExistedTooLong Hitboxes ShotProjectile Enums AttackType"
  },
  "api/ECS.Components.Animation.AnimationConfig.html": {
    "href": "api/ECS.Components.Animation.AnimationConfig.html",
    "title": "Struct AnimationConfig | Super Plant BroZ",
    "summary": "Struct AnimationConfig Namespace ECS.Components.Animation Assembly ECS.dll public struct AnimationConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields States public Dictionary<string, AnimationFrameConfig[]> States Field Value Dictionary<string, AnimationFrameConfig[]>"
  },
  "api/ECS.Components.Animation.AnimationFrameConfig.html": {
    "href": "api/ECS.Components.Animation.AnimationFrameConfig.html",
    "title": "Struct AnimationFrameConfig | Super Plant BroZ",
    "summary": "Struct AnimationFrameConfig Namespace ECS.Components.Animation Assembly ECS.dll public struct AnimationFrameConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Duration public float Duration Field Value float SourceRect public Rectangle SourceRect Field Value Rectangle"
  },
  "api/ECS.Components.Animation.AnimationState.html": {
    "href": "api/ECS.Components.Animation.AnimationState.html",
    "title": "Struct AnimationState | Super Plant BroZ",
    "summary": "Struct AnimationState Namespace ECS.Components.Animation Assembly ECS.dll public struct AnimationState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentState public string CurrentState Field Value string FrameIndex public int FrameIndex Field Value int IsPlaying public bool IsPlaying Field Value bool TimeInFrame public float TimeInFrame Field Value float"
  },
  "api/ECS.Components.Animation.DrawLayer.html": {
    "href": "api/ECS.Components.Animation.DrawLayer.html",
    "title": "Enum DrawLayer | Super Plant BroZ",
    "summary": "Enum DrawLayer Namespace ECS.Components.Animation Assembly ECS.dll public enum DrawLayer Fields Background = 0 Platform = 2 Player = 3 Projectile = 4 Terrain = 1 UI = 5"
  },
  "api/ECS.Components.Animation.FacingDirection.html": {
    "href": "api/ECS.Components.Animation.FacingDirection.html",
    "title": "Struct FacingDirection | Super Plant BroZ",
    "summary": "Struct FacingDirection Namespace ECS.Components.Animation Assembly ECS.dll public struct FacingDirection Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields IsFacingLeft public bool IsFacingLeft Field Value bool"
  },
  "api/ECS.Components.Animation.Rotation.html": {
    "href": "api/ECS.Components.Animation.Rotation.html",
    "title": "Struct Rotation | Super Plant BroZ",
    "summary": "Struct Rotation Namespace ECS.Components.Animation Assembly ECS.dll public struct Rotation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Animation.Scale.html": {
    "href": "api/ECS.Components.Animation.Scale.html",
    "title": "Struct Scale | Super Plant BroZ",
    "summary": "Struct Scale Namespace ECS.Components.Animation Assembly ECS.dll public struct Scale Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Animation.SpriteConfig.html": {
    "href": "api/ECS.Components.Animation.SpriteConfig.html",
    "title": "Struct SpriteConfig | Super Plant BroZ",
    "summary": "Struct SpriteConfig Namespace ECS.Components.Animation Assembly ECS.dll public struct SpriteConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Color public Color Color Field Value Color Layer public DrawLayer Layer Field Value DrawLayer Origin public Vector2 Origin Field Value Vector2 SourceRect public Rectangle SourceRect Field Value Rectangle Texture public Texture2D Texture Field Value Texture2D"
  },
  "api/ECS.Components.Animation.html": {
    "href": "api/ECS.Components.Animation.html",
    "title": "Namespace ECS.Components.Animation | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Animation Structs AnimationConfig AnimationFrameConfig AnimationState FacingDirection Rotation Scale SpriteConfig Enums DrawLayer"
  },
  "api/ECS.Components.Characters.CharacterConfig.html": {
    "href": "api/ECS.Components.Characters.CharacterConfig.html",
    "title": "Struct CharacterConfig | Super Plant BroZ",
    "summary": "Struct CharacterConfig Namespace ECS.Components.Characters Assembly ECS.dll public struct CharacterConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.Characters.html": {
    "href": "api/ECS.Components.Characters.html",
    "title": "Namespace ECS.Components.Characters | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Characters Structs CharacterConfig"
  },
  "api/ECS.Components.Collision.CollisionBody.html": {
    "href": "api/ECS.Components.Collision.CollisionBody.html",
    "title": "Struct CollisionBody | Super Plant BroZ",
    "summary": "Struct CollisionBody Namespace ECS.Components.Collision Assembly ECS.dll public struct CollisionBody Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Polygons public List<Polygon> Polygons Field Value List<Polygon>"
  },
  "api/ECS.Components.Collision.CollisionLayer.html": {
    "href": "api/ECS.Components.Collision.CollisionLayer.html",
    "title": "Enum CollisionLayer | Super Plant BroZ",
    "summary": "Enum CollisionLayer Namespace ECS.Components.Collision Assembly ECS.dll public enum CollisionLayer Fields Hitbox = 4 Hurtbox = 8 None = 0 Physics = 2 Trigger = 16 World = 1"
  },
  "api/ECS.Components.Collision.Contact.html": {
    "href": "api/ECS.Components.Collision.Contact.html",
    "title": "Struct Contact | Super Plant BroZ",
    "summary": "Struct Contact Namespace ECS.Components.Collision Assembly ECS.dll public struct Contact Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields EntityA public Entity EntityA Field Value Entity EntityB public Entity EntityB Field Value Entity LayerA public CollisionLayer LayerA Field Value CollisionLayer LayerB public CollisionLayer LayerB Field Value CollisionLayer Normal public Vector2 Normal Field Value Vector2 Penetration public float Penetration Field Value float Point public Vector2 Point Field Value Vector2 TimeOfImpact public float TimeOfImpact Field Value float"
  },
  "api/ECS.Components.Collision.ContactFlags.html": {
    "href": "api/ECS.Components.Collision.ContactFlags.html",
    "title": "Enum ContactFlags | Super Plant BroZ",
    "summary": "Enum ContactFlags Namespace ECS.Components.Collision Assembly ECS.dll [Flags] public enum ContactFlags Fields Bottom = 2 Left = 4 None = 0 Right = 8 Top = 1"
  },
  "api/ECS.Components.Collision.ContactState.html": {
    "href": "api/ECS.Components.Collision.ContactState.html",
    "title": "Struct ContactState | Super Plant BroZ",
    "summary": "Struct ContactState Namespace ECS.Components.Collision Assembly ECS.dll public struct ContactState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Contacts public HashSet<Entity> Contacts Field Value HashSet<Entity> Flags public ContactFlags Flags Field Value ContactFlags"
  },
  "api/ECS.Components.Collision.Polygon.html": {
    "href": "api/ECS.Components.Collision.Polygon.html",
    "title": "Struct Polygon | Super Plant BroZ",
    "summary": "Struct Polygon Namespace ECS.Components.Collision Assembly ECS.dll public struct Polygon Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CollidesWith public CollisionLayer CollidesWith Field Value CollisionLayer IsTrigger public bool IsTrigger Field Value bool Layer public CollisionLayer Layer Field Value CollisionLayer Vertices public Vector2[] Vertices Field Value Vector2[]"
  },
  "api/ECS.Components.Collision.WorldBounds.html": {
    "href": "api/ECS.Components.Collision.WorldBounds.html",
    "title": "Struct WorldBounds | Super Plant BroZ",
    "summary": "Struct WorldBounds Namespace ECS.Components.Collision Assembly ECS.dll public struct WorldBounds Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Bounds public Rectangle Bounds Field Value Rectangle"
  },
  "api/ECS.Components.Collision.html": {
    "href": "api/ECS.Components.Collision.html",
    "title": "Namespace ECS.Components.Collision | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Collision Structs CollisionBody Contact ContactState Polygon WorldBounds Enums CollisionLayer ContactFlags"
  },
  "api/ECS.Components.Input.InputAction.html": {
    "href": "api/ECS.Components.Input.InputAction.html",
    "title": "Struct InputAction | Super Plant BroZ",
    "summary": "Struct InputAction Namespace ECS.Components.Input Assembly ECS.dll public struct InputAction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Buttons public Buttons[] Buttons Field Value Buttons[] Joysticks public JoystickInput[] Joysticks Field Value JoystickInput[] Keys public Keys[] Keys Field Value Keys[] Triggers public TriggerType[] Triggers Field Value TriggerType[]"
  },
  "api/ECS.Components.Input.InputConfig.html": {
    "href": "api/ECS.Components.Input.InputConfig.html",
    "title": "Struct InputConfig | Super Plant BroZ",
    "summary": "Struct InputConfig Namespace ECS.Components.Input Assembly ECS.dll public struct InputConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Actions public Dictionary<string, InputAction> Actions Field Value Dictionary<string, InputAction>"
  },
  "api/ECS.Components.Input.JoystickDirection.html": {
    "href": "api/ECS.Components.Input.JoystickDirection.html",
    "title": "Enum JoystickDirection | Super Plant BroZ",
    "summary": "Enum JoystickDirection Namespace ECS.Components.Input Assembly ECS.dll public enum JoystickDirection Fields Down = 2 DownLeft = 7 DownRight = 8 Left = 3 None = 0 Right = 4 Up = 1 UpLeft = 5 UpRight = 6"
  },
  "api/ECS.Components.Input.JoystickInput.html": {
    "href": "api/ECS.Components.Input.JoystickInput.html",
    "title": "Struct JoystickInput | Super Plant BroZ",
    "summary": "Struct JoystickInput Namespace ECS.Components.Input Assembly ECS.dll public struct JoystickInput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Direction public JoystickDirection Direction Field Value JoystickDirection Threshold public float Threshold Field Value float Type public JoystickType Type Field Value JoystickType"
  },
  "api/ECS.Components.Input.JoystickType.html": {
    "href": "api/ECS.Components.Input.JoystickType.html",
    "title": "Enum JoystickType | Super Plant BroZ",
    "summary": "Enum JoystickType Namespace ECS.Components.Input Assembly ECS.dll public enum JoystickType Fields LeftStick = 0 RightStick = 1"
  },
  "api/ECS.Components.Input.TriggerType.html": {
    "href": "api/ECS.Components.Input.TriggerType.html",
    "title": "Enum TriggerType | Super Plant BroZ",
    "summary": "Enum TriggerType Namespace ECS.Components.Input Assembly ECS.dll public enum TriggerType Fields Left = 0 Right = 1"
  },
  "api/ECS.Components.Input.html": {
    "href": "api/ECS.Components.Input.html",
    "title": "Namespace ECS.Components.Input | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Input Structs InputAction InputConfig JoystickInput Enums JoystickDirection JoystickType TriggerType"
  },
  "api/ECS.Components.Items.Item.html": {
    "href": "api/ECS.Components.Items.Item.html",
    "title": "Struct Item | Super Plant BroZ",
    "summary": "Struct Item Namespace ECS.Components.Items Assembly ECS.dll public struct Item Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.Items.html": {
    "href": "api/ECS.Components.Items.html",
    "title": "Namespace ECS.Components.Items | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Items Structs Item"
  },
  "api/ECS.Components.Lives.LivesCount.html": {
    "href": "api/ECS.Components.Lives.LivesCount.html",
    "title": "Struct LivesCount | Super Plant BroZ",
    "summary": "Struct LivesCount Namespace ECS.Components.Lives Assembly ECS.dll public struct LivesCount Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Lives public int Lives Field Value int"
  },
  "api/ECS.Components.Lives.html": {
    "href": "api/ECS.Components.Lives.html",
    "title": "Namespace ECS.Components.Lives | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Lives Structs LivesCount"
  },
  "api/ECS.Components.Objects.MapObject.html": {
    "href": "api/ECS.Components.Objects.MapObject.html",
    "title": "Struct MapObject | Super Plant BroZ",
    "summary": "Struct MapObject Namespace ECS.Components.Objects Assembly ECS.dll public struct MapObject Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.Objects.html": {
    "href": "api/ECS.Components.Objects.html",
    "title": "Namespace ECS.Components.Objects | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Objects Structs MapObject"
  },
  "api/ECS.Components.Physics.Acceleration.html": {
    "href": "api/ECS.Components.Physics.Acceleration.html",
    "title": "Struct Acceleration | Super Plant BroZ",
    "summary": "Struct Acceleration Namespace ECS.Components.Physics Assembly ECS.dll public struct Acceleration Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.AirControlForce.html": {
    "href": "api/ECS.Components.Physics.AirControlForce.html",
    "title": "Struct AirControlForce | Super Plant BroZ",
    "summary": "Struct AirControlForce Namespace ECS.Components.Physics Assembly ECS.dll public struct AirControlForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.AirResistance.html": {
    "href": "api/ECS.Components.Physics.AirResistance.html",
    "title": "Struct AirResistance | Super Plant BroZ",
    "summary": "Struct AirResistance Namespace ECS.Components.Physics Assembly ECS.dll public struct AirResistance Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.Direction.html": {
    "href": "api/ECS.Components.Physics.Direction.html",
    "title": "Struct Direction | Super Plant BroZ",
    "summary": "Struct Direction Namespace ECS.Components.Physics Assembly ECS.dll public struct Direction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.Force.html": {
    "href": "api/ECS.Components.Physics.Force.html",
    "title": "Struct Force | Super Plant BroZ",
    "summary": "Struct Force Namespace ECS.Components.Physics Assembly ECS.dll public struct Force Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.Friction.html": {
    "href": "api/ECS.Components.Physics.Friction.html",
    "title": "Struct Friction | Super Plant BroZ",
    "summary": "Struct Friction Namespace ECS.Components.Physics Assembly ECS.dll public struct Friction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.GravitySpeed.html": {
    "href": "api/ECS.Components.Physics.GravitySpeed.html",
    "title": "Struct GravitySpeed | Super Plant BroZ",
    "summary": "Struct GravitySpeed Namespace ECS.Components.Physics Assembly ECS.dll public struct GravitySpeed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.IsGrounded.html": {
    "href": "api/ECS.Components.Physics.IsGrounded.html",
    "title": "Struct IsGrounded | Super Plant BroZ",
    "summary": "Struct IsGrounded Namespace ECS.Components.Physics Assembly ECS.dll public struct IsGrounded Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool WasGrounded public bool WasGrounded Field Value bool"
  },
  "api/ECS.Components.Physics.JumpForce.html": {
    "href": "api/ECS.Components.Physics.JumpForce.html",
    "title": "Struct JumpForce | Super Plant BroZ",
    "summary": "Struct JumpForce Namespace ECS.Components.Physics Assembly ECS.dll public struct JumpForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.Mass.html": {
    "href": "api/ECS.Components.Physics.Mass.html",
    "title": "Struct Mass | Super Plant BroZ",
    "summary": "Struct Mass Namespace ECS.Components.Physics Assembly ECS.dll public struct Mass Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.MaxVelocity.html": {
    "href": "api/ECS.Components.Physics.MaxVelocity.html",
    "title": "Struct MaxVelocity | Super Plant BroZ",
    "summary": "Struct MaxVelocity Namespace ECS.Components.Physics Assembly ECS.dll public struct MaxVelocity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.MovementForce.html": {
    "href": "api/ECS.Components.Physics.MovementForce.html",
    "title": "Struct MovementForce | Super Plant BroZ",
    "summary": "Struct MovementForce Namespace ECS.Components.Physics Assembly ECS.dll public struct MovementForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Magnitude public float Magnitude Field Value float"
  },
  "api/ECS.Components.Physics.Percent.html": {
    "href": "api/ECS.Components.Physics.Percent.html",
    "title": "Struct Percent | Super Plant BroZ",
    "summary": "Struct Percent Namespace ECS.Components.Physics Assembly ECS.dll public struct Percent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.Position.html": {
    "href": "api/ECS.Components.Physics.Position.html",
    "title": "Struct Position | Super Plant BroZ",
    "summary": "Struct Position Namespace ECS.Components.Physics Assembly ECS.dll public struct Position Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.RunSpeed.html": {
    "href": "api/ECS.Components.Physics.RunSpeed.html",
    "title": "Struct RunSpeed | Super Plant BroZ",
    "summary": "Struct RunSpeed Namespace ECS.Components.Physics Assembly ECS.dll public struct RunSpeed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Scalar public float Scalar Field Value float"
  },
  "api/ECS.Components.Physics.UIPosition.html": {
    "href": "api/ECS.Components.Physics.UIPosition.html",
    "title": "Struct UIPosition | Super Plant BroZ",
    "summary": "Struct UIPosition Namespace ECS.Components.Physics Assembly ECS.dll public struct UIPosition Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.Velocity.html": {
    "href": "api/ECS.Components.Physics.Velocity.html",
    "title": "Struct Velocity | Super Plant BroZ",
    "summary": "Struct Velocity Namespace ECS.Components.Physics Assembly ECS.dll public struct Velocity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.WalkForce.html": {
    "href": "api/ECS.Components.Physics.WalkForce.html",
    "title": "Struct WalkForce | Super Plant BroZ",
    "summary": "Struct WalkForce Namespace ECS.Components.Physics Assembly ECS.dll public struct WalkForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.html": {
    "href": "api/ECS.Components.Physics.html",
    "title": "Namespace ECS.Components.Physics | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Physics Structs Acceleration AirControlForce AirResistance Direction Force Friction GravitySpeed IsGrounded JumpForce Mass MaxVelocity MovementForce Percent Position RunSpeed UIPosition Velocity WalkForce"
  },
  "api/ECS.Components.Projectiles.ParentID.html": {
    "href": "api/ECS.Components.Projectiles.ParentID.html",
    "title": "Struct ParentID | Super Plant BroZ",
    "summary": "Struct ParentID Namespace ECS.Components.Projectiles Assembly ECS.dll public struct ParentID Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public int Value Field Value int"
  },
  "api/ECS.Components.Projectiles.html": {
    "href": "api/ECS.Components.Projectiles.html",
    "title": "Namespace ECS.Components.Projectiles | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Projectiles Structs ParentID"
  },
  "api/ECS.Components.Random.RandomRange.html": {
    "href": "api/ECS.Components.Random.RandomRange.html",
    "title": "Struct RandomRange | Super Plant BroZ",
    "summary": "Struct RandomRange Namespace ECS.Components.Random Assembly ECS.dll public struct RandomRange Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Maximum public int Maximum Field Value int Minimum public int Minimum Field Value int"
  },
  "api/ECS.Components.Random.RandomlyGeneratedFloat.html": {
    "href": "api/ECS.Components.Random.RandomlyGeneratedFloat.html",
    "title": "Struct RandomlyGeneratedFloat | Super Plant BroZ",
    "summary": "Struct RandomlyGeneratedFloat Namespace ECS.Components.Random Assembly ECS.dll public struct RandomlyGeneratedFloat Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Random.RandomlyGeneratedInteger.html": {
    "href": "api/ECS.Components.Random.RandomlyGeneratedInteger.html",
    "title": "Struct RandomlyGeneratedInteger | Super Plant BroZ",
    "summary": "Struct RandomlyGeneratedInteger Namespace ECS.Components.Random Assembly ECS.dll public struct RandomlyGeneratedInteger Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public int Value Field Value int"
  },
  "api/ECS.Components.Random.html": {
    "href": "api/ECS.Components.Random.html",
    "title": "Namespace ECS.Components.Random | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Random Structs RandomRange RandomlyGeneratedFloat RandomlyGeneratedInteger"
  },
  "api/ECS.Components.State.GameState.html": {
    "href": "api/ECS.Components.State.GameState.html",
    "title": "Enum GameState | Super Plant BroZ",
    "summary": "Enum GameState Namespace ECS.Components.State Assembly ECS.dll public enum GameState Fields Exit = 3 Paused = 1 Reset = 2 Running = 0"
  },
  "api/ECS.Components.State.GameStateComponent.html": {
    "href": "api/ECS.Components.State.GameStateComponent.html",
    "title": "Struct GameStateComponent | Super Plant BroZ",
    "summary": "Struct GameStateComponent Namespace ECS.Components.State Assembly ECS.dll public struct GameStateComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentState public GameState CurrentState Field Value GameState"
  },
  "api/ECS.Components.State.PlayerState.html": {
    "href": "api/ECS.Components.State.PlayerState.html",
    "title": "Enum PlayerState | Super Plant BroZ",
    "summary": "Enum PlayerState Namespace ECS.Components.State Assembly ECS.dll public enum PlayerState Fields Attack = 100 Block = 90 Fall = 20 Idle = 0 Jump = 80 Run = 60 Stunned = 110 Walk = 50"
  },
  "api/ECS.Components.State.PlayerStateComponent.html": {
    "href": "api/ECS.Components.State.PlayerStateComponent.html",
    "title": "Struct PlayerStateComponent | Super Plant BroZ",
    "summary": "Struct PlayerStateComponent Namespace ECS.Components.State Assembly ECS.dll public struct PlayerStateComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentState public PlayerState CurrentState Field Value PlayerState"
  },
  "api/ECS.Components.State.html": {
    "href": "api/ECS.Components.State.html",
    "title": "Namespace ECS.Components.State | Super Plant BroZ",
    "summary": "Namespace ECS.Components.State Structs GameStateComponent PlayerStateComponent Enums GameState PlayerState"
  },
  "api/ECS.Components.Tags.AITag.html": {
    "href": "api/ECS.Components.Tags.AITag.html",
    "title": "Struct AITag | Super Plant BroZ",
    "summary": "Struct AITag Namespace ECS.Components.Tags Assembly ECS.dll public struct AITag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.ItemTag.html": {
    "href": "api/ECS.Components.Tags.ItemTag.html",
    "title": "Struct ItemTag | Super Plant BroZ",
    "summary": "Struct ItemTag Namespace ECS.Components.Tags Assembly ECS.dll public struct ItemTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.ObjectTag.html": {
    "href": "api/ECS.Components.Tags.ObjectTag.html",
    "title": "Struct ObjectTag | Super Plant BroZ",
    "summary": "Struct ObjectTag Namespace ECS.Components.Tags Assembly ECS.dll public struct ObjectTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.PlayerTag.html": {
    "href": "api/ECS.Components.Tags.PlayerTag.html",
    "title": "Struct PlayerTag | Super Plant BroZ",
    "summary": "Struct PlayerTag Namespace ECS.Components.Tags Assembly ECS.dll public struct PlayerTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.ProjectileTag.html": {
    "href": "api/ECS.Components.Tags.ProjectileTag.html",
    "title": "Struct ProjectileTag | Super Plant BroZ",
    "summary": "Struct ProjectileTag Namespace ECS.Components.Tags Assembly ECS.dll public struct ProjectileTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.SingletonTag.html": {
    "href": "api/ECS.Components.Tags.SingletonTag.html",
    "title": "Struct SingletonTag | Super Plant BroZ",
    "summary": "Struct SingletonTag Namespace ECS.Components.Tags Assembly ECS.dll public struct SingletonTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.html": {
    "href": "api/ECS.Components.Tags.html",
    "title": "Namespace ECS.Components.Tags | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Tags Structs AITag ItemTag ObjectTag PlayerTag ProjectileTag SingletonTag"
  },
  "api/ECS.Components.Timer.Timer.html": {
    "href": "api/ECS.Components.Timer.Timer.html",
    "title": "Struct Timer | Super Plant BroZ",
    "summary": "Struct Timer Namespace ECS.Components.Timer Assembly ECS.dll public struct Timer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Duration public float Duration Field Value float Elapsed public float Elapsed Field Value float OneShot public bool OneShot Field Value bool Type public TimerType Type Field Value TimerType"
  },
  "api/ECS.Components.Timer.TimerType.html": {
    "href": "api/ECS.Components.Timer.TimerType.html",
    "title": "Enum TimerType | Super Plant BroZ",
    "summary": "Enum TimerType Namespace ECS.Components.Timer Assembly ECS.dll public enum TimerType Fields AITimer = 1 HitboxTimer = 4 None = 0 ProjectileTimer = 3 StateTimer = 2"
  },
  "api/ECS.Components.Timer.Timers.html": {
    "href": "api/ECS.Components.Timer.Timers.html",
    "title": "Struct Timers | Super Plant BroZ",
    "summary": "Struct Timers Namespace ECS.Components.Timer Assembly ECS.dll public struct Timers Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields TimerMap public Dictionary<TimerType, Timer> TimerMap Field Value Dictionary<TimerType, Timer>"
  },
  "api/ECS.Components.Timer.html": {
    "href": "api/ECS.Components.Timer.html",
    "title": "Namespace ECS.Components.Timer | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Timer Structs Timer Timers Enums TimerType"
  },
  "api/ECS.Components.UI.Button.html": {
    "href": "api/ECS.Components.UI.Button.html",
    "title": "Struct Button | Super Plant BroZ",
    "summary": "Struct Button Namespace ECS.Components.UI Assembly ECS.dll public struct Button Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Action public string Action Field Value string Active public bool Active Field Value bool Color public Color Color Field Value Color Text public string Text Field Value string"
  },
  "api/ECS.Components.UI.TextCenter.html": {
    "href": "api/ECS.Components.UI.TextCenter.html",
    "title": "Struct TextCenter | Super Plant BroZ",
    "summary": "Struct TextCenter Namespace ECS.Components.UI Assembly ECS.dll public struct TextCenter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.UI.TextScale.html": {
    "href": "api/ECS.Components.UI.TextScale.html",
    "title": "Struct TextScale | Super Plant BroZ",
    "summary": "Struct TextScale Namespace ECS.Components.UI Assembly ECS.dll public struct TextScale Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.UI.UIMenu.html": {
    "href": "api/ECS.Components.UI.UIMenu.html",
    "title": "Struct UIMenu | Super Plant BroZ",
    "summary": "Struct UIMenu Namespace ECS.Components.UI Assembly ECS.dll public struct UIMenu Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Active public bool Active Field Value bool Buttons public List<Button> Buttons Field Value List<Button> Selected public int Selected Field Value int Separation public int Separation Field Value int"
  },
  "api/ECS.Components.UI.UIPaused.html": {
    "href": "api/ECS.Components.UI.UIPaused.html",
    "title": "Struct UIPaused | Super Plant BroZ",
    "summary": "Struct UIPaused Namespace ECS.Components.UI Assembly ECS.dll public struct UIPaused Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.UI.UIText.html": {
    "href": "api/ECS.Components.UI.UIText.html",
    "title": "Struct UIText | Super Plant BroZ",
    "summary": "Struct UIText Namespace ECS.Components.UI Assembly ECS.dll public struct UIText Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Color public Color Color Field Value Color Font public string Font Field Value string Text public string Text Field Value string"
  },
  "api/ECS.Components.UI.html": {
    "href": "api/ECS.Components.UI.html",
    "title": "Namespace ECS.Components.UI | Super Plant BroZ",
    "summary": "Namespace ECS.Components.UI Structs Button TextCenter TextScale UIMenu UIPaused UIText"
  },
  "api/ECS.Components.html": {
    "href": "api/ECS.Components.html",
    "title": "Namespace ECS.Components | Super Plant BroZ",
    "summary": "Namespace ECS.Components Namespaces ECS.Components.AI ECS.Components.Animation ECS.Components.Characters ECS.Components.Collision ECS.Components.Input ECS.Components.Items ECS.Components.Lives ECS.Components.Objects ECS.Components.Physics ECS.Components.Projectiles ECS.Components.Random ECS.Components.State ECS.Components.Tags ECS.Components.Timer ECS.Components.UI"
  },
  "api/ECS.Core.AssetLoader.html": {
    "href": "api/ECS.Core.AssetLoader.html",
    "title": "Class AssetLoader | Super Plant BroZ",
    "summary": "Class AssetLoader Namespace ECS.Core Assembly ECS.dll public static class AssetLoader Inheritance object AssetLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LoadAssets(ContentManager) public static GameAssets LoadAssets(ContentManager content) Parameters content ContentManager Returns GameAssets LoadConfigs(GameAssets) private static void LoadConfigs(GameAssets assets) Parameters assets GameAssets LoadSounds(ContentManager, GameAssets) private static void LoadSounds(ContentManager content, GameAssets assets) Parameters content ContentManager assets GameAssets LoadSprites(ContentManager, GameAssets) private static void LoadSprites(ContentManager content, GameAssets assets) Parameters content ContentManager assets GameAssets RegisterEntities() private static void RegisterEntities()"
  },
  "api/ECS.Core.AssetManager.html": {
    "href": "api/ECS.Core.AssetManager.html",
    "title": "Class AssetManager | Super Plant BroZ",
    "summary": "Class AssetManager Namespace ECS.Core Assembly ECS.dll public static class AssetManager Inheritance object AssetManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields entityConfigLoader private static readonly EntityConfigLoader entityConfigLoader Field Value EntityConfigLoader inputConfigLoader private static readonly InputConfigLoader inputConfigLoader Field Value InputConfigLoader spriteSheetLoader private static readonly SpriteSheetLoader spriteSheetLoader Field Value SpriteSheetLoader Methods LoadEntityConfig(GameAssets, string, string) public static void LoadEntityConfig(GameAssets assets, string key, string path) Parameters assets GameAssets key string path string LoadFont(GameAssets, ContentManager, string, string) public static void LoadFont(GameAssets assets, ContentManager content, string key, string path) Parameters assets GameAssets content ContentManager key string path string LoadInputConfig(GameAssets, string, string) public static void LoadInputConfig(GameAssets assets, string key, string path) Parameters assets GameAssets key string path string LoadSound(GameAssets, ContentManager, string, string) public static void LoadSound(GameAssets assets, ContentManager content, string key, string path) Parameters assets GameAssets content ContentManager key string path string LoadSpriteSheet(GameAssets, string, string) public static void LoadSpriteSheet(GameAssets assets, string key, string path) Parameters assets GameAssets key string path string LoadTexture(GameAssets, ContentManager, string, string) public static void LoadTexture(GameAssets assets, ContentManager content, string key, string path) Parameters assets GameAssets content ContentManager key string path string"
  },
  "api/ECS.Core.ComponentPool-1.html": {
    "href": "api/ECS.Core.ComponentPool-1.html",
    "title": "Class ComponentPool<T> | Super Plant BroZ",
    "summary": "Class ComponentPool<T> Namespace ECS.Core Assembly ECS.dll public sealed class ComponentPool<T> : IComponentPool where T : struct Type Parameters T Inheritance object ComponentPool<T> Implements IComponentPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields capacity private int capacity Field Value int components private T[] components Field Value T[] entityToIndex private Dictionary<int, int> entityToIndex Field Value Dictionary<int, int> freeIndices private Stack<int> freeIndices Field Value Stack<int> Properties Count public int Count { get; } Property Value int Methods EnsureCapacity(int) public void EnsureCapacity(int newCapacity) Parameters newCapacity int Get(Entity) public ref T Get(Entity entity) Parameters entity Entity Returns T Has(Entity) public bool Has(Entity entity) Parameters entity Entity Returns bool Remove(Entity) public void Remove(Entity entity) Parameters entity Entity Set(Entity, T) public void Set(Entity entity, T component) Parameters entity Entity component T"
  },
  "api/ECS.Core.Entity.html": {
    "href": "api/ECS.Core.Entity.html",
    "title": "Struct Entity | Super Plant BroZ",
    "summary": "Struct Entity Namespace ECS.Core Assembly ECS.dll public readonly struct Entity Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Entity(int) public Entity(int id) Parameters id int Fields Id public readonly int Id Field Value int Methods Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/ECS.Core.EntityAssetKey.html": {
    "href": "api/ECS.Core.EntityAssetKey.html",
    "title": "Class EntityAssetKey | Super Plant BroZ",
    "summary": "Class EntityAssetKey Namespace ECS.Core Assembly ECS.dll public record EntityAssetKey : IEquatable<EntityAssetKey> Inheritance object EntityAssetKey Implements IEquatable<EntityAssetKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityAssetKey(string, string, string) public EntityAssetKey(string SpriteKey, string AnimationKey, string ConfigKey) Parameters SpriteKey string AnimationKey string ConfigKey string Properties AnimationKey public string AnimationKey { get; init; } Property Value string ConfigKey public string ConfigKey { get; init; } Property Value string SpriteKey public string SpriteKey { get; init; } Property Value string"
  },
  "api/ECS.Core.EntityFactory.html": {
    "href": "api/ECS.Core.EntityFactory.html",
    "title": "Class EntityFactory | Super Plant BroZ",
    "summary": "Class EntityFactory Namespace ECS.Core Assembly ECS.dll public class EntityFactory Inheritance object EntityFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityFactory(World) public EntityFactory(World world) Parameters world World Fields world private readonly World world Field Value World Methods CreateAIFromConfig(EntityConfig, Texture2D, AnimationConfig, Vector2) public Entity CreateAIFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, Vector2 position = default) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig position Vector2 Returns Entity CreateEntityFromConfig(EntityConfig, Texture2D, AnimationConfig, InputConfig) public Entity CreateEntityFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, InputConfig inputConfig = default) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig inputConfig InputConfig Returns Entity CreateGameStateEntity() public Entity CreateGameStateEntity() Returns Entity CreateHitboxFromConfig(EntityConfig, Vector2) public Entity CreateHitboxFromConfig(EntityConfig config, Vector2 position = default) Parameters config EntityConfig position Vector2 Returns Entity CreateLine(Vector2, Vector2, float) public Entity CreateLine(Vector2 start, Vector2 end, float thickness = 1) Parameters start Vector2 end Vector2 thickness float Returns Entity CreatePlayerFromConfig(EntityConfig, Texture2D, AnimationConfig, InputConfig, Vector2) public Entity CreatePlayerFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, InputConfig inputConfig = default, Vector2 position = default) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig inputConfig InputConfig position Vector2 Returns Entity CreateProjectileFromConfig(EntityConfig, Texture2D, AnimationConfig, Vector2, bool) public Entity CreateProjectileFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, Vector2 position = default, bool isFacingLeft = false) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig position Vector2 isFacingLeft bool Returns Entity CreateWorldBoundaries(int, int) public void CreateWorldBoundaries(int screenWidth, int screenHeight) Parameters screenWidth int screenHeight int"
  },
  "api/ECS.Core.EntityRegistry.html": {
    "href": "api/ECS.Core.EntityRegistry.html",
    "title": "Class EntityRegistry | Super Plant BroZ",
    "summary": "Class EntityRegistry Namespace ECS.Core Assembly ECS.dll internal static class EntityRegistry Inheritance object EntityRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Entities private static readonly Dictionary<string, EntityAssetKey> Entities Field Value Dictionary<string, EntityAssetKey> Methods Clear() internal static void Clear() GetEntities() internal static IEnumerable<KeyValuePair<string, EntityAssetKey>> GetEntities() Returns IEnumerable<KeyValuePair<string, EntityAssetKey>> RegisterEntity(string, string, string, string) internal static void RegisterEntity(string entityName, string spriteKey, string animationKey, string configKey) Parameters entityName string spriteKey string animationKey string configKey string"
  },
  "api/ECS.Core.EventBus.html": {
    "href": "api/ECS.Core.EventBus.html",
    "title": "Class EventBus | Super Plant BroZ",
    "summary": "Class EventBus Namespace ECS.Core Assembly ECS.dll The event bus, a central system for managing event publication and subscription. Any subscriber to the type will recieve the published event. Each Action handles an event of type IEvent. public class EventBus Inheritance object EventBus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields subscribers Dictionary to store all subscriber delegates for each type of IEvent. private Dictionary<Type, List<Action<IEvent>>> subscribers Field Value Dictionary<Type, List<Action<IEvent>>> Methods Publish<T>(T) Publishes an IEvent to all subscribers of that event type T. Iterates over the list of subscribers for the event type and invokes each handler with the event data. public void Publish<T>(T eventData) where T : IEvent Parameters eventData T The data associated with the event being published. Type Parameters T The type of the event being published. Subscribe<T>(Action<IEvent>) Subscribes a handler to a specific event type T. public void Subscribe<T>(Action<IEvent> handler) where T : IEvent Parameters handler Action<IEvent> The delegate to be executed when the event is published. Type Parameters T The type of the event being subscribed to."
  },
  "api/ECS.Core.GameAssets.html": {
    "href": "api/ECS.Core.GameAssets.html",
    "title": "Class GameAssets | Super Plant BroZ",
    "summary": "Class GameAssets Namespace ECS.Core Assembly ECS.dll public class GameAssets Inheritance object GameAssets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields assets private readonly Dictionary<string, object> assets Field Value Dictionary<string, object> Methods AddAsset<T>(string, T) public void AddAsset<T>(string key, T asset) Parameters key string asset T Type Parameters T GetAnimation(string) public AnimationConfig GetAnimation(string path) Parameters path string Returns AnimationConfig GetAsset<T>(string) public T GetAsset<T>(string key) Parameters key string Returns T Type Parameters T GetEntityConfig(string) public EntityConfig GetEntityConfig(string path) Parameters path string Returns EntityConfig GetFont(string) public SpriteFont GetFont(string path) Parameters path string Returns SpriteFont GetInputConfig(string) public InputConfig GetInputConfig(string path) Parameters path string Returns InputConfig GetSound(string) public SoundEffect GetSound(string path) Parameters path string Returns SoundEffect GetTexture(string) public Texture2D GetTexture(string path) Parameters path string Returns Texture2D HasAsset<T>(string) public bool HasAsset<T>(string key) Parameters key string Returns bool Type Parameters T"
  },
  "api/ECS.Core.GameInitializer.html": {
    "href": "api/ECS.Core.GameInitializer.html",
    "title": "Class GameInitializer | Super Plant BroZ",
    "summary": "Class GameInitializer Namespace ECS.Core Assembly ECS.dll public class GameInitializer Inheritance object GameInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameInitializer(World) public GameInitializer(World world) Parameters world World Fields entityFactory private readonly EntityFactory entityFactory Field Value EntityFactory world private readonly World world Field Value World Methods CreateAI(GameAssets) private void CreateAI(GameAssets assets) Parameters assets GameAssets CreateGameState() private void CreateGameState() CreateObjects(GameAssets) private void CreateObjects(GameAssets assets) Parameters assets GameAssets CreatePlayers(GameAssets) private void CreatePlayers(GameAssets assets) Parameters assets GameAssets CreateUI(GameAssets) private void CreateUI(GameAssets assets) Parameters assets GameAssets CreateWorldBoundaries(int, int) private void CreateWorldBoundaries(int screenWidth, int screenHeight) Parameters screenWidth int screenHeight int InitializeGame(GameAssets, int, int) public void InitializeGame(GameAssets assets, int screenWidth, int screenHeight) Parameters assets GameAssets screenWidth int screenHeight int"
  },
  "api/ECS.Core.GameStateManager.html": {
    "href": "api/ECS.Core.GameStateManager.html",
    "title": "Class GameStateManager | Super Plant BroZ",
    "summary": "Class GameStateManager Namespace ECS.Core Assembly ECS.dll public class GameStateManager Inheritance object GameStateManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameStateManager(Game, World, GameAssets, GraphicsManager) public GameStateManager(Game game, World world, GameAssets assets, GraphicsManager graphicsManager) Parameters game Game world World assets GameAssets graphicsManager GraphicsManager Fields assets private readonly GameAssets assets Field Value GameAssets game private readonly Game game Field Value Game gameInitializer private readonly GameInitializer gameInitializer Field Value GameInitializer graphicsManager private readonly GraphicsManager graphicsManager Field Value GraphicsManager pendingReset private bool pendingReset Field Value bool world private readonly World world Field Value World Methods Exit() public void Exit() Initialize() public void Initialize() Reset() public void Reset() TearDown() public void TearDown() TogglePause() public void TogglePause() Update() public void Update()"
  },
  "api/ECS.Core.GraphicsManager.html": {
    "href": "api/ECS.Core.GraphicsManager.html",
    "title": "Class GraphicsManager | Super Plant BroZ",
    "summary": "Class GraphicsManager Namespace ECS.Core Assembly ECS.dll public class GraphicsManager Inheritance object GraphicsManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GraphicsManager(Game) public GraphicsManager(Game game) Parameters game Game Fields graphics private readonly GraphicsDeviceManager graphics Field Value GraphicsDeviceManager windowSize private readonly Point windowSize Field Value Point Properties graphicsDevice public GraphicsDevice graphicsDevice { get; private set; } Property Value GraphicsDevice spriteBatch public SpriteBatch spriteBatch { get; private set; } Property Value SpriteBatch Methods GetGraphicsDevice() public GraphicsDevice GetGraphicsDevice() Returns GraphicsDevice GetWindowSize() public Point GetWindowSize() Returns Point Initialize() public void Initialize()"
  },
  "api/ECS.Core.IComponentPool.html": {
    "href": "api/ECS.Core.IComponentPool.html",
    "title": "Interface IComponentPool | Super Plant BroZ",
    "summary": "Interface IComponentPool Namespace ECS.Core Assembly ECS.dll public interface IComponentPool Methods Remove(Entity) void Remove(Entity entity) Parameters entity Entity"
  },
  "api/ECS.Core.ISystem.html": {
    "href": "api/ECS.Core.ISystem.html",
    "title": "Interface ISystem | Super Plant BroZ",
    "summary": "Interface ISystem Namespace ECS.Core Assembly ECS.dll public interface ISystem Properties Pausible bool Pausible { get; } Property Value bool Methods Initialize(World) void Initialize(World world) Parameters world World Update(World, GameTime) void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Core.SoundManager.html": {
    "href": "api/ECS.Core.SoundManager.html",
    "title": "Class SoundManager | Super Plant BroZ",
    "summary": "Class SoundManager Namespace ECS.Core Assembly ECS.dll public class SoundManager Inheritance object SoundManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SoundManager(Game, GameAssets) public SoundManager(Game game, GameAssets assets) Parameters game Game assets GameAssets Fields gameAssets private GameAssets gameAssets Field Value GameAssets soundEffects public Dictionary<string, SoundEffect> soundEffects Field Value Dictionary<string, SoundEffect> Methods Initialize() public void Initialize() Play(string) public void Play(string key) Parameters key string"
  },
  "api/ECS.Core.SystemBase.html": {
    "href": "api/ECS.Core.SystemBase.html",
    "title": "Class SystemBase | Super Plant BroZ",
    "summary": "Class SystemBase Namespace ECS.Core Assembly ECS.dll public abstract class SystemBase : ISystem Inheritance object SystemBase Implements ISystem Derived AISystem AnimationSystem FacingSystem RenderSystem AttackSystem HitSystem CharacterSwitchSystem CollisionDetectionSystem CollisionResponseSystem ActionDebugSystem ActionEventDebugSystem CollisionDebugSystem DebugGroundedSystem DebugRenderSystem GamePadDebugSystem RawInputDebugSystem HitboxSystem InputMappingSystem RawInputSystem ItemSwitchSystem LivesSystem ObjectSwitchSystem AirControlSystem AirResistanceSystem BlockSystem ForceSystem FrictionSystem GravitySystem GroundedSystem JumpSystem PositionSystem VelocitySystem PlayerDespawnSystem PlayerSpawningSystem HitboxDespawnSystem ProjectileShootingSystem DespawnSystem HitboxSpawningSystem ProjectileDespawnSystem ProjectileSpawningSystem GameStateSystem PlayerStateSystem DamageSystem UIPositionSystem UITextRenderSystem UIUpdateSystem RandomSystem TimerSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Pausible public virtual bool Pausible { get; } Property Value bool World protected World World { get; private set; } Property Value World Methods GetComponent<T>(Entity) protected ref T GetComponent<T>(Entity entity) where T : struct Parameters entity Entity Returns T Type Parameters T GetEntitiesWith<T>(Entity) protected IEnumerable<Entity> GetEntitiesWith<T>(Entity entity) where T : struct Parameters entity Entity Returns IEnumerable<Entity> Type Parameters T HasComponents<T>(Entity) protected bool HasComponents<T>(Entity entity) where T : struct Parameters entity Entity Returns bool Type Parameters T Initialize(World) public virtual void Initialize(World world) Parameters world World Publish<T>(T) protected void Publish<T>(T evt) where T : IEvent Parameters evt T Type Parameters T Subscribe<T>(Action<IEvent>) protected void Subscribe<T>(Action<IEvent> handler) where T : IEvent Parameters handler Action<IEvent> Type Parameters T Update(World, GameTime) public abstract void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Core.SystemBuilder.html": {
    "href": "api/ECS.Core.SystemBuilder.html",
    "title": "Class SystemBuilder | Super Plant BroZ",
    "summary": "Class SystemBuilder Namespace ECS.Core Assembly ECS.dll public static class SystemBuilder Inheritance object SystemBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInputSystems(World) private static void AddInputSystems(World world) Parameters world World AddPostUpdateSystems(World, GameAssets, GraphicsManager) private static void AddPostUpdateSystems(World world, GameAssets assets, GraphicsManager graphicsManager) Parameters world World assets GameAssets graphicsManager GraphicsManager AddPreUpdateSystems(World, GameStateManager, GameAssets) private static void AddPreUpdateSystems(World world, GameStateManager gameStateManager, GameAssets assets) Parameters world World gameStateManager GameStateManager assets GameAssets AddRenderSystems(World, GameAssets, GraphicsManager) private static void AddRenderSystems(World world, GameAssets assets, GraphicsManager graphicsManager) Parameters world World assets GameAssets graphicsManager GraphicsManager AddUpdateSystems(World) private static void AddUpdateSystems(World world) Parameters world World BuildSystems(World, GameStateManager, GameAssets, GraphicsManager) public static void BuildSystems(World world, GameStateManager gameStateManager, GameAssets assets, GraphicsManager graphicsManager) Parameters world World gameStateManager GameStateManager assets GameAssets graphicsManager GraphicsManager"
  },
  "api/ECS.Core.SystemExecutionPhase.html": {
    "href": "api/ECS.Core.SystemExecutionPhase.html",
    "title": "Enum SystemExecutionPhase | Super Plant BroZ",
    "summary": "Enum SystemExecutionPhase Namespace ECS.Core Assembly ECS.dll public enum SystemExecutionPhase Fields Input = 0 PostUpdate = 3 PreUpdate = 1 Render = 4 Update = 2"
  },
  "api/ECS.Core.SystemInfo.html": {
    "href": "api/ECS.Core.SystemInfo.html",
    "title": "Class SystemInfo | Super Plant BroZ",
    "summary": "Class SystemInfo Namespace ECS.Core Assembly ECS.dll public class SystemInfo Inheritance object SystemInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemInfo(ISystem, SystemExecutionPhase, int) public SystemInfo(ISystem system, SystemExecutionPhase phase, int priority = 0) Parameters system ISystem phase SystemExecutionPhase priority int Properties Phase public SystemExecutionPhase Phase { get; } Property Value SystemExecutionPhase Priority public int Priority { get; } Property Value int System public ISystem System { get; } Property Value ISystem"
  },
  "api/ECS.Core.SystemManager.html": {
    "href": "api/ECS.Core.SystemManager.html",
    "title": "Class SystemManager | Super Plant BroZ",
    "summary": "Class SystemManager Namespace ECS.Core Assembly ECS.dll public class SystemManager Inheritance object SystemManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemManager(World) public SystemManager(World world) Parameters world World Fields LogInterval private const int LogInterval = 1000 Field Value int executionTimeHistory private readonly Dictionary<string, (double TotalTime, int Count)> executionTimeHistory Field Value Dictionary<string, (double TotalTime, int Count)> loopCount private int loopCount Field Value int needsSort private bool needsSort Field Value bool systemsByPhase private readonly Dictionary<SystemExecutionPhase, List<SystemInfo>> systemsByPhase Field Value Dictionary<SystemExecutionPhase, List<SystemInfo>> world private readonly World world Field Value World Properties ProfilingEnabled public bool ProfilingEnabled { get; set; } Property Value bool Methods AddSystem(ISystem, SystemExecutionPhase, int) public void AddSystem(ISystem system, SystemExecutionPhase phase, int priority = 0) Parameters system ISystem phase SystemExecutionPhase priority int GetAllSystems() public IEnumerable<ISystem> GetAllSystems() Returns IEnumerable<ISystem> LogExecutionTimes() private void LogExecutionTimes() RemoveSystem(ISystem) public void RemoveSystem(ISystem system) Parameters system ISystem SortSystems() private void SortSystems() UpdatePhase(SystemExecutionPhase, GameTime) public void UpdatePhase(SystemExecutionPhase phase, GameTime gameTime) Parameters phase SystemExecutionPhase gameTime GameTime"
  },
  "api/ECS.Core.Utilities.EntityUtils.html": {
    "href": "api/ECS.Core.Utilities.EntityUtils.html",
    "title": "Class EntityUtils | Super Plant BroZ",
    "summary": "Class EntityUtils Namespace ECS.Core.Utilities Assembly ECS.dll public static class EntityUtils Inheritance object EntityUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields setterCache private static readonly Dictionary<Type, Action<World, Entity, object>> setterCache Field Value Dictionary<Type, Action<World, Entity, object>> Methods ApplyComponents(World, Entity, EntityConfig) public static void ApplyComponents(World world, Entity entity, EntityConfig config) Parameters world World entity Entity config EntityConfig ApplyInputConfig(World, Entity, InputConfig) public static void ApplyInputConfig(World world, Entity entity, InputConfig inputConfig) Parameters world World entity Entity inputConfig InputConfig ApplySpriteAndAnimation(World, Entity, Texture2D, AnimationConfig) public static void ApplySpriteAndAnimation(World world, Entity entity, Texture2D spriteSheet, AnimationConfig animationConfig) Parameters world World entity Entity spriteSheet Texture2D animationConfig AnimationConfig CreateSetter(Type) private static Action<World, Entity, object> CreateSetter(Type componentType) Parameters componentType Type Returns Action<World, Entity, object>"
  },
  "api/ECS.Core.Utilities.GameStateHelper.html": {
    "href": "api/ECS.Core.Utilities.GameStateHelper.html",
    "title": "Class GameStateHelper | Super Plant BroZ",
    "summary": "Class GameStateHelper Namespace ECS.Core.Utilities Assembly ECS.dll public static class GameStateHelper Inheritance object GameStateHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsPaused(World) public static bool IsPaused(World world) Parameters world World Returns bool"
  },
  "api/ECS.Core.Utilities.PolygonTools.html": {
    "href": "api/ECS.Core.Utilities.PolygonTools.html",
    "title": "Class PolygonTools | Super Plant BroZ",
    "summary": "Class PolygonTools Namespace ECS.Core.Utilities Assembly ECS.dll public static class PolygonTools Inheritance object PolygonTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetPolygonCenter(Vector2[]) Calculates the center point of a polygon. public static Vector2 GetPolygonCenter(Vector2[] vertices) Parameters vertices Vector2[] Array of polygon vertices. Returns Vector2 Center point of the polygon. GetTransformedVertices(Entity, Polygon, Position, Scale) Transforms polygon vertices from local space to world space, accounting for entity scale and position. public static Vector2[] GetTransformedVertices(Entity entity, Polygon polygon, Position pos, Scale scale = default) Parameters entity Entity The entity the polygon belongs to. polygon Polygon The polygon whose vertices to transform. pos Position The entity's position component. scale Scale The entity's scale component (optional). Returns Vector2[] Array of transformed vertices in world space. ProjectPolygon(Vector2[], Vector2) Projects a polygon onto an axis and returns the min/max points of projection. public static (float X, float Y) ProjectPolygon(Vector2[] vertices, Vector2 axis) Parameters vertices Vector2[] Vertices of the polygon to project. axis Vector2 Axis to project onto. Returns (float X, float Y) Tuple containing min and max points of projection."
  },
  "api/ECS.Core.Utilities.html": {
    "href": "api/ECS.Core.Utilities.html",
    "title": "Namespace ECS.Core.Utilities | Super Plant BroZ",
    "summary": "Namespace ECS.Core.Utilities Classes EntityUtils GameStateHelper PolygonTools"
  },
  "api/ECS.Core.World.html": {
    "href": "api/ECS.Core.World.html",
    "title": "Class World | Super Plant BroZ",
    "summary": "Class World Namespace ECS.Core Assembly ECS.dll public class World Inheritance object World Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors World() public World() Fields componentPools private readonly Dictionary<Type, IComponentPool> componentPools Field Value Dictionary<Type, IComponentPool> entities private readonly HashSet<Entity> entities Field Value HashSet<Entity> entitiesToDestroy private readonly HashSet<Entity> entitiesToDestroy Field Value HashSet<Entity> nextEntityId private int nextEntityId Field Value int recycledEntityIds private readonly Stack<int> recycledEntityIds Field Value Stack<int> systemManager private readonly SystemManager systemManager Field Value SystemManager Properties EventBus public EventBus EventBus { get; } Property Value EventBus entityFactory public EntityFactory entityFactory { get; } Property Value EntityFactory Methods AddSystem(ISystem, SystemExecutionPhase, int) public void AddSystem(ISystem system, SystemExecutionPhase phase, int priority = 0) Parameters system ISystem phase SystemExecutionPhase priority int CreateEntity() public Entity CreateEntity() Returns Entity DestroyEntity(Entity) public void DestroyEntity(Entity entity) Parameters entity Entity Draw(GameTime, GraphicsManager) public void Draw(GameTime gameTime, GraphicsManager graphicsManager) Parameters gameTime GameTime graphicsManager GraphicsManager GetEntities() public HashSet<Entity> GetEntities() Returns HashSet<Entity> GetPool<T>() public ComponentPool<T> GetPool<T>() where T : struct Returns ComponentPool<T> Type Parameters T ProcessEntityDestructions() private void ProcessEntityDestructions() Update(GameTime) public void Update(GameTime gameTime) Parameters gameTime GameTime"
  },
  "api/ECS.Core.html": {
    "href": "api/ECS.Core.html",
    "title": "Namespace ECS.Core | Super Plant BroZ",
    "summary": "Namespace ECS.Core Namespaces ECS.Core.Utilities Classes AssetLoader AssetManager ComponentPool<T> EntityAssetKey EntityFactory EntityRegistry EventBus The event bus, a central system for managing event publication and subscription. Any subscriber to the type will recieve the published event. Each Action handles an event of type IEvent. GameAssets GameInitializer GameStateManager GraphicsManager SoundManager SystemBase SystemBuilder SystemInfo SystemManager World Structs Entity Interfaces IComponentPool ISystem Enums SystemExecutionPhase"
  },
  "api/ECS.Events.ActionEvent.html": {
    "href": "api/ECS.Events.ActionEvent.html",
    "title": "Struct ActionEvent | Super Plant BroZ",
    "summary": "Struct ActionEvent Namespace ECS.Events Assembly ECS.dll public struct ActionEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ActionName public string ActionName Field Value string Entity public Entity Entity Field Value Entity IsEnded public bool IsEnded Field Value bool IsHeld public bool IsHeld Field Value bool IsStarted public bool IsStarted Field Value bool"
  },
  "api/ECS.Events.AnimationStateEvent.html": {
    "href": "api/ECS.Events.AnimationStateEvent.html",
    "title": "Struct AnimationStateEvent | Super Plant BroZ",
    "summary": "Struct AnimationStateEvent Namespace ECS.Events Assembly ECS.dll public struct AnimationStateEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity NewState public string NewState Field Value string"
  },
  "api/ECS.Events.CollisionEvent.html": {
    "href": "api/ECS.Events.CollisionEvent.html",
    "title": "Struct CollisionEvent | Super Plant BroZ",
    "summary": "Struct CollisionEvent Namespace ECS.Events Assembly ECS.dll public struct CollisionEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Contact public Contact Contact Field Value Contact EventType public CollisionEventType EventType Field Value CollisionEventType"
  },
  "api/ECS.Events.CollisionEventType.html": {
    "href": "api/ECS.Events.CollisionEventType.html",
    "title": "Enum CollisionEventType | Super Plant BroZ",
    "summary": "Enum CollisionEventType Namespace ECS.Events Assembly ECS.dll public enum CollisionEventType Fields Begin = 0 End = 2 Stay = 1"
  },
  "api/ECS.Events.DespawnEvent.html": {
    "href": "api/ECS.Events.DespawnEvent.html",
    "title": "Struct DespawnEvent | Super Plant BroZ",
    "summary": "Struct DespawnEvent Namespace ECS.Events Assembly ECS.dll public struct DespawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.GameExitEvent.html": {
    "href": "api/ECS.Events.GameExitEvent.html",
    "title": "Struct GameExitEvent | Super Plant BroZ",
    "summary": "Struct GameExitEvent Namespace ECS.Events Assembly ECS.dll public struct GameExitEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.HitEvent.html": {
    "href": "api/ECS.Events.HitEvent.html",
    "title": "Struct HitEvent | Super Plant BroZ",
    "summary": "Struct HitEvent Namespace ECS.Events Assembly ECS.dll public struct HitEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Attacker public Entity Attacker Field Value Entity ContactPoint public Vector2 ContactPoint Field Value Vector2 Damage public int Damage Field Value int Knockback public float Knockback Field Value float Target public Entity Target Field Value Entity"
  },
  "api/ECS.Events.IEvent.html": {
    "href": "api/ECS.Events.IEvent.html",
    "title": "Interface IEvent | Super Plant BroZ",
    "summary": "Interface IEvent Namespace ECS.Events Assembly ECS.dll public interface IEvent"
  },
  "api/ECS.Events.PlayerStateEvent.html": {
    "href": "api/ECS.Events.PlayerStateEvent.html",
    "title": "Struct PlayerStateEvent | Super Plant BroZ",
    "summary": "Struct PlayerStateEvent Namespace ECS.Events Assembly ECS.dll public struct PlayerStateEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Duration public float? Duration Field Value float? Entity public Entity Entity Field Value Entity Force public bool Force Field Value bool RequestedState public PlayerState RequestedState Field Value PlayerState"
  },
  "api/ECS.Events.RawInputEvent.html": {
    "href": "api/ECS.Events.RawInputEvent.html",
    "title": "Struct RawInputEvent | Super Plant BroZ",
    "summary": "Struct RawInputEvent Namespace ECS.Events Assembly ECS.dll public struct RawInputEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity IsGamepadInput public bool IsGamepadInput Field Value bool IsJoystickInput public bool IsJoystickInput Field Value bool IsPressed public bool IsPressed Field Value bool IsTriggerInput public bool IsTriggerInput Field Value bool JoystickDirection public JoystickDirection? JoystickDirection Field Value JoystickDirection? JoystickType public JoystickType? JoystickType Field Value JoystickType? JoystickValue public Vector2? JoystickValue Field Value Vector2? RawButton public Buttons? RawButton Field Value Buttons? RawKey public Keys? RawKey Field Value Keys? TriggerType public TriggerType? TriggerType Field Value TriggerType? TriggerValue public float? TriggerValue Field Value float?"
  },
  "api/ECS.Events.SpawnEvent.html": {
    "href": "api/ECS.Events.SpawnEvent.html",
    "title": "Struct SpawnEvent | Super Plant BroZ",
    "summary": "Struct SpawnEvent Namespace ECS.Events Assembly ECS.dll public struct SpawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity World public World World Field Value World typeSpawned public string typeSpawned Field Value string"
  },
  "api/ECS.Events.TimerEvent.html": {
    "href": "api/ECS.Events.TimerEvent.html",
    "title": "Struct TimerEvent | Super Plant BroZ",
    "summary": "Struct TimerEvent Namespace ECS.Events Assembly ECS.dll public struct TimerEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity TimerType public TimerType TimerType Field Value TimerType"
  },
  "api/ECS.Events.html": {
    "href": "api/ECS.Events.html",
    "title": "Namespace ECS.Events | Super Plant BroZ",
    "summary": "Namespace ECS.Events Structs ActionEvent AnimationStateEvent CollisionEvent DespawnEvent GameExitEvent HitEvent PlayerStateEvent RawInputEvent SpawnEvent TimerEvent Interfaces IEvent Enums CollisionEventType"
  },
  "api/ECS.Game1.html": {
    "href": "api/ECS.Game1.html",
    "title": "Class Game1 | Super Plant BroZ",
    "summary": "Class Game1 Namespace ECS Assembly ECS.dll public class Game1 : Game, IDisposable Inheritance object Game Game1 Implements IDisposable Inherited Members Game.Dispose() Game.Dispose(bool) Game.Exit() Game.ResetElapsedTime() Game.SuppressDraw() Game.RunOneFrame() Game.Run() Game.Run(GameRunBehavior) Game.Tick() Game.BeginDraw() Game.EndDraw() Game.BeginRun() Game.EndRun() Game.UnloadContent() Game.OnExiting(object, EventArgs) Game.OnActivated(object, EventArgs) Game.OnDeactivated(object, EventArgs) Game.LaunchParameters Game.Components Game.InactiveSleepTime Game.MaxElapsedTime Game.IsActive Game.IsMouseVisible Game.TargetElapsedTime Game.IsFixedTimeStep Game.Services Game.Content Game.GraphicsDevice Game.Window Game.Activated Game.Deactivated Game.Disposed Game.Exiting object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Game1() public Game1() Fields assets private GameAssets assets Field Value GameAssets gameStateManager private GameStateManager gameStateManager Field Value GameStateManager graphicsManager private GraphicsManager graphicsManager Field Value GraphicsManager soundManager private SoundManager soundManager Field Value SoundManager world private World world Field Value World Methods Draw(GameTime) protected override void Draw(GameTime gameTime) Parameters gameTime GameTime Initialize() protected override void Initialize() LoadContent() protected override void LoadContent() Update(GameTime) protected override void Update(GameTime gameTime) Parameters gameTime GameTime"
  },
  "api/ECS.Program.html": {
    "href": "api/ECS.Program.html",
    "title": "Class Program | Super Plant BroZ",
    "summary": "Class Program Namespace ECS Assembly ECS.dll public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/ECS.Resources.ColorJsonConverter.html": {
    "href": "api/ECS.Resources.ColorJsonConverter.html",
    "title": "Class ColorJsonConverter | Super Plant BroZ",
    "summary": "Class ColorJsonConverter Namespace ECS.Resources Assembly ECS.dll public class ColorJsonConverter : JsonConverter<Color> Inheritance object JsonConverter JsonConverter<Color> ColorJsonConverter Inherited Members JsonConverter<Color>.CanConvert(Type) JsonConverter<Color>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Color>.WriteAsPropertyName(Utf8JsonWriter, Color, JsonSerializerOptions) JsonConverter<Color>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type Microsoft.Xna.Framework.Color. public override Color Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns Color The converted value. Write(Utf8JsonWriter, Color, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, Color value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value Color The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ECS.Resources.EntityConfig.html": {
    "href": "api/ECS.Resources.EntityConfig.html",
    "title": "Class EntityConfig | Super Plant BroZ",
    "summary": "Class EntityConfig Namespace ECS.Resources Assembly ECS.dll public class EntityConfig Inheritance object EntityConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Assets public Dictionary<string, string> Assets { get; set; } Property Value Dictionary<string, string> Components public Dictionary<Type, object> Components { get; } Property Value Dictionary<Type, object>"
  },
  "api/ECS.Resources.EntityConfigLoader.html": {
    "href": "api/ECS.Resources.EntityConfigLoader.html",
    "title": "Class EntityConfigLoader | Super Plant BroZ",
    "summary": "Class EntityConfigLoader Namespace ECS.Resources Assembly ECS.dll public class EntityConfigLoader : JsonLoaderBase<EntityConfig>, IJsonLoader<EntityConfig> Inheritance object JsonLoaderBase<EntityConfig> EntityConfigLoader Implements IJsonLoader<EntityConfig> Inherited Members JsonLoaderBase<EntityConfig>.DefaultOptions JsonLoaderBase<EntityConfig>.LoadFromJson(string) JsonLoaderBase<EntityConfig>.LoadFromFile(string) JsonLoaderBase<EntityConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<EntityConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ComponentTypes private static readonly Dictionary<string, Type> ComponentTypes Field Value Dictionary<string, Type> Methods ParseJson(string) protected override EntityConfig ParseJson(string jsonContent) Parameters jsonContent string Returns EntityConfig"
  },
  "api/ECS.Resources.IJsonLoader-1.html": {
    "href": "api/ECS.Resources.IJsonLoader-1.html",
    "title": "Interface IJsonLoader<T> | Super Plant BroZ",
    "summary": "Interface IJsonLoader<T> Namespace ECS.Resources Assembly ECS.dll public interface IJsonLoader<T> Type Parameters T Methods LoadFromFile(string) T LoadFromFile(string filePath) Parameters filePath string Returns T LoadFromJson(string) T LoadFromJson(string jsonContent) Parameters jsonContent string Returns T"
  },
  "api/ECS.Resources.InputConfigLoader.InputActionJson.html": {
    "href": "api/ECS.Resources.InputConfigLoader.InputActionJson.html",
    "title": "Class InputConfigLoader.InputActionJson | Super Plant BroZ",
    "summary": "Class InputConfigLoader.InputActionJson Namespace ECS.Resources Assembly ECS.dll private class InputConfigLoader.InputActionJson Inheritance object InputConfigLoader.InputActionJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Buttons public List<string> Buttons { get; set; } Property Value List<string> JoystickInput public List<InputConfigLoader.JoystickInputJson> JoystickInput { get; set; } Property Value List<InputConfigLoader.JoystickInputJson> Keys public List<string> Keys { get; set; } Property Value List<string> Triggers public List<string> Triggers { get; set; } Property Value List<string>"
  },
  "api/ECS.Resources.InputConfigLoader.InputConfigJson.html": {
    "href": "api/ECS.Resources.InputConfigLoader.InputConfigJson.html",
    "title": "Class InputConfigLoader.InputConfigJson | Super Plant BroZ",
    "summary": "Class InputConfigLoader.InputConfigJson Namespace ECS.Resources Assembly ECS.dll private class InputConfigLoader.InputConfigJson Inheritance object InputConfigLoader.InputConfigJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actions public Dictionary<string, InputConfigLoader.InputActionJson> Actions { get; set; } Property Value Dictionary<string, InputConfigLoader.InputActionJson>"
  },
  "api/ECS.Resources.InputConfigLoader.JoystickInputJson.html": {
    "href": "api/ECS.Resources.InputConfigLoader.JoystickInputJson.html",
    "title": "Class InputConfigLoader.JoystickInputJson | Super Plant BroZ",
    "summary": "Class InputConfigLoader.JoystickInputJson Namespace ECS.Resources Assembly ECS.dll private class InputConfigLoader.JoystickInputJson Inheritance object InputConfigLoader.JoystickInputJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties JoystickDirection public string JoystickDirection { get; set; } Property Value string JoystickThreshold public float JoystickThreshold { get; set; } Property Value float JoystickType public string JoystickType { get; set; } Property Value string"
  },
  "api/ECS.Resources.InputConfigLoader.html": {
    "href": "api/ECS.Resources.InputConfigLoader.html",
    "title": "Class InputConfigLoader | Super Plant BroZ",
    "summary": "Class InputConfigLoader Namespace ECS.Resources Assembly ECS.dll public class InputConfigLoader : JsonLoaderBase<InputConfig>, IJsonLoader<InputConfig> Inheritance object JsonLoaderBase<InputConfig> InputConfigLoader Implements IJsonLoader<InputConfig> Inherited Members JsonLoaderBase<InputConfig>.DefaultOptions JsonLoaderBase<InputConfig>.LoadFromJson(string) JsonLoaderBase<InputConfig>.LoadFromFile(string) JsonLoaderBase<InputConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<InputConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseJson(string) protected override InputConfig ParseJson(string jsonContent) Parameters jsonContent string Returns InputConfig"
  },
  "api/ECS.Resources.JsonLoaderBase-1.html": {
    "href": "api/ECS.Resources.JsonLoaderBase-1.html",
    "title": "Class JsonLoaderBase<T> | Super Plant BroZ",
    "summary": "Class JsonLoaderBase<T> Namespace ECS.Resources Assembly ECS.dll public abstract class JsonLoaderBase<T> : IJsonLoader<T> Type Parameters T Inheritance object JsonLoaderBase<T> Implements IJsonLoader<T> Derived EntityConfigLoader InputConfigLoader SpriteSheetLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultOptions protected static readonly JsonSerializerOptions DefaultOptions Field Value JsonSerializerOptions Methods GetOptionalValue<TValue>(JsonElement, string, TValue) protected TValue GetOptionalValue<TValue>(JsonElement element, string propertyName, TValue defaultValue) Parameters element JsonElement propertyName string defaultValue TValue Returns TValue Type Parameters TValue GetRequiredValue<TValue>(JsonElement, string) protected TValue GetRequiredValue<TValue>(JsonElement element, string propertyName) Parameters element JsonElement propertyName string Returns TValue Type Parameters TValue LoadFromFile(string) public T LoadFromFile(string filePath) Parameters filePath string Returns T LoadFromJson(string) public T LoadFromJson(string jsonContent) Parameters jsonContent string Returns T ParseJson(string) protected abstract T ParseJson(string jsonContent) Parameters jsonContent string Returns T"
  },
  "api/ECS.Resources.SpriteSheetLoader.FrameJson.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.FrameJson.html",
    "title": "Class SpriteSheetLoader.FrameJson | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader.FrameJson Namespace ECS.Resources Assembly ECS.dll private class SpriteSheetLoader.FrameJson Inheritance object SpriteSheetLoader.FrameJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration public float Duration { get; set; } Property Value float Height public int Height { get; set; } Property Value int Width public int Width { get; set; } Property Value int X public int X { get; set; } Property Value int Y public int Y { get; set; } Property Value int"
  },
  "api/ECS.Resources.SpriteSheetLoader.SpriteSheetJson.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.SpriteSheetJson.html",
    "title": "Class SpriteSheetLoader.SpriteSheetJson | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader.SpriteSheetJson Namespace ECS.Resources Assembly ECS.dll private class SpriteSheetLoader.SpriteSheetJson Inheritance object SpriteSheetLoader.SpriteSheetJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties States public Dictionary<string, SpriteSheetLoader.StateJson> States { get; set; } Property Value Dictionary<string, SpriteSheetLoader.StateJson>"
  },
  "api/ECS.Resources.SpriteSheetLoader.StateJson.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.StateJson.html",
    "title": "Class SpriteSheetLoader.StateJson | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader.StateJson Namespace ECS.Resources Assembly ECS.dll private class SpriteSheetLoader.StateJson Inheritance object SpriteSheetLoader.StateJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration public float Duration { get; set; } Property Value float Frames public List<SpriteSheetLoader.FrameJson> Frames { get; set; } Property Value List<SpriteSheetLoader.FrameJson>"
  },
  "api/ECS.Resources.SpriteSheetLoader.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.html",
    "title": "Class SpriteSheetLoader | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader Namespace ECS.Resources Assembly ECS.dll public class SpriteSheetLoader : JsonLoaderBase<AnimationConfig>, IJsonLoader<AnimationConfig> Inheritance object JsonLoaderBase<AnimationConfig> SpriteSheetLoader Implements IJsonLoader<AnimationConfig> Inherited Members JsonLoaderBase<AnimationConfig>.DefaultOptions JsonLoaderBase<AnimationConfig>.LoadFromJson(string) JsonLoaderBase<AnimationConfig>.LoadFromFile(string) JsonLoaderBase<AnimationConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<AnimationConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSourceRect(AnimationConfig, string) public static Rectangle GetSourceRect(AnimationConfig config, string stateName) Parameters config AnimationConfig stateName string Returns Rectangle ParseJson(string) protected override AnimationConfig ParseJson(string jsonContent) Parameters jsonContent string Returns AnimationConfig"
  },
  "api/ECS.Resources.Vector2JsonConverter.html": {
    "href": "api/ECS.Resources.Vector2JsonConverter.html",
    "title": "Class Vector2JsonConverter | Super Plant BroZ",
    "summary": "Class Vector2JsonConverter Namespace ECS.Resources Assembly ECS.dll public class Vector2JsonConverter : JsonConverter<Vector2> Inheritance object JsonConverter JsonConverter<Vector2> Vector2JsonConverter Inherited Members JsonConverter<Vector2>.CanConvert(Type) JsonConverter<Vector2>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Vector2>.WriteAsPropertyName(Utf8JsonWriter, Vector2, JsonSerializerOptions) JsonConverter<Vector2>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type Microsoft.Xna.Framework.Vector2. public override Vector2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns Vector2 The converted value. Write(Utf8JsonWriter, Vector2, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, Vector2 value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value Vector2 The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ECS.Resources.html": {
    "href": "api/ECS.Resources.html",
    "title": "Namespace ECS.Resources | Super Plant BroZ",
    "summary": "Namespace ECS.Resources Classes ColorJsonConverter EntityConfig EntityConfigLoader InputConfigLoader InputConfigLoader.InputActionJson InputConfigLoader.InputConfigJson InputConfigLoader.JoystickInputJson JsonLoaderBase<T> SpriteSheetLoader SpriteSheetLoader.FrameJson SpriteSheetLoader.SpriteSheetJson SpriteSheetLoader.StateJson Vector2JsonConverter Interfaces IJsonLoader<T>"
  },
  "api/ECS.Systems.AI.AISystem.html": {
    "href": "api/ECS.Systems.AI.AISystem.html",
    "title": "Class AISystem | Super Plant BroZ",
    "summary": "Class AISystem Namespace ECS.Systems.AI Assembly ECS.dll public class AISystem : SystemBase, ISystem Inheritance object SystemBase AISystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DEFAULT_AI_TIMER_DURATION private const float DEFAULT_AI_TIMER_DURATION = 1 Field Value float actions private Dictionary<int, string> actions Field Value Dictionary<int, string> Methods HandleTimerUp(IEvent) private void HandleTimerUp(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World MappingSetter() private void MappingSetter() Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.AI.html": {
    "href": "api/ECS.Systems.AI.html",
    "title": "Namespace ECS.Systems.AI | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.AI Classes AISystem"
  },
  "api/ECS.Systems.Animation.AnimationSystem.html": {
    "href": "api/ECS.Systems.Animation.AnimationSystem.html",
    "title": "Class AnimationSystem | Super Plant BroZ",
    "summary": "Class AnimationSystem Namespace ECS.Systems.Animation Assembly ECS.dll public class AnimationSystem : SystemBase, ISystem Inheritance object SystemBase AnimationSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleAnimationStateChange(IEvent) private void HandleAnimationStateChange(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Animation.FacingSystem.html": {
    "href": "api/ECS.Systems.Animation.FacingSystem.html",
    "title": "Class FacingSystem | Super Plant BroZ",
    "summary": "Class FacingSystem Namespace ECS.Systems.Animation Assembly ECS.dll public class FacingSystem : SystemBase, ISystem Inheritance object SystemBase FacingSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isWalkingLeft private Dictionary<Entity, bool> isWalkingLeft Field Value Dictionary<Entity, bool> isWalkingRight private Dictionary<Entity, bool> isWalkingRight Field Value Dictionary<Entity, bool> Methods HandleWalkAction(IEvent) private void HandleWalkAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Animation.RenderSystem.html": {
    "href": "api/ECS.Systems.Animation.RenderSystem.html",
    "title": "Class RenderSystem | Super Plant BroZ",
    "summary": "Class RenderSystem Namespace ECS.Systems.Animation Assembly ECS.dll public class RenderSystem : SystemBase, ISystem Inheritance object SystemBase RenderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RenderSystem(SpriteBatch) public RenderSystem(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch Fields renderQueue private List<Entity> renderQueue Field Value List<Entity> spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch Properties Pausible public override bool Pausible { get; } Property Value bool Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Animation.html": {
    "href": "api/ECS.Systems.Animation.html",
    "title": "Namespace ECS.Systems.Animation | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Animation Classes AnimationSystem FacingSystem RenderSystem"
  },
  "api/ECS.Systems.Attacking.AttackSystem.html": {
    "href": "api/ECS.Systems.Attacking.AttackSystem.html",
    "title": "Class AttackSystem | Super Plant BroZ",
    "summary": "Class AttackSystem Namespace ECS.Systems.Attacking Assembly ECS.dll public class AttackSystem : SystemBase, ISystem Inheritance object SystemBase AttackSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleAttackAction(IEvent) private void HandleAttackAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Attacking.HitSystem.html": {
    "href": "api/ECS.Systems.Attacking.HitSystem.html",
    "title": "Class HitSystem | Super Plant BroZ",
    "summary": "Class HitSystem Namespace ECS.Systems.Attacking Assembly ECS.dll public class HitSystem : SystemBase, ISystem Inheritance object SystemBase HitSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleHit(IEvent) private void HandleHit(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Attacking.html": {
    "href": "api/ECS.Systems.Attacking.html",
    "title": "Namespace ECS.Systems.Attacking | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Attacking Classes AttackSystem HitSystem"
  },
  "api/ECS.Systems.Characters.CharacterSwitchSystem.html": {
    "href": "api/ECS.Systems.Characters.CharacterSwitchSystem.html",
    "title": "Class CharacterSwitchSystem | Super Plant BroZ",
    "summary": "Class CharacterSwitchSystem Namespace ECS.Systems.Characters Assembly ECS.dll public class CharacterSwitchSystem : SystemBase, ISystem Inheritance object SystemBase CharacterSwitchSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CharacterSwitchSystem(GameAssets) public CharacterSwitchSystem(GameAssets assets) Parameters assets GameAssets Fields actionDirections private readonly Dictionary<string, int> actionDirections Field Value Dictionary<string, int> assets private readonly GameAssets assets Field Value GameAssets factory private EntityFactory factory Field Value EntityFactory lastDirection private int lastDirection Field Value int playableCharacters private HashSet<string> playableCharacters Field Value HashSet<string> switchQueue private readonly Queue<Entity> switchQueue Field Value Queue<Entity> Methods HandleCharacterSwitchAction(IEvent) private void HandleCharacterSwitchAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World InitializePlayableCharacters() private void InitializePlayableCharacters() Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Characters.html": {
    "href": "api/ECS.Systems.Characters.html",
    "title": "Namespace ECS.Systems.Characters | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Characters Classes CharacterSwitchSystem"
  },
  "api/ECS.Systems.Collision.CollisionDetectionSystem.html": {
    "href": "api/ECS.Systems.Collision.CollisionDetectionSystem.html",
    "title": "Class CollisionDetectionSystem | Super Plant BroZ",
    "summary": "Class CollisionDetectionSystem Namespace ECS.Systems.Collision Assembly ECS.dll public class CollisionDetectionSystem : SystemBase, ISystem Inheritance object SystemBase CollisionDetectionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActiveContacts private HashSet<(Entity, Entity)> ActiveContacts Field Value HashSet<(Entity, Entity)> BroadphaseCache private Dictionary<Entity, Rectangle> BroadphaseCache Field Value Dictionary<Entity, Rectangle> transformedVerticesCache private Dictionary<(Entity, Polygon), Vector2[]> transformedVerticesCache Field Value Dictionary<(Entity, Polygon), Vector2[]> Methods BroadPhase(List<(Entity, CollisionBody, Position, Velocity?)>) private List<(Entity, Entity)> BroadPhase(List<(Entity, CollisionBody, Position, Velocity?)> bodies) Parameters bodies List<(Entity, CollisionBody, Position, Velocity?)> Returns List<(Entity, Entity)> CacheTransformedVertices(List<(Entity, CollisionBody, Position, Velocity?)>) private void CacheTransformedVertices(List<(Entity, CollisionBody, Position, Velocity?)> bodies) Parameters bodies List<(Entity, CollisionBody, Position, Velocity?)> CalculateAABB(Entity, CollisionBody, Position) private Rectangle CalculateAABB(Entity entity, CollisionBody body, Position pos) Parameters entity Entity body CollisionBody pos Position Returns Rectangle CalculateContactPoint(Vector2[], Vector2[], Vector2) private Vector2 CalculateContactPoint(Vector2[] verticesA, Vector2[] verticesB, Vector2 normal) Parameters verticesA Vector2[] verticesB Vector2[] normal Vector2 Returns Vector2 CheckPolygonCollision(Entity, Entity, Vector2[], Vector2[], Polygon, Polygon) private Contact? CheckPolygonCollision(Entity entityA, Entity entityB, Vector2[] verticesA, Vector2[] verticesB, Polygon polygonA, Polygon polygonB) Parameters entityA Entity entityB Entity verticesA Vector2[] verticesB Vector2[] polygonA Polygon polygonB Polygon Returns Contact? GetCollidableBodies() private List<(Entity, CollisionBody, Position, Velocity?)> GetCollidableBodies() Returns List<(Entity, CollisionBody, Position, Velocity?)> GetExpandedAABB(Entity, CollisionBody, Position) private Rectangle GetExpandedAABB(Entity entity, CollisionBody body, Position pos) Parameters entity Entity body CollisionBody pos Position Returns Rectangle GetSATAxes(Vector2[], Vector2[]) private List<Vector2> GetSATAxes(Vector2[] verticesA, Vector2[] verticesB) Parameters verticesA Vector2[] verticesB Vector2[] Returns List<Vector2> Initialize(World) public override void Initialize(World world) Parameters world World NarrowPhase(List<(Entity, Entity)>) private List<Contact> NarrowPhase(List<(Entity, Entity)> pairs) Parameters pairs List<(Entity, Entity)> Returns List<Contact> ProcessContacts(List<Contact>) private void ProcessContacts(List<Contact> contacts) Parameters contacts List<Contact> ProcessEntityPairContacts(Entity, Entity, CollisionBody, CollisionBody, Position, Position) private List<Contact> ProcessEntityPairContacts(Entity entityA, Entity entityB, CollisionBody bodyA, CollisionBody bodyB, Position posA, Position posB) Parameters entityA Entity entityB Entity bodyA CollisionBody bodyB CollisionBody posA Position posB Position Returns List<Contact> Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Collision.CollisionResponseSystem.html": {
    "href": "api/ECS.Systems.Collision.CollisionResponseSystem.html",
    "title": "Class CollisionResponseSystem | Super Plant BroZ",
    "summary": "Class CollisionResponseSystem Namespace ECS.Systems.Collision Assembly ECS.dll Handles physical responses to collisions between entities using impulse-based resolution. Implements position correction and velocity response for realistic collision behavior. public class CollisionResponseSystem : SystemBase, ISystem Inheritance object SystemBase CollisionResponseSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleCollision(IEvent) Handles collision events by calculating and applying appropriate physical responses. Implements impulse-based collision response with position correction. private void HandleCollision(IEvent evt) Parameters evt IEvent The collision event to handle. Remarks This method: Filters out trigger collisions (hitbox/hurtbox) Handles both static and dynamic object collisions Applies position correction to prevent object penetration Calculates and applies impulses for velocity response Initialize(World) Initializes the collision response system and subscribes to collision events. public override void Initialize(World world) Parameters world World The game world containing all entities. Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Collision.html": {
    "href": "api/ECS.Systems.Collision.html",
    "title": "Namespace ECS.Systems.Collision | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Collision Classes CollisionDetectionSystem CollisionResponseSystem Handles physical responses to collisions between entities using impulse-based resolution. Implements position correction and velocity response for realistic collision behavior."
  },
  "api/ECS.Systems.Debug.ActionDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.ActionDebugSystem.html",
    "title": "Class ActionDebugSystem | Super Plant BroZ",
    "summary": "Class ActionDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class ActionDebugSystem : SystemBase, ISystem Inheritance object SystemBase ActionDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleAction(IEvent) private void HandleAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.ActionEventDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.ActionEventDebugSystem.html",
    "title": "Class ActionEventDebugSystem | Super Plant BroZ",
    "summary": "Class ActionEventDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class ActionEventDebugSystem : SystemBase, ISystem Inheritance object SystemBase ActionEventDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.CollisionDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.CollisionDebugSystem.html",
    "title": "Class CollisionDebugSystem | Super Plant BroZ",
    "summary": "Class CollisionDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class CollisionDebugSystem : SystemBase, ISystem Inheritance object SystemBase CollisionDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields LOG_INTERVAL private const float LOG_INTERVAL = 1 Field Value float activeCollisions private Dictionary<Entity, List<CollisionEvent>> activeCollisions Field Value Dictionary<Entity, List<CollisionEvent>> collisionCount private int collisionCount Field Value int timeSinceLastLog private float timeSinceLastLog Field Value float Methods HandleCollision(IEvent) private void HandleCollision(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World LogCollision(CollisionEvent) private void LogCollision(CollisionEvent collision) Parameters collision CollisionEvent TrackCollision(Entity, CollisionEvent) private void TrackCollision(Entity entity, CollisionEvent collisionEvent) Parameters entity Entity collisionEvent CollisionEvent Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.DebugGroundedSystem.html": {
    "href": "api/ECS.Systems.Debug.DebugGroundedSystem.html",
    "title": "Class DebugGroundedSystem | Super Plant BroZ",
    "summary": "Class DebugGroundedSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class DebugGroundedSystem : SystemBase, ISystem Inheritance object SystemBase DebugGroundedSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.DebugRenderSystem.html": {
    "href": "api/ECS.Systems.Debug.DebugRenderSystem.html",
    "title": "Class DebugRenderSystem | Super Plant BroZ",
    "summary": "Class DebugRenderSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class DebugRenderSystem : SystemBase, ISystem Inheritance object SystemBase DebugRenderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DebugRenderSystem(GameAssets, GraphicsManager) public DebugRenderSystem(GameAssets assets, GraphicsManager graphicsManager) Parameters assets GameAssets graphicsManager GraphicsManager Fields debugCollisionEvents private List<CollisionEvent> debugCollisionEvents Field Value List<CollisionEvent> debugFont private SpriteFont debugFont Field Value SpriteFont elapsedTime private TimeSpan elapsedTime Field Value TimeSpan frameCounter private int frameCounter Field Value int frameRate private int frameRate Field Value int pixel private Texture2D pixel Field Value Texture2D showEntityIDs private bool showEntityIDs Field Value bool showFPS private bool showFPS Field Value bool showHitboxes private bool showHitboxes Field Value bool showMovementVectors private bool showMovementVectors Field Value bool showPlayerState private bool showPlayerState Field Value bool spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch Properties Pausible public override bool Pausible { get; } Property Value bool Methods CalculateFPS(GameTime) private void CalculateFPS(GameTime gameTime) Parameters gameTime GameTime DrawAccelerationVectors(SpriteBatch) private void DrawAccelerationVectors(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawCollisionContactNormals(SpriteBatch) private void DrawCollisionContactNormals(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawEntityIDs(SpriteBatch) private void DrawEntityIDs(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawFPSCounter(SpriteBatch) private void DrawFPSCounter(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawHitboxes(SpriteBatch) private void DrawHitboxes(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawLine(SpriteBatch, Vector2, Vector2, Color, float) private void DrawLine(SpriteBatch spriteBatch, Vector2 start, Vector2 end, Color color, float thickness) Parameters spriteBatch SpriteBatch start Vector2 end Vector2 color Color thickness float DrawOutlinedText(SpriteBatch, string, Vector2) private void DrawOutlinedText(SpriteBatch spriteBatch, string text, Vector2 position) Parameters spriteBatch SpriteBatch text string position Vector2 DrawPlayerStateText(SpriteBatch) private void DrawPlayerStateText(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawPolygonNormals(SpriteBatch, Vector2[]) private void DrawPolygonNormals(SpriteBatch spriteBatch, Vector2[] vertices) Parameters spriteBatch SpriteBatch vertices Vector2[] DrawRectangle(SpriteBatch, Vector2, Vector2, Color) private void DrawRectangle(SpriteBatch spriteBatch, Vector2 position, Vector2 size, Color color) Parameters spriteBatch SpriteBatch position Vector2 size Vector2 color Color DrawVector(SpriteBatch, Vector2, Vector2, Color, float) private void DrawVector(SpriteBatch spriteBatch, Vector2 origin, Vector2 vectorValue, Color color, float scaleFactor) Parameters spriteBatch SpriteBatch origin Vector2 vectorValue Vector2 color Color scaleFactor float DrawVelocityVectors(SpriteBatch) private void DrawVelocityVectors(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch GetColorForLayer(CollisionLayer) private Color GetColorForLayer(CollisionLayer layer) Parameters layer CollisionLayer Returns Color GetEntityBounds(Entity, CollisionBody, Position) private Rectangle GetEntityBounds(Entity entity, CollisionBody body, Position pos) Parameters entity Entity body CollisionBody pos Position Returns Rectangle HandleAction(IEvent) private void HandleAction(IEvent evt) Parameters evt IEvent HandleCollisionEvent(IEvent) private void HandleCollisionEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.GamePadDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.GamePadDebugSystem.html",
    "title": "Class GamePadDebugSystem | Super Plant BroZ",
    "summary": "Class GamePadDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class GamePadDebugSystem : SystemBase, ISystem Inheritance object SystemBase GamePadDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleInput(IEvent) private void HandleInput(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.RawInputDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.RawInputDebugSystem.html",
    "title": "Class RawInputDebugSystem | Super Plant BroZ",
    "summary": "Class RawInputDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class RawInputDebugSystem : SystemBase, ISystem Inheritance object SystemBase RawInputDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleRawInput(IEvent) private void HandleRawInput(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.html": {
    "href": "api/ECS.Systems.Debug.html",
    "title": "Namespace ECS.Systems.Debug | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Debug Classes ActionDebugSystem ActionEventDebugSystem CollisionDebugSystem DebugGroundedSystem DebugRenderSystem GamePadDebugSystem RawInputDebugSystem"
  },
  "api/ECS.Systems.Hitbox.HitboxSystem.html": {
    "href": "api/ECS.Systems.Hitbox.HitboxSystem.html",
    "title": "Class HitboxSystem | Super Plant BroZ",
    "summary": "Class HitboxSystem Namespace ECS.Systems.Hitbox Assembly ECS.dll public class HitboxSystem : SystemBase, ISystem Inheritance object SystemBase HitboxSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleCollisionEvent(IEvent) private void HandleCollisionEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime isCollidingWithParent(Entity, Entity) private bool isCollidingWithParent(Entity attacker, Entity target) Parameters attacker Entity target Entity Returns bool"
  },
  "api/ECS.Systems.Hitbox.html": {
    "href": "api/ECS.Systems.Hitbox.html",
    "title": "Namespace ECS.Systems.Hitbox | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Hitbox Classes HitboxSystem"
  },
  "api/ECS.Systems.Input.InputMappingSystem.html": {
    "href": "api/ECS.Systems.Input.InputMappingSystem.html",
    "title": "Class InputMappingSystem | Super Plant BroZ",
    "summary": "Class InputMappingSystem Namespace ECS.Systems.Input Assembly ECS.dll public class InputMappingSystem : SystemBase, ISystem Inheritance object SystemBase InputMappingSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields activeActions private Dictionary<Entity, Dictionary<string, bool>> activeActions Field Value Dictionary<Entity, Dictionary<string, bool>> Properties Pausible public override bool Pausible { get; } Property Value bool Methods HandleGamepadInput(Entity, RawInputEvent, InputConfig) private void HandleGamepadInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig HandleJoystickInput(Entity, RawInputEvent, InputConfig) private void HandleJoystickInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig HandleKeyboardInput(Entity, RawInputEvent, InputConfig) private void HandleKeyboardInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig HandleRawInput(IEvent) private void HandleRawInput(IEvent evt) Parameters evt IEvent HandleTriggerInput(Entity, RawInputEvent, InputConfig) private void HandleTriggerInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Input.RawInputSystem.html": {
    "href": "api/ECS.Systems.Input.RawInputSystem.html",
    "title": "Class RawInputSystem | Super Plant BroZ",
    "summary": "Class RawInputSystem Namespace ECS.Systems.Input Assembly ECS.dll public class RawInputSystem : SystemBase, ISystem Inheritance object SystemBase RawInputSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields leftDirection private Dictionary<Entity, JoystickDirection> leftDirection Field Value Dictionary<Entity, JoystickDirection> pressedButtons private Dictionary<Entity, HashSet<Buttons>> pressedButtons Field Value Dictionary<Entity, HashSet<Buttons>> pressedKeys private Dictionary<Entity, HashSet<Keys>> pressedKeys Field Value Dictionary<Entity, HashSet<Keys>> pressedTriggerList private Dictionary<Entity, HashSet<TriggerType>> pressedTriggerList Field Value Dictionary<Entity, HashSet<TriggerType>> rightDirection private Dictionary<Entity, JoystickDirection> rightDirection Field Value Dictionary<Entity, JoystickDirection> Properties Pausible public override bool Pausible { get; } Property Value bool Methods GetLeftJoyStickDirection(Vector2, float) private JoystickDirection GetLeftJoyStickDirection(Vector2 joystick, float threshold) Parameters joystick Vector2 threshold float Returns JoystickDirection GetRightJoyStickDirection(Vector2, float) private JoystickDirection GetRightJoyStickDirection(Vector2 joystick, float threshold) Parameters joystick Vector2 threshold float Returns JoystickDirection HandleGamePad(World, GameTime, GamePadState) private void HandleGamePad(World world, GameTime gameTime, GamePadState gamePadState) Parameters world World gameTime GameTime gamePadState GamePadState HandleJoyStick(World, GameTime, GamePadState) private void HandleJoyStick(World world, GameTime gameTime, GamePadState gamePadState) Parameters world World gameTime GameTime gamePadState GamePadState HandleKeys(World, GameTime) private void HandleKeys(World world, GameTime gameTime) Parameters world World gameTime GameTime HandleLeftJoyStick(Entity, JoystickDirection, float, Vector2) private void HandleLeftJoyStick(Entity entity, JoystickDirection direction, float threshold, Vector2 leftJoystickValue) Parameters entity Entity direction JoystickDirection threshold float leftJoystickValue Vector2 HandleRightJoyStick(Entity, JoystickDirection, float, Vector2) private void HandleRightJoyStick(Entity entity, JoystickDirection direction, float threshold, Vector2 rightJoystickValue) Parameters entity Entity direction JoystickDirection threshold float rightJoystickValue Vector2 HandleTriggers(World, GameTime, GamePadState) private void HandleTriggers(World world, GameTime gameTime, GamePadState gamePadState) Parameters world World gameTime GameTime gamePadState GamePadState Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Input.html": {
    "href": "api/ECS.Systems.Input.html",
    "title": "Namespace ECS.Systems.Input | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Input Classes InputMappingSystem RawInputSystem"
  },
  "api/ECS.Systems.Items.ItemSwitchSystem.html": {
    "href": "api/ECS.Systems.Items.ItemSwitchSystem.html",
    "title": "Class ItemSwitchSystem | Super Plant BroZ",
    "summary": "Class ItemSwitchSystem Namespace ECS.Systems.Items Assembly ECS.dll public class ItemSwitchSystem : SystemBase, ISystem Inheritance object SystemBase ItemSwitchSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields actionDirections private readonly Dictionary<string, int> actionDirections Field Value Dictionary<string, int> Methods HandleItemSwitchAction(IEvent) private void HandleItemSwitchAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Items.html": {
    "href": "api/ECS.Systems.Items.html",
    "title": "Namespace ECS.Systems.Items | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Items Classes ItemSwitchSystem"
  },
  "api/ECS.Systems.Lives.LivesSystem.html": {
    "href": "api/ECS.Systems.Lives.LivesSystem.html",
    "title": "Class LivesSystem | Super Plant BroZ",
    "summary": "Class LivesSystem Namespace ECS.Systems.Lives Assembly ECS.dll public class LivesSystem : SystemBase, ISystem Inheritance object SystemBase LivesSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleDespawn(IEvent) private void HandleDespawn(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Lives.html": {
    "href": "api/ECS.Systems.Lives.html",
    "title": "Namespace ECS.Systems.Lives | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Lives Classes LivesSystem"
  },
  "api/ECS.Systems.Objects.ObjectSwitchSystem.html": {
    "href": "api/ECS.Systems.Objects.ObjectSwitchSystem.html",
    "title": "Class ObjectSwitchSystem | Super Plant BroZ",
    "summary": "Class ObjectSwitchSystem Namespace ECS.Systems.Objects Assembly ECS.dll public class ObjectSwitchSystem : SystemBase, ISystem Inheritance object SystemBase ObjectSwitchSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields actionDirections private readonly Dictionary<string, int> actionDirections Field Value Dictionary<string, int> Methods HandleObjectSwitchAction(IEvent) private void HandleObjectSwitchAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Objects.html": {
    "href": "api/ECS.Systems.Objects.html",
    "title": "Namespace ECS.Systems.Objects | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Objects Classes ObjectSwitchSystem"
  },
  "api/ECS.Systems.Physics.AirControlSystem.html": {
    "href": "api/ECS.Systems.Physics.AirControlSystem.html",
    "title": "Class AirControlSystem | Super Plant BroZ",
    "summary": "Class AirControlSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class AirControlSystem : SystemBase, ISystem Inheritance object SystemBase AirControlSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isWalkingLeft private Dictionary<Entity, bool> isWalkingLeft Field Value Dictionary<Entity, bool> isWalkingRight private Dictionary<Entity, bool> isWalkingRight Field Value Dictionary<Entity, bool> Methods HandleAirMoveAction(IEvent) private void HandleAirMoveAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.AirResistanceSystem.html": {
    "href": "api/ECS.Systems.Physics.AirResistanceSystem.html",
    "title": "Class AirResistanceSystem | Super Plant BroZ",
    "summary": "Class AirResistanceSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class AirResistanceSystem : SystemBase, ISystem Inheritance object SystemBase AirResistanceSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.BlockSystem.html": {
    "href": "api/ECS.Systems.Physics.BlockSystem.html",
    "title": "Class BlockSystem | Super Plant BroZ",
    "summary": "Class BlockSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class BlockSystem : SystemBase, ISystem Inheritance object SystemBase BlockSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleBlockAction(IEvent) private void HandleBlockAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.ForceSystem.html": {
    "href": "api/ECS.Systems.Physics.ForceSystem.html",
    "title": "Class ForceSystem | Super Plant BroZ",
    "summary": "Class ForceSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class ForceSystem : SystemBase, ISystem Inheritance object SystemBase ForceSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.FrictionSystem.html": {
    "href": "api/ECS.Systems.Physics.FrictionSystem.html",
    "title": "Class FrictionSystem | Super Plant BroZ",
    "summary": "Class FrictionSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class FrictionSystem : SystemBase, ISystem Inheritance object SystemBase FrictionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.GravitySystem.html": {
    "href": "api/ECS.Systems.Physics.GravitySystem.html",
    "title": "Class GravitySystem | Super Plant BroZ",
    "summary": "Class GravitySystem Namespace ECS.Systems.Physics Assembly ECS.dll public class GravitySystem : SystemBase, ISystem Inheritance object SystemBase GravitySystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GRAVITY_ACCELERATION private const float GRAVITY_ACCELERATION = 1000 Field Value float gravity private readonly Vector2 gravity Field Value Vector2 Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.GroundedSystem.html": {
    "href": "api/ECS.Systems.Physics.GroundedSystem.html",
    "title": "Class GroundedSystem | Super Plant BroZ",
    "summary": "Class GroundedSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class GroundedSystem : SystemBase, ISystem Inheritance object SystemBase GroundedSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleCollision(IEvent) private void HandleCollision(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdateEntityGroundedState(Entity, CollisionEvent) private void UpdateEntityGroundedState(Entity entity, CollisionEvent collision) Parameters entity Entity collision CollisionEvent"
  },
  "api/ECS.Systems.Physics.JumpSystem.html": {
    "href": "api/ECS.Systems.Physics.JumpSystem.html",
    "title": "Class JumpSystem | Super Plant BroZ",
    "summary": "Class JumpSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class JumpSystem : SystemBase, ISystem Inheritance object SystemBase JumpSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleJump(IEvent) private void HandleJump(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.PositionSystem.html": {
    "href": "api/ECS.Systems.Physics.PositionSystem.html",
    "title": "Class PositionSystem | Super Plant BroZ",
    "summary": "Class PositionSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class PositionSystem : SystemBase, ISystem Inheritance object SystemBase PositionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.VelocitySystem.html": {
    "href": "api/ECS.Systems.Physics.VelocitySystem.html",
    "title": "Class VelocitySystem | Super Plant BroZ",
    "summary": "Class VelocitySystem Namespace ECS.Systems.Physics Assembly ECS.dll public class VelocitySystem : SystemBase, ISystem Inheritance object SystemBase VelocitySystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.html": {
    "href": "api/ECS.Systems.Physics.html",
    "title": "Namespace ECS.Systems.Physics | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Physics Classes AirControlSystem AirResistanceSystem BlockSystem ForceSystem FrictionSystem GravitySystem GroundedSystem JumpSystem PositionSystem VelocitySystem"
  },
  "api/ECS.Systems.Player.PlayerDespawnSystem.html": {
    "href": "api/ECS.Systems.Player.PlayerDespawnSystem.html",
    "title": "Class PlayerDespawnSystem | Super Plant BroZ",
    "summary": "Class PlayerDespawnSystem Namespace ECS.Systems.Player Assembly ECS.dll public class PlayerDespawnSystem : SystemBase, ISystem Inheritance object SystemBase PlayerDespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerDespawnSystem(GraphicsManager) public PlayerDespawnSystem(GraphicsManager graphics) Parameters graphics GraphicsManager Fields graphicsManager private GraphicsManager graphicsManager Field Value GraphicsManager Methods Initialize(World) public override void Initialize(World world) Parameters world World IsOutOfBounds(Entity) private bool IsOutOfBounds(Entity entity) Parameters entity Entity Returns bool Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Player.PlayerSpawningSystem.html": {
    "href": "api/ECS.Systems.Player.PlayerSpawningSystem.html",
    "title": "Class PlayerSpawningSystem | Super Plant BroZ",
    "summary": "Class PlayerSpawningSystem Namespace ECS.Systems.Player Assembly ECS.dll public class PlayerSpawningSystem : SystemBase, ISystem Inheritance object SystemBase PlayerSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleSpawn(IEvent) private void HandleSpawn(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Player.html": {
    "href": "api/ECS.Systems.Player.html",
    "title": "Namespace ECS.Systems.Player | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Player Classes PlayerDespawnSystem PlayerSpawningSystem"
  },
  "api/ECS.Systems.Projectile.HitboxDespawnSystem.html": {
    "href": "api/ECS.Systems.Projectile.HitboxDespawnSystem.html",
    "title": "Class HitboxDespawnSystem | Super Plant BroZ",
    "summary": "Class HitboxDespawnSystem Namespace ECS.Systems.Projectile Assembly ECS.dll public class HitboxDespawnSystem : SystemBase, ISystem Inheritance object SystemBase HitboxDespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields despawners private Stack<Polygon> despawners Field Value Stack<Polygon> Methods HandleTimerUp(IEvent) private void HandleTimerUp(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Projectile.ProjectileShootingSystem.html": {
    "href": "api/ECS.Systems.Projectile.ProjectileShootingSystem.html",
    "title": "Class ProjectileShootingSystem | Super Plant BroZ",
    "summary": "Class ProjectileShootingSystem Namespace ECS.Systems.Projectile Assembly ECS.dll public class ProjectileShootingSystem : SystemBase, ISystem Inheritance object SystemBase ProjectileShootingSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleShootAction(IEvent) private void HandleShootAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Projectile.html": {
    "href": "api/ECS.Systems.Projectile.html",
    "title": "Namespace ECS.Systems.Projectile | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Projectile Classes HitboxDespawnSystem ProjectileShootingSystem"
  },
  "api/ECS.Systems.Spawning.DespawnSystem.html": {
    "href": "api/ECS.Systems.Spawning.DespawnSystem.html",
    "title": "Class DespawnSystem | Super Plant BroZ",
    "summary": "Class DespawnSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class DespawnSystem : SystemBase, ISystem Inheritance object SystemBase DespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields despawners private Stack<Entity> despawners Field Value Stack<Entity> Methods HandleDespawn(IEvent) private void HandleDespawn(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.HitboxSpawningSystem.html": {
    "href": "api/ECS.Systems.Spawning.HitboxSpawningSystem.html",
    "title": "Class HitboxSpawningSystem | Super Plant BroZ",
    "summary": "Class HitboxSpawningSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class HitboxSpawningSystem : SystemBase, ISystem Inheritance object SystemBase HitboxSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HitboxSpawningSystem(GameAssets) public HitboxSpawningSystem(GameAssets assets) Parameters assets GameAssets Fields assets private GameAssets assets Field Value GameAssets entityFactory private EntityFactory entityFactory Field Value EntityFactory Methods HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.ProjectileDespawnSystem.html": {
    "href": "api/ECS.Systems.Spawning.ProjectileDespawnSystem.html",
    "title": "Class ProjectileDespawnSystem | Super Plant BroZ",
    "summary": "Class ProjectileDespawnSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class ProjectileDespawnSystem : SystemBase, ISystem Inheritance object SystemBase ProjectileDespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleTimerUp(IEvent) private void HandleTimerUp(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.ProjectileSpawningSystem.html": {
    "href": "api/ECS.Systems.Spawning.ProjectileSpawningSystem.html",
    "title": "Class ProjectileSpawningSystem | Super Plant BroZ",
    "summary": "Class ProjectileSpawningSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class ProjectileSpawningSystem : SystemBase, ISystem Inheritance object SystemBase ProjectileSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectileSpawningSystem(GameAssets) public ProjectileSpawningSystem(GameAssets assets) Parameters assets GameAssets Fields assets private GameAssets assets Field Value GameAssets entityFactory private EntityFactory entityFactory Field Value EntityFactory spawners private Stack<Entity> spawners Field Value Stack<Entity> Methods HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.html": {
    "href": "api/ECS.Systems.Spawning.html",
    "title": "Namespace ECS.Systems.Spawning | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Spawning Classes DespawnSystem HitboxSpawningSystem ProjectileDespawnSystem ProjectileSpawningSystem"
  },
  "api/ECS.Systems.State.GameStateSystem.html": {
    "href": "api/ECS.Systems.State.GameStateSystem.html",
    "title": "Class GameStateSystem | Super Plant BroZ",
    "summary": "Class GameStateSystem Namespace ECS.Systems.State Assembly ECS.dll public class GameStateSystem : SystemBase, ISystem Inheritance object SystemBase GameStateSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameStateSystem(GameStateManager) public GameStateSystem(GameStateManager gameStateManager) Parameters gameStateManager GameStateManager Fields gameStateManager private readonly GameStateManager gameStateManager Field Value GameStateManager stateHandlers private readonly Dictionary<string, Action> stateHandlers Field Value Dictionary<string, Action> Properties Pausible public override bool Pausible { get; } Property Value bool Methods HandleActionEvent(IEvent) private void HandleActionEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.State.PlayerStateSystem.html": {
    "href": "api/ECS.Systems.State.PlayerStateSystem.html",
    "title": "Class PlayerStateSystem | Super Plant BroZ",
    "summary": "Class PlayerStateSystem Namespace ECS.Systems.State Assembly ECS.dll public class PlayerStateSystem : SystemBase, ISystem Inheritance object SystemBase PlayerStateSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields VELOCITY_THRESHOLD private const float VELOCITY_THRESHOLD = 100 Field Value float previousStates private Dictionary<Entity, PlayerState> previousStates Field Value Dictionary<Entity, PlayerState> Methods DetermineNextState(Entity) private PlayerState DetermineNextState(Entity entity) Parameters entity Entity Returns PlayerState HandleStateChangeRequest(IEvent) private void HandleStateChangeRequest(IEvent evt) Parameters evt IEvent HandleStateTimer(IEvent) private void HandleStateTimer(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World IsInPriorityState(PlayerState) private bool IsInPriorityState(PlayerState state) Parameters state PlayerState Returns bool SetState(Entity, PlayerState, bool) private void SetState(Entity entity, PlayerState newState, bool force) Parameters entity Entity newState PlayerState force bool ShouldOverrideState(PlayerState, PlayerState, bool) private bool ShouldOverrideState(PlayerState currentState, PlayerState newState, bool force) Parameters currentState PlayerState newState PlayerState force bool Returns bool Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.State.html": {
    "href": "api/ECS.Systems.State.html",
    "title": "Namespace ECS.Systems.State | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.State Classes GameStateSystem PlayerStateSystem"
  },
  "api/ECS.Systems.UI.DamageSystem.html": {
    "href": "api/ECS.Systems.UI.DamageSystem.html",
    "title": "Class DamageSystem | Super Plant BroZ",
    "summary": "Class DamageSystem Namespace ECS.Systems.UI Assembly ECS.dll public class DamageSystem : SystemBase, ISystem Inheritance object SystemBase DamageSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandlePercentChange(IEvent) private void HandlePercentChange(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.UIPositionSystem.html": {
    "href": "api/ECS.Systems.UI.UIPositionSystem.html",
    "title": "Class UIPositionSystem | Super Plant BroZ",
    "summary": "Class UIPositionSystem Namespace ECS.Systems.UI Assembly ECS.dll public class UIPositionSystem : SystemBase, ISystem Inheritance object SystemBase UIPositionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UIPositionSystem(GraphicsManager) public UIPositionSystem(GraphicsManager graphicsManager) Parameters graphicsManager GraphicsManager Fields graphics private readonly GraphicsManager graphics Field Value GraphicsManager Properties Pausible public override bool Pausible { get; } Property Value bool Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.UITextRenderSystem.html": {
    "href": "api/ECS.Systems.UI.UITextRenderSystem.html",
    "title": "Class UITextRenderSystem | Super Plant BroZ",
    "summary": "Class UITextRenderSystem Namespace ECS.Systems.UI Assembly ECS.dll public class UITextRenderSystem : SystemBase, ISystem Inheritance object SystemBase UITextRenderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UITextRenderSystem(GameAssets, GraphicsManager) public UITextRenderSystem(GameAssets assets, GraphicsManager graphicsManager) Parameters assets GameAssets graphicsManager GraphicsManager Fields assets private readonly GameAssets assets Field Value GameAssets graphics private readonly GraphicsManager graphics Field Value GraphicsManager spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch Properties Pausible public override bool Pausible { get; } Property Value bool Methods CenterText(SpriteFont, string, TextCenter) private static Vector2 CenterText(SpriteFont font, string text, TextCenter center) Parameters font SpriteFont text string center TextCenter Returns Vector2 Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.UIUpdateSystem.html": {
    "href": "api/ECS.Systems.UI.UIUpdateSystem.html",
    "title": "Class UIUpdateSystem | Super Plant BroZ",
    "summary": "Class UIUpdateSystem Namespace ECS.Systems.UI Assembly ECS.dll public class UIUpdateSystem : SystemBase, ISystem Inheritance object SystemBase UIUpdateSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UIUpdateSystem(GameStateManager) public UIUpdateSystem(GameStateManager gameStateManager) Parameters gameStateManager GameStateManager Fields buttonActions private readonly Dictionary<string, Action> buttonActions Field Value Dictionary<string, Action> gameStateManager private readonly GameStateManager gameStateManager Field Value GameStateManager keyActions private readonly Dictionary<string, Action<Entity>> keyActions Field Value Dictionary<string, Action<Entity>> Properties Pausible public override bool Pausible { get; } Property Value bool Methods DecrementMenu(Entity) private void DecrementMenu(Entity entity) Parameters entity Entity ExecuteMenuOption(Entity) private void ExecuteMenuOption(Entity entity) Parameters entity Entity HandleActionEvent(IEvent) private void HandleActionEvent(IEvent evt) Parameters evt IEvent IncrementMenu(Entity) private void IncrementMenu(Entity entity) Parameters entity Entity Initialize(World) public override void Initialize(World world) Parameters world World SetButtonActive(UIMenu, bool) private void SetButtonActive(UIMenu menu, bool active) Parameters menu UIMenu active bool Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.html": {
    "href": "api/ECS.Systems.UI.html",
    "title": "Namespace ECS.Systems.UI | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.UI Classes DamageSystem UIPositionSystem UITextRenderSystem UIUpdateSystem"
  },
  "api/ECS.Systems.Utilities.RandomSystem.html": {
    "href": "api/ECS.Systems.Utilities.RandomSystem.html",
    "title": "Class RandomSystem | Super Plant BroZ",
    "summary": "Class RandomSystem Namespace ECS.Systems.Utilities Assembly ECS.dll public class RandomSystem : SystemBase, ISystem Inheritance object SystemBase RandomSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Utilities.TimerSystem.html": {
    "href": "api/ECS.Systems.Utilities.TimerSystem.html",
    "title": "Class TimerSystem | Super Plant BroZ",
    "summary": "Class TimerSystem Namespace ECS.Systems.Utilities Assembly ECS.dll public class TimerSystem : SystemBase, ISystem Inheritance object SystemBase TimerSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdateTimers(Entity, ref Timers, float) private void UpdateTimers(Entity entity, ref Timers timersComponent, float deltaTime) Parameters entity Entity timersComponent Timers deltaTime float"
  },
  "api/ECS.Systems.Utilities.html": {
    "href": "api/ECS.Systems.Utilities.html",
    "title": "Namespace ECS.Systems.Utilities | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Utilities Classes RandomSystem TimerSystem"
  },
  "api/ECS.Systems.html": {
    "href": "api/ECS.Systems.html",
    "title": "Namespace ECS.Systems | Super Plant BroZ",
    "summary": "Namespace ECS.Systems Namespaces ECS.Systems.AI ECS.Systems.Animation ECS.Systems.Attacking ECS.Systems.Characters ECS.Systems.Collision ECS.Systems.Debug ECS.Systems.Hitbox ECS.Systems.Input ECS.Systems.Items ECS.Systems.Lives ECS.Systems.Objects ECS.Systems.Physics ECS.Systems.Player ECS.Systems.Projectile ECS.Systems.Spawning ECS.Systems.State ECS.Systems.UI ECS.Systems.Utilities"
  },
  "api/ECS.html": {
    "href": "api/ECS.html",
    "title": "Namespace ECS | Super Plant BroZ",
    "summary": "Namespace ECS Namespaces ECS.Components ECS.Core ECS.Events ECS.Resources ECS.Systems Classes Game1 Program"
  },
  "docs/CodeReviews/CodeQuality/AndyCodeQualityReview.html": {
    "href": "docs/CodeReviews/CodeQuality/AndyCodeQualityReview.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Andy Yu Date: February 12, 2025 Sprint: 2 Files reviewed: MoveSystem.cs, AttackSystem.cs, BlockSystem.cs, JumpSystem.cs Author of files: Katya Liber Code Smell Analysis 1. You Don't Need It Anymore All code written has a purpose, so they are always used 2. Large Method All methods are concise and focused 3. Large Class The system is concise and under 100 lines of code 4. Switch Statements No switch statements were used in the system 5. Data Clumps Data is well-organized No repeated groups of parameters 6. Same Name Different Meaning Variable names describe its purpose in the code and helps with understandability 7. While Not Done Loop No while loops were used, only conditionals that were descriptive 8. Too Many Parameters Methods did not have an overload of parameters Methods are a good length 9. Asymmetrical Code File is fairly symmetrical with the other files in the project 10. Comments as Smell There are a few comments, but there was no case of comments being used to explain complex code Comments used for readability Conclusion All of the files reviewed had no significant concerns regarding code smells. It followed good programming techniques. Each system is focused and has high cohesion. The code is concise and has no signs of repeatability. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Andy Yu Date: March 5, 2025 Sprint: 3 File(s) reviewed: SoundManager Author of file(s): Brendan Cabungcal Code Smell Analysis 1. You Don't Need It Anymore All code written has a purpose, so they are always used 2. Large Method All methods are concise and focused 3. Large Class The class is concise and under 100 lines of code 4. Switch Statements No switch statements were used in the system 5. Data Clumps Data is well-organized No repeated groups of parameters 6. Same Name Different Meaning Variable names describe its purpose in the code and helps with understandability 7. While Not Done Loop No while loops were used 8. Too Many Parameters Methods did not have an overload of parameters and they were good length or overly complicated 9. Asymmetrical Code File is fairly symmetrical with the other files in the project 10. Comments as Smell The file has no comments, but the code was readable, so they weren't needed Hypothetical Change Analysis Proposed Change: No change so far. Conclusion Everything looks good so far. Just needs more implementation. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrendanCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/BrendanCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brendan Cabungcal Date: February 14, 2025 Sprint: 2 File reviewed: AISystem.cs Author of file: Ely Maddox Code Smell Analysis 1. Code that never actually runs Makes the code longer and more complex than necessary Just delete the code and it will be easier to read 2. Comparing variables to null If not done carefully, it can lead to many issues, both syntactical and logical 3. Duplicate code Create a method Makes code longer than necessary 4. Methods too big We want simple, easy to read, code The method may be doing too much, extract another method from it Potentially, you could decompose conditionals 5. Strikingly similar subclasses Lots of duplicate code Could potentially move the common code into the parent class 6. Same name different meaning Overloaded vocabulary Leads to misinterpretation Reusing variable names is a sign that your function has run too long 7. Too many parameters Too complex Can be confusing especially if there are many parameters of the same type Could potentially have a mutable struct for some/all of the parameters 8. Variables with same name as type Make the name convey information about its contents Others reading your code will not know what the variable represents 9. Vague identifiers Method names too vague or ambiguous, therefore its funtion is not clear Could be a sign of a method having more than one function/responsibility 10. While not done loops Having the condition of the while just be a boolean variable set to false Shows the writer may not know the purpose of the loop or the exit condition Fixing this can make the code easier to read Conclusion The AISystem.cs file was written efficiently and it works great. No scent of anything fishy to me Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrianCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/BrianCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brian Miller Date: February 14, 2025 Sprint: 2 File reviewed: PlayerStateSystem.cs PlayerState.cs Author of file: Andy Yu Code Smell Analysis 1. Data Clumps Everything seems pretty well organized, there's no fields/etc that require each other often 2. Long Method Most methods are pretty short (under 10-15 lines) The Update method is 34 lines so it's a bit long, however most of the lines are essential pieces. If it get's too long, the setting state part could be extracted into it's own method after the component checks and whatnot are done. 3. Large Class The class is 98 lines so it's just under the 100-150 lines. 4. Duplicated Code Each method is unique and logic is not repeated anywhere 5. Shotgun Surgery The only place I could see having this issue is with the PlayerState Enum since adding a new state means updating this and then updating how the current state is determined. However preexisting state handling shouldn't be affected when new states are added and these two files should be the only ones changed so probably not an issue. 6. Lazy Class The nature of ECS means entities are somewhat \"lazy\", but everything else is good Control is handed off only where necessary 7. Speculative Generality There's room for adding new states but nothing here is preemptive in doing so Planned states are already in the PlayerState enum but those should be implimented soon so not an issue 8. Refused Bequest PlayerStateSystem.cs inherits the abstract class SystemBase. The only overriden method is Initialize which calls the SystemBase version first so no issues there 9. Cyclomatic Complexity Most of the code is good Update() reaches 5 indentation levels which could grow in complexity when more states are added 10. Comments (as \"deodorant\") Comments are in appropriate places Variable and method names are all appropriate Hypothetical Change Analysis Proposed Change: In future sprints, Update for PlayerStateSystem.cs will probably have to be split up to decrease length and complexity. Also implement more states The current implementation supports this well because: The logic in Update is straightforward States can easily be added to the PlayerState Enum Updating the player state in PlayerStateSystem won't impact other files or code Preexisting systems won't need to be modified to accommodate this Conclusion The Player State system has very good code with no notable code smells. The system should be extendable pretty easily without much impact on unrelated parts. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrianCodeQualitySprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/BrianCodeQualitySprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brian Miller Date: March 5, 2025 Sprint: 3 Files reviewed: CollisionDetectionSystem, CollisionResponseSystem Author of files: Cameron Tucker Code Smell Analysis 1. Data Clumps Pairs of entities are often used together but that's unavoidable with a collision system and these two files are the only place this occurs so not an issue 2. Long Method the HandleCollision method is almost 100 lines long the other methods are pretty succinct 3. Large Class the CollisionDetection class is 360 lines long but I don't think it would be worth splitting it into multiple classes 4. Duplicated Code some lines are repeated for two entities but it's not long enough to warrant change 5. Shotgun Surgery If anything needs changed with collision, these are the only two affected files so no issues here 6. Lazy Class nothing here 7. Speculative Generality the collision class has the option for expanding but isn't anticipating anything that for the future 8. Refused Bequest nothing here 9. Cyclomatic Complexity nothing here 10. Comments (as \"deodorant\") There's a lot of comments but not to cover up bad code Hypothetical Change Analysis Proposed Change: Split up the CollisionDetectionSystem The main reason for this is just that it's a pretty long class but it might not be worth the effort to do since it works well Conclusion Very good code. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/CameronCodeQualityReview.html": {
    "href": "docs/CodeReviews/CodeQuality/CameronCodeQualityReview.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Cameron Tucker Date: February 12, 2025 Sprint: 2 Files reviewed: ProjectileSystem.cs, ProjectileShootingSystem.cs, ProjectileSpawningSystem.cs, DespawnSystem.cs (Projectile systems) Author of files: Ely Maddox Code Smell Analysis 1. Duplicated Code Each system has unique implementation No repeated logic across files Component checks are necessarily similar but not duplicated logic 2. Large Method All methods are concise and focused 3. Large Class Each system is focused and minimal: ProjectileSystem handles lifetime ProjectileShootingSystem handles shooting flags ProjectileSpawningSystem handles creation DespawnSystem handles cleanup 4. Switch Statements Logic flows through direct checks No complex conditionals Clean if/continue pattern in checks 5. Data Clumps Data is well-organized No repeated groups of parameters Event data is cohesive 6. Feature Envy Systems operate in their own domain No unncessary access of other system's data 7. Shotgun Surgery Changes are localized to specific systems Adding new projectile types only affects spawning 8. Primitive Obsession Types are appropriate for their use Data structures are well-chosen No overuse of primitive types 9. Cyclomatic Complexity Logic flows are straightforward Checks are flat and clear No nested decision complexity 10. Divergent Change Systems have clear and single responsibilities Changes are contained within relevant systems Good separation of concerns Hypothetical Change Analysis Proposed Change: Add different types of projectiles with unique behaviors and effects The current implementation supports this well because: ProjectileSpawningSystem only cares about creation; new projectile types just need new components ProjectileSystem handles lifetime through timer events regardless of projectile type DespawnSystem will clean up any projectile type the same way No existing systems would need modification to support new behaviors Conclusion The projectile systems contain clean code with no significant code smells. The design allows for easy extension and modification, without needing to modify exisiting systems. Each system is focused and shows high cohesion with low coupling. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/CodeQualityTemplate.html": {
    "href": "docs/CodeReviews/CodeQuality/CodeQualityTemplate.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Your name Date: February PUTDAYHERE, 2025 Sprint: 2 File(s) reviewed: File or files reviewed (remove () if multiple or remove (s) if single from header) Author of file(s): Who are you reviewing (same as above remove () if multiple or remove (s) if single) Code Smell Analysis 1. Code Smell Write Stuff Here 2. Code Smell Write Stuff Here 3. Code Smell Write Stuff Here 4. Code Smell Write Stuff Here 5. Code Smell Write Stuff Here 6. Code Smell Write Stuff Here 7. Code Smell Write Stuff Here 8. Code Smell Write Stuff Here 9. Code Smell Write Stuff Here 10. Code Smell Write Stuff Here Hypothetical Change Analysis Proposed Change: Propose a hypothetical change/feature The current implementation supports this, or doesnt support this and why (Pros & Cons): Reason 1 Reason 2 Reason 3 Conclusion Put your conclusion here. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/ElyCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/ElyCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Ely Maddox Date: February 13, 2025 Sprint: 2 File reviewed: CollisionDetectionSystem.cs Author of file: Cameron Tucker Code Smell Analysis 1. Long Methods Some methods are a bit long, but nothing excessive. Mostly because of the large amount of math needed to be done here. 2. Long Classes Verging on being too long, but everything done in CollisionDetection is related to collision detection. The math could possibly be pulled out into a CollisionUtilities class? 3. Long Parameter List Nothing to see here. 4. Shotgun Surgery Nothing to see here. 5. Data Clumps Nothing to see here. 6. Switch Case -When deciding what shape we should do collision for, it seems a bit switch casey. This will really be an issue when we go to add more shapes, but it's small enough for now. 7. Comments Nothing to see here. All comments only help understanding. 8. Feature Envy Nothing to see here. 9. Lazy Class Nothing to see here. 10. Duplicated Code Same comments as the 'switch' case. Hypothetical Change Analysis Proposed Change: Propose a hypothetical change/feature Back to the 'switch' case, there are n^2 types of combinations. This will scale not great once more shapes get added. Reason 1 Reason 2 Reason 3 Conclusion Everything here is very good for the first draft of collision. I't may not scale super super well, but it works well. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/KatyaCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/KatyaCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Katya Liber Date: 2/12/2025 Sprint: Sprint 2 File(s) reviewed: GravitySystem Author of file(s): Peter Eberhard Code Smell Analysis Duplicated Code Long Method Large Class Long Parameter List Shotgun Surgery Switch Statements Lazy Class Message Chains Comments Primitve Obsession Conclusion Techincally there is duplicated code within the systems in general, not just this one. However, there is not really a way around a loop going through all entities in each system, unless we want to change our entire structure to have a single system that loops through the entities instead of repeating the same loop in each system, but that seems unecessary. Other than that, after going through all of my code smells, GravitySystem does not seem to exhibit any other issues. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/KatyaCodeQuality2.html": {
    "href": "docs/CodeReviews/CodeQuality/KatyaCodeQuality2.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Katya Liber Date: March 6, 2025 Sprint: 3 File(s) reviewed: RawInputSystem Author of file(s): Peter Eberhard Code Smell Analysis 1. Duplicated Code Just the getrightjoystick direction and get left joystick direction have some duplicated code, not sure if you can just combine that into one. 2. Long Method Handle triggers is longer than 25 lines but that might just be the way it needs to be. 3. Large Class Same thing as long method but once again, that may just be the way it needs to be. 4. Long Parameter List Looks good! 5. Shotgun Surgery None 6. Switch Statements The get right/left directions have a lot of ifs and elses, maybe that could be made into a dictionary but you already have a lot of dictionaries. That probably just overcomplicates it. 7. Lazy Class Absolutely not. 8. Message Chains None 9. Comments None 10. Primitve Obsession None Hypothetical Change Analysis Proposed Change: Propose a hypothetical change/feature Also working with a switch controller. The groundwork for using other controllers is there, but some of the specifics of how to do so may need to change. Conclusion It looks good. I could never do it. You can try to implement some of those suggestions, but not if it overcomplicates things. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/PeterCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/PeterCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Peter Eberhard Date: 2/13/2025 Sprint: Sprint 2 File(s) reviewed: AISystem Author of file(s): Ely Maddox Code Smell Analysis Duplicated Code Very little, ECS by nature has some, but this code has the bare minimum. Long parameter lists Longest Parameter list is 2, very clear for this one. Cyclomatic Complexity All logic is very simple and readable, completely clear of this one. Empty Catch Statements No catch statements to be empty. Switch Statements No switch statements here. Data Clumps By nature of an ECS we use the components togethers, but I think this is a feature and not a bug in this case, as coupling is still quite low. Primitive Obsession Possibly should make actions their own entity or class rather than a string, but this code matches the current convention so nothing wrong here. Shotgun Surgery Very low coupling here, seems good in this regard. Long methods All methods are very short and readable. Innapropirate Intimacy We know very little about other classes in this file. Conclusion After going through all my code smells, the only possible change here would be to change how actions are handled away from strings. However, that is more a group effort than a problem with this particular code. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/PeterCodeReviewSprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/PeterCodeReviewSprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Peter Eberhard Date: March 5 2025 Sprint: 3 File(s) reviewed: PlayerDespawnSystem Author of file(s): Andy Yu Code Smell Analysis 1. Long Methods Extreamly short methods, very concice. No problems here 2. Long Class Simmilar to above, does exactly what its meant to and nothing more. 3. Shotgun Surgery We have one magic number, but its centralised and its slated to be fixed 4. Data Clumps No problems here, window size is correctly one variable and isnt split into 2 or 4 5. Duplicated Code None found 6. Comments as Deoderant This class features no comments. However, it is quite readable and concise. Hypothetical Change Analysis Proposed Change: I proposed a change to the class, removing colision and just using an offset from screen size Andy managed to update the class before I even could finish writing this review, so the class can clearly support this. Conclusion Overall this is a short and sweet class that does exactly what its meant to, with no extra weight. Previous Page"
  },
  "docs/CodeReviews/ElyCodeQualitySprint3.html": {
    "href": "docs/CodeReviews/ElyCodeQualitySprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Ely Maddox Date: March 5, 2025 Sprint: 3 Files reviewed: LevelLoader.cs, LevelSwitchSystem.cs, LevelLoaderSystem.cs Author of files: Katya Liber Code Smell Analysis 1. Shotgun Surgery -Not much detected, only thing is the magic strings with the names of levels, and the strings with different entity types. These should probably be moved into JSON to be a data issue. 2. Long Classes None Detected 3. Long Parameter List The MakeEntity delegate takes in lots of parameters. Still stays under 6, but it's edging on too many. 4. Long Methods Nothing is too long. 5. Comments as Deodorant None Detected, not many comments needed in the first place. 6. Lazy Class None Detected 7. Duplicated Code There might be a bit in level loader, but the different types of entities that need to be made kind of need to have neccessitates this 8. Switch Case None Detected 9. Data Clumps None Detected 10. Feature Envy None Detected Hypothetical Change Analysis Proposed Change: Load in lots of levels The current implementation supports this, as it loads in lists of entities from JSON. There would need to be changes with the magic strings, so this should likely be moved to data. Conclusion Everything looked good! The main concern are the magic strings littered around the code, but these are present everywhere in the codebase at the moment, so it is not only an issue with these files. Previous Page"
  },
  "docs/CodeReviews/README.html": {
    "href": "docs/CodeReviews/README.html",
    "title": "Code Reviews | Super Plant BroZ",
    "summary": "Code Reviews Code quality and readability reviews organized by team member. Sprint 2 Code Quality Cameron - Review of projectile systems Katya - Review of gravity system Andy - Review of move system Brian - Review of player state system Ely - Review of collision detection system Peter - Review of AI system Brendan - Review of AI system Readability Cameron - Review of projectile systems Katya - Review of player state system Andy - Review of move system Brian - Review of UI render system Ely - Review of item switch system Peter - Review of render system Brendan - Review of AI system Additional Notes Brian's Contribution: While we're reviewing everyone else's code in these sections, please note that Brian was fully dedicated to working on our sprites during this sprint (which we absolutely loved). His contributions in this area were crucial, even though there isn't a corresponding code review. Brendan's Submission: Brendan's code wasn't ready until after almost all of the reviews were completed, as he was experiencing issues with Dotnet on a Mac. Previous Page"
  },
  "docs/CodeReviews/Readability/AndyReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/AndyReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Andy Yu Date: February 12, 2025 Sprint: 2 Files reviewed: MoveSystem.cs, AttackSystem.cs, BlockSystem.cs, JumpSystem.cs Author of files: Katya Liber Time spent: 10 minutes Readability Comments Positive Aspects Consistent naming conventions across all systems Clear component checks using HasComponents Methods concise and straightforward Areas for Improvement No improvements to readability are necessary. Everything was readable and understandable. Previous Page"
  },
  "docs/CodeReviews/Readability/AndyReadabilitySprint3.html": {
    "href": "docs/CodeReviews/Readability/AndyReadabilitySprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Andy Yu Date: March 5, 2025 Sprint: 3 Files reviewed: SoundManager Author of files: Brendan Cabungcal Time spent: 10 minutes Readability Comments Positive Aspects Methods were concise and straightforward Variable names described their purpose and weren't ambiguous Areas for Improvement No improvements to readability are necessary. Everything was readable and understandable. Previous Page"
  },
  "docs/CodeReviews/Readability/BrendanReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/BrendanReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brendan Cabungcal Date: February 14, 2025 Sprint: 2 File reviewed: AISystem.cs Author of file: Ely Maddox Time spent: 10 minutes Readability Comments Positive Aspects Very well spaced and organized, easy on the eyes Variables are well named, it is clear what they are Some quick and helpful comments to follow along Areas for Improvement Nothing comes to mind, looks great, keep it up! Previous Page"
  },
  "docs/CodeReviews/Readability/BrianReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/BrianReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brian Miller Date: February 14, 2025 Sprint: 2 File reviewed: UIRenderSystem.cs Author of file: Peter Eberhard Time spent: 10 minutes Readability Comments Positive Aspects The file is very succinct Only one comment but everything is self explanatory whitespace separates logic well variable names make sense Areas for Improvement Nothing from what I can tell Previous Page"
  },
  "docs/CodeReviews/Readability/BrianReadabilitySprint3.html": {
    "href": "docs/CodeReviews/Readability/BrianReadabilitySprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brian Miller Date: March 6, 2025 Sprint: 3 Files reviewed: CollisionDetectionSystem, CollisionResponseSystem Author of files: Cameron Tucker Time spent: 10 minutes Readability Comments Positive Aspects Good use of comments to explain the general processes Descriptive Variable names Good use of spacing to separate logic Logic is simple and separated into necessary components Areas for Improvement Nothing I can think of Previous Page"
  },
  "docs/CodeReviews/Readability/CameronReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/CameronReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Cameron Tucker Date: February 12, 2025 Sprint: 2 Files reviewed: ProjectileSystem.cs, ProjectileShootingSystem.cs, ProjectileSpawningSystem.cs, DespawnSystem.cs (Projectile systems) Author of files: Ely Maddox Time spent: 10 minutes Readability Comments Positive Aspects Consistent naming conventions across all systems Clear and logical component checks using HasComponents Clean event handling implementation with descriptive event names Good use of whitespace/indentation Clear stack usage for managing entities in DespawnSystem and ProjectileSpawningSystem Areas for Improvement The code is self-documenting and clear in its intent. No improvements to readability are necessary. Previous Page"
  },
  "docs/CodeReviews/Readability/ElyReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/ElyReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Ely Maddox Date: February 13, 2025 Sprint: 2 File reviewed: ItemSwitchSystem.cs Author of file: Cameron Tucker Time spent: 15 Readability Comments Positive Aspects Consistent naming conventions that match the rest of the codebase. Whitespace is utilized to separate code into blocks that relate within themselves. Everything is well commented if any extra context is needed. Areas for Improvement Not much to see here. Previous Page"
  },
  "docs/CodeReviews/Readability/ElyReadabilitySprint3.html": {
    "href": "docs/CodeReviews/Readability/ElyReadabilitySprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Ely Maddox Date: March 5, 2025 Sprint: 3 Files reviewed: LevelLoader.cs, LevelSwitchSystem.cs, LevelLoaderSystem.cs Author of files: Katya Liber Time spent: 10 min Readability Comments Positive Aspects Most variables are appropriately named Whitespace is used appropriately All indentations are there Areas for Improvement Some of the naming conventions in LevelLoader for the methods can get a bit confusing (MakeEntity vs makeEntity) A couple comments may be a bit redundant, but they don't intrude or distract from the code Previous Page"
  },
  "docs/CodeReviews/Readability/KatyaReadability2.html": {
    "href": "docs/CodeReviews/Readability/KatyaReadability2.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Katya Liber Date: March 6, 2025 Sprint: 3 Files reviewed: RawInputSystem Author of files: Peter Eberhard Time spent: 10 Readability Comments Positive Aspects Clear variable and method names Lots of helpful comments Areas for Improvement None. Previous Page"
  },
  "docs/CodeReviews/Readability/KatyaReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/KatyaReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Katya Liber Date: 2/11/2025 Sprint: 2 Files reviewed: PlayerStateSystem Author of files: Andy Yu Time spent: 10 minutes Readability Comments Positive Aspects The file is very readable due to extensive refactoring. Comments are provided above all sections of the code that require a description. Methods are all under 25 lines of code, and the entire system is under 100 lines. Areas for Improvement No significant areas for improvement. Previous Page"
  },
  "docs/CodeReviews/Readability/PeterReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/PeterReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Peter Eberhard Date: 2/13/2025 Sprint: 2 Files reviewed: RenderSystem Author of files: Cameron Tucker Time spent: 10 minutes Readability Comments Positive Aspects The code is largely very readable, particularly the second half. Areas for Improvement The update loop took a moment to understand and required reading another file; a brief comment explaining its purpose would be helpful. Although the use of the bool Pausible is somewhat intuitive, a short comment explaining its purpose would assist in future maintenance. Previous Page"
  },
  "docs/CodeReviews/Readability/ReadabilityTemplate.html": {
    "href": "docs/CodeReviews/Readability/ReadabilityTemplate.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Your name Date: February PUTDAYHERE, 2025 Sprint: 2 Files reviewed: File or files reviewed (remove () if multiple files, or remove (s) if single file from header) Author of files: Who are you reviewing (same as above remove () if multiple or remove (s) if single) Time spent: Put the time spent Readability Comments Positive Aspects Put Stuff Here Areas for Improvement Write what to improve here. Previous Page"
  },
  "docs/Controls.html": {
    "href": "docs/Controls.html",
    "title": "Controls | Super Plant BroZ",
    "summary": "Controls Player 1 Controls Walk Left: Left Arrow Walk Right: Right Arrow Jump: Up Arrow Run: Right Shift (No animation yet) Attack: E Block: R Take Damage: T Player 2 Controls Walk Left: A Walk Right: D Jump: Space, C Run: Left Shift (No animation yet) Shoot: F Attack: ? Block: , (No animation yet) Game State Pause: P Reset: L Exit: Escape Switching Switch Item Forward: M Switch Item Backward: N Switch Character Forward: K Switch Character Backward: J Switch Object Forward: B Switch Object Backward: V Previous Page"
  },
  "docs/ECSBestPractices.html": {
    "href": "docs/ECSBestPractices.html",
    "title": "ECS Best Practices | Super Plant BroZ",
    "summary": "ECS Best Practices Components Keep them small and data-only Always use structs, never classes Name them clearly (Position, Health, etc.) Initialize all fields Systems One system = one job Always check if components exist before using them Handle related events in Initialize() Use appropriate execution phases (Input, Update, Render) Events Keep them small Always include Entity field Only use for discrete changes, not continuous state Unsubscribe when done Entity Creation Use EntityFactory Set good defaults Initialize all required components Don't create entities in systems Performance Use 'ref' when getting components Don't get components repeatedly in loops Tips Load resources at startup Handle errors Keep systems simple Test edge cases Common Mistakes Assuming components exist Forgetting to remove components Mixing logic and data Doing heavy work every frame Previous Page"
  },
  "docs/FinalDocumentation.html": {
    "href": "docs/FinalDocumentation.html",
    "title": "Final Documentaion (What We Planned to Do and Did it Happen) | Super Plant BroZ",
    "summary": "Final Documentaion (What We Planned to Do and Did it Happen) Meetings Plan Scrums: Plan: Virtual a few times a week (Happened, Met over Discord for Scrums: Thursday, Sunday) Main meeting: Plan: In person, likely on the weekend (Happened, Had one main meeting on Tuesdays) Task Management Plan: Jira for task assignement and timeline (Happened) Discord for communication (Happened) Sprint 2 Features Plan: Character Movement Funtionality (running, walking, jumping) Player State Changes(running, walking, jumping, attacking, blocking, idle) Projectiles (peashooter shooting peas) AI Enemies Player Controls Timer Map Objects (platforms, items) Health Sprites (Peashooter, Bonk choy, items, and platforms) Everything we had planned above got done. We also added on basic collision to test the movement and physics systems, as we need something to jump off of. Previous Page"
  },
  "docs/FrameworkOverview.html": {
    "href": "docs/FrameworkOverview.html",
    "title": "ECS Framework Overview | Super Plant BroZ",
    "summary": "ECS Framework Overview Architecture Overview Core Concepts Entities: Simple ID containers that serve as unique identifiers for game objects Components: Pure data structures that define entity properties (e.g., Position, Velocity) Systems: Logic processors that operate on entities with specific component combinations World: The main container that manages entities, components, and systems Event Bus: Handles communication between systems using events System Execution Phases Systems are executed in a specific order based on phases with a priority field as a secondary sort: Input: Handle raw input and generate events PreUpdate: Pre-processing before main update Update: Main game logic PostUpdate: Post-processing after main update Render: Handle all rendering operations Component System Creating Components Components are simple data structures. Create new components as structs in the ECS.Components namespace: namespace ECS.Components; public struct MyNewComponent { public float Value; public Vector2 Direction; } Working with Components // Add component to entity world.GetPool<MyNewComponent>().Set(entity, new MyNewComponent { Value = 1.0f, Direction = Vector2.One }); // Check if entity has component if (HasComponents<MyNewComponent>(entity)) { // Get component reference ref var component = ref GetComponent<MyNewComponent>(entity); component.Value = 2.0f; } Event System Event Types Events are structs that implement IEvent. Each event should include the Entity that triggered it: public struct MyNewEvent : IEvent { public Entity Entity; public float Value; } Using Events // Subscribe to events World.EventBus.Subscribe<MyNewEvent>(HandleMyNewEvent); // Publish events World.EventBus.Publish(new MyNewEvent { Entity = entity, Value = 1.0f }); // Handle events private void HandleMyNewEvent(IEvent evt) { var myEvent = (MyNewEvent)evt; // Handle the event } Creating New Systems Create a new class in the ECS.Systems namespace Inherit from SystemBase Implement required methods: namespace ECS.Systems; public class MyNewSystem : SystemBase { public override void Initialize(World world) { base.Initialize(world); // Subscribe to events if needed World.EventBus.Subscribe<MyNewEvent>(HandleMyNewEvent); } public override void Update(World world, GameTime gameTime) { foreach (var entity in World.GetEntities()) { if (!HasComponents<RequiredComponent1>(entity) || !HasComponents<RequiredComponent2>(entity)) continue; ref var comp1 = ref GetComponent<RequiredComponent1>(entity); ref var comp2 = ref GetComponent<RequiredComponent2>(entity); // Process components } } private void HandleMyNewEvent(IEvent evt) { var myEvent = (MyNewEvent)evt; // Handle event } } Register the system in Game1.Initialize(): world.AddSystem(new MyNewSystem(), SystemExecutionPhase.Update, priority); Entity Factory The EntityFactory class provides a centralized place to create complex entities. Add new entity creation methods here: public Entity CreateMyNewEntity(params...) { var entity = world.CreateEntity(); // Add required components world.GetPool<Component1>().Set(entity, new Component1()); world.GetPool<Component2>().Set(entity, new Component2()); return entity; } Resource Loading Use the provided loaders for JSON configuration: JsonLoader: Generic JSON loading InputConfigLoader: Input configuration SpriteSheetLoader: Sprite sheet and animation data Example: var config = InputConfigLoader.LoadInputConfig(File.ReadAllText(\"Config/input.json\")); Previous Page"
  },
  "docs/Meetings/Meeting1.html": {
    "href": "docs/Meetings/Meeting1.html",
    "title": "TEAM NAME (TBD) | Super Plant BroZ",
    "summary": "TEAM NAME (TBD) Team Structure 2 PMs? Cameron (Technical?) Katya (Organization/Coordinator/Logistics?) Conflict Resolution Personal Conflicts Try to resolve between individuals first Then escalate to PMs Idea Disagreement Vote Meetings Scrums: Over Zoom a few times a week Main meeting: In person, likely on the weekend (depends on schedules) Collaboration GitHub, pull requests for code. Review code changes during long-form meeting. Jira for task assignement and timeline Discord for communication Game Idea Smash with PVZ theme Smash Content Characters Peashooter Zombies Character qualities Abilities Weight Health Power Items Powerups Plant Food Increase constants/variables Maps PVZ Roof Inputs Keyboard/Mouse Controller (probably main input device) Multiplayer Splitscreen Networking? Things To Do Character Movement Attacks directional Special move Jump Shield Grab (maybe) Character Status Health Theme PVZ Vibe/Music/Art PVZ vibe Custom soundtrack Prob custom pixel art Coding Standards CamelCase / C# standard Previous Page"
  },
  "docs/Meetings/Meeting3.html": {
    "href": "docs/Meetings/Meeting3.html",
    "title": "Meeting 3 Notes | Super Plant BroZ",
    "summary": "Meeting 3 Notes TODO Code Reviews Block Switching System / Sprites Implement remaining player/item sprites Damage system / UI % Code metrics Remaining documentation Mention Pruning Feature Branches Bugs Controls Sprint Reflection Peer Reviews (Due monday) Mention merges were reviewed in person (Hence no PR) Sprint 3 Planning Gamepad integration Different maps Item functionality Map switching UI Collision System v2 Ledge grabbing Attacking Utilize pull requests more Code reviews Jira shenanigans More character functionality Parry system ART UI Elements More map stuff More character state sprites More items Rake or Shovel Walnut Shield Sheild door Previous Page"
  },
  "docs/Meetings/MeetingSchedule.html": {
    "href": "docs/Meetings/MeetingSchedule.html",
    "title": "Weekly Meetings Schedule | Super Plant BroZ",
    "summary": "Weekly Meetings Schedule Big Meeting (In-Person or Hybrid if needed) Tuesday 4:15-5:15 (We can go over if needed) Scrums (Discord) Thursday 3:15-3:30 Sunday 4:00-4:15 Previous Page"
  },
  "docs/Meetings/README.html": {
    "href": "docs/Meetings/README.html",
    "title": "Meeting Notes | Super Plant BroZ",
    "summary": "Meeting Notes Schedule Weekly Meetings Schedule Team Meetings Meeting 1 - Initial game planning and team organization Meeting 2 - Notes were taken but lost to the aether Meeting 3 - Sprint 2 wrap-up and Sprint 3 planning Previous Page"
  },
  "docs/Meetings/Scrum-2-9-25.html": {
    "href": "docs/Meetings/Scrum-2-9-25.html",
    "title": "SCRUM 2/9/25 | Super Plant BroZ",
    "summary": "SCRUM 2/9/25 Ely Changed how projectiles work Issue with attaching projectile sprites Katya Not much Need something to work on Peter Split off render system Andy Working on player state Cameron Added cache for component build from config Added registry to store entity config/sprite config/spritesheet assets with a key Switching for items/characters supported Shaders are a PAIN on mac lol Previous Page"
  },
  "docs/README.html": {
    "href": "docs/README.html",
    "title": "Documentation | Super Plant BroZ",
    "summary": "Documentation Sprint 2 Code Reviews - Code Quality and Readability Reviews Controls - Guide of keybinds for Sprint 2 Team Roles - Initial assigned roles for Sprint 2 Final Documentation - Sprint outcomes and planned vs completed features General Notes & Information Team Meetings - Meeting notes and schedule Pitch - Game pitch presentation slides Development Documentation Framework Overview - ECS architecture and implementation guide ECS Best Practices - Development guidelines and patterns Syntax Cheat Sheet - C# syntax examples from codebase TODO List - Future features and improvements"
  },
  "docs/Roles.html": {
    "href": "docs/Roles.html",
    "title": "Roles | Super Plant BroZ",
    "summary": "Roles Tasks Easy collision, just on the floor Physics? For gravity and such Movement system needs split up Proposed: GravityForceSystem FrictionForceSystem InputForceSystem ForceAggregatorSystem (combines all forces) VelocitySystem PositionSystem (maybe split) PhysicsPositionSystem (updates pos based on velocity) KinematicPositionSystem (static objects/direct position changes like moving platforms/teleporting entites) States for different movements? Need to be able to shoot out pea Items We need health Cameron Collision GitHub management ECS Support Code Review Brendan Map w/o collisions Peter Movement Jumping, walking Brian SPRITES Peashooter Bonk Choy All need attacking, idle, walking, jumping. Block, run, slide come later. TERRAIN Blocks Platforms Background? PROJECTILES Pea shockwave? ITEMS Sun Fertilizer Shovel? maybe not rn. Katya Jira/Planning Movement Ely AI Projectiles Andy PlayerStateSystems Previous Page"
  },
  "docs/SyntaxCheatSheet.html": {
    "href": "docs/SyntaxCheatSheet.html",
    "title": "C# Syntax Cheat Sheet | Super Plant BroZ",
    "summary": "C# Syntax Cheat Sheet Generic Constraints where T : struct Restricts generic type to value types public class ComponentPool<T> where T : struct public static T ParseJson<T>(string jsonContent) where T : struct Null Operators ??= (Null-coalescing Assignment Operator) Assigns right-hand value only if left-hand is null ?. (Null-conditional Operator) Safely accesses members, returns null if object is null options ??= DefaultOptions; removeMethod?.Invoke(pool, new object[] { entity }); Pattern Matching is Type checking and casting in one operation ref Creates reference to value type if (evt is GameExitEvent gameExitEvent) ref var state = ref GetComponent<AnimationState>(entity); Lambda Expressions => Creates anonymous functions with different parameter patterns: systems.Sort((a, b) => b.Priority.CompareTo(a.Priority)); Dictionary Operations TryGetValue Safe dictionary access returning success status if (!componentPools.TryGetValue(type, out var pool)) { pool = new ComponentPool<T>(); componentPools[type] = pool; } Collection Operations (x, y) Tuple destructuring in foreach out Returns additional value through parameter foreach (var (actionName, action) in config.Actions) entityToIndex.Remove(entity.Id, out int index) Delegates and Events Delegates are type-safe function pointers that can reference methods with a specific signature. Good for event driven systems. Action<T> Delegate type for methods taking parameters with no return private Dictionary<Type, List<Action<IEvent>>> subscribers; public void Subscribe<T>(Action<IEvent> handler) where T : IEvent; Global Using Directives global using Project-wide namespace import global using Microsoft.Xna.Framework; global using Microsoft.Xna.Framework.Graphics; Method Expression Bodies => Shorthand for single-expression methods/properties public Entity(int id) => Id = id; public override int GetHashCode() => Id; public override bool Equals(object obj) => obj is Entity other && other.Id == Id; Object Initialization new() Infers type from context private readonly Dictionary<Type, object> componentPools = new(); private readonly HashSet<Entity> entities = new(); private Stack<int> freeIndices = new(); Method Access GetType() Gets type information GetMethod() Gets method info by name var removeMethod = pool.GetType().GetMethod(\"Remove\"); removeMethod?.Invoke(pool, new object[] { entity }); Previous Page"
  },
  "docs/TodoList.html": {
    "href": "docs/TodoList.html",
    "title": "TODO List (More like wishlist lol) | Super Plant BroZ",
    "summary": "TODO List (More like wishlist lol) Basic Movement Double jump Air control/drift (Should be straightforward with force component) Fast fall (Pushing down to fall faster) Dash/run Wall jump Edge grab Dodge Combat Light attacks Strong attacks Special moves Air attacks Grabs/throws (maybe) Blocking/shield Parry (maybe) Core Systems Gravity Basic Collision Damage percentage Knockback scaling Death zones/blast lines Stock/life system Match timer Hit detection Stun system DI (Directional Influence) Characters Multiple character support Different weights/speeds Unique special moves Animations Taunts Stages Multiple platforms Fall-through platforms Stage hazards Blast zones Moving platforms Background elements Items Powerups Debuffs Effects & Polish (Wishlist realistically) Hit sparks Smoke trails Screen shake Hit freeze KO explosions Star KO Screen flashes Launch lines Audio Hit sounds Character voices Background music Menu sounds Announcer Impact effects Crowd cheering Game Modes Stock battle Time battle AI Scalable difficulty Reinforcement learning would be awesome (More like final coding boss here...) UI Elements Damage display Stock icons Timer Player indicators Winner screen CSS (Character Select Screen) Menu system Stage select Technical Needs GameState system (Exit, Pause/Resume) (Needs decoupled from InputEventSystem ASAP) Controller support Hitbox system Debug mode Previous Page"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome | Super Plant BroZ",
    "summary": "Welcome"
  }
}