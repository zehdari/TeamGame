{
  "api/ECS.Components.AI.AssociatedHitbox.html": {
    "href": "api/ECS.Components.AI.AssociatedHitbox.html",
    "title": "Struct AssociatedHitbox | Super Plant BroZ",
    "summary": "Struct AssociatedHitbox Namespace ECS.Components.AI Assembly ECS.dll public struct AssociatedHitbox Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields box public Polygon box Field Value Polygon type public AttackType type Field Value AttackType"
  },
  "api/ECS.Components.AI.AttackCounts.html": {
    "href": "api/ECS.Components.AI.AttackCounts.html",
    "title": "Struct AttackCounts | Super Plant BroZ",
    "summary": "Struct AttackCounts Namespace ECS.Components.AI Assembly ECS.dll public struct AttackCounts Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields TimesUsed public Dictionary<string, int> TimesUsed Field Value Dictionary<string, int>"
  },
  "api/ECS.Components.AI.AttackDirection.html": {
    "href": "api/ECS.Components.AI.AttackDirection.html",
    "title": "Enum AttackDirection | Super Plant BroZ",
    "summary": "Enum AttackDirection Namespace ECS.Components.AI Assembly ECS.dll public enum AttackDirection Fields Down = 1 Left = 2 Right = 3 Up = 0"
  },
  "api/ECS.Components.AI.AttackHandler.html": {
    "href": "api/ECS.Components.AI.AttackHandler.html",
    "title": "Delegate AttackHandler | Super Plant BroZ",
    "summary": "Delegate AttackHandler Namespace ECS.Components.AI Assembly ECS.dll public delegate void AttackHandler(Entity attacker) Parameters attacker Entity"
  },
  "api/ECS.Components.AI.AttackInfo.html": {
    "href": "api/ECS.Components.AI.AttackInfo.html",
    "title": "Struct AttackInfo | Super Plant BroZ",
    "summary": "Struct AttackInfo Namespace ECS.Components.AI Assembly ECS.dll public struct AttackInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AttackHandlerEnum public AttackHandlerEnum AttackHandlerEnum Field Value AttackHandlerEnum AttackStats public AttackStats AttackStats Field Value AttackStats"
  },
  "api/ECS.Components.AI.AttackStats.html": {
    "href": "api/ECS.Components.AI.AttackStats.html",
    "title": "Struct AttackStats | Super Plant BroZ",
    "summary": "Struct AttackStats Namespace ECS.Components.AI Assembly ECS.dll public struct AttackStats Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Damage public int Damage Field Value int Hitbox public Polygon? Hitbox Field Value Polygon? Knockback public float Knockback Field Value float StunDuration public float StunDuration Field Value float"
  },
  "api/ECS.Components.AI.AttackType.html": {
    "href": "api/ECS.Components.AI.AttackType.html",
    "title": "Enum AttackType | Super Plant BroZ",
    "summary": "Enum AttackType Namespace ECS.Components.AI Assembly ECS.dll public enum AttackType Fields Jab = 1 Special = 0"
  },
  "api/ECS.Components.AI.Attacks.html": {
    "href": "api/ECS.Components.AI.Attacks.html",
    "title": "Struct Attacks | Super Plant BroZ",
    "summary": "Struct Attacks Namespace ECS.Components.AI Assembly ECS.dll public struct Attacks Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AvailableAttacks public Dictionary<AttackType, Dictionary<AttackDirection, AttackInfo>> AvailableAttacks Field Value Dictionary<AttackType, Dictionary<AttackDirection, AttackInfo>> LastDirection public AttackDirection LastDirection Field Value AttackDirection LastType public AttackType LastType Field Value AttackType"
  },
  "api/ECS.Components.AI.BlockInfo.html": {
    "href": "api/ECS.Components.AI.BlockInfo.html",
    "title": "Struct BlockInfo | Super Plant BroZ",
    "summary": "Struct BlockInfo Namespace ECS.Components.AI Assembly ECS.dll public struct BlockInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentHealth public float CurrentHealth Field Value float MaxHealth public float MaxHealth Field Value float"
  },
  "api/ECS.Components.AI.CurrentAction.html": {
    "href": "api/ECS.Components.AI.CurrentAction.html",
    "title": "Struct CurrentAction | Super Plant BroZ",
    "summary": "Struct CurrentAction Namespace ECS.Components.AI Assembly ECS.dll public struct CurrentAction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.AI.ExistedTooLong.html": {
    "href": "api/ECS.Components.AI.ExistedTooLong.html",
    "title": "Struct ExistedTooLong | Super Plant BroZ",
    "summary": "Struct ExistedTooLong Namespace ECS.Components.AI Assembly ECS.dll public struct ExistedTooLong Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.AI.Hitboxes.html": {
    "href": "api/ECS.Components.AI.Hitboxes.html",
    "title": "Struct Hitboxes | Super Plant BroZ",
    "summary": "Struct Hitboxes Namespace ECS.Components.AI Assembly ECS.dll public struct Hitboxes Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields availableHitboxes public List<AssociatedHitbox> availableHitboxes Field Value List<AssociatedHitbox>"
  },
  "api/ECS.Components.AI.ShotProjectile.html": {
    "href": "api/ECS.Components.AI.ShotProjectile.html",
    "title": "Struct ShotProjectile | Super Plant BroZ",
    "summary": "Struct ShotProjectile Namespace ECS.Components.AI Assembly ECS.dll public struct ShotProjectile Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.AI.html": {
    "href": "api/ECS.Components.AI.html",
    "title": "Namespace ECS.Components.AI | Super Plant BroZ",
    "summary": "Namespace ECS.Components.AI Structs AssociatedHitbox AttackCounts AttackInfo AttackStats Attacks BlockInfo CurrentAction ExistedTooLong Hitboxes ShotProjectile Enums AttackDirection AttackType Delegates AttackHandler"
  },
  "api/ECS.Components.Animation.AnimationConfig.html": {
    "href": "api/ECS.Components.Animation.AnimationConfig.html",
    "title": "Struct AnimationConfig | Super Plant BroZ",
    "summary": "Struct AnimationConfig Namespace ECS.Components.Animation Assembly ECS.dll public struct AnimationConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields States public Dictionary<string, AnimationFrameConfig[]> States Field Value Dictionary<string, AnimationFrameConfig[]>"
  },
  "api/ECS.Components.Animation.AnimationFrameConfig.html": {
    "href": "api/ECS.Components.Animation.AnimationFrameConfig.html",
    "title": "Struct AnimationFrameConfig | Super Plant BroZ",
    "summary": "Struct AnimationFrameConfig Namespace ECS.Components.Animation Assembly ECS.dll public struct AnimationFrameConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Duration public float Duration Field Value float HoldLastFrame public bool HoldLastFrame Field Value bool Loop public bool Loop Field Value bool SourceRect public Rectangle SourceRect Field Value Rectangle"
  },
  "api/ECS.Components.Animation.AnimationState.html": {
    "href": "api/ECS.Components.Animation.AnimationState.html",
    "title": "Struct AnimationState | Super Plant BroZ",
    "summary": "Struct AnimationState Namespace ECS.Components.Animation Assembly ECS.dll public struct AnimationState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentState public string CurrentState Field Value string FrameIndex public int FrameIndex Field Value int IsPlaying public bool IsPlaying Field Value bool TimeInFrame public float TimeInFrame Field Value float"
  },
  "api/ECS.Components.Animation.DrawLayer.html": {
    "href": "api/ECS.Components.Animation.DrawLayer.html",
    "title": "Enum DrawLayer | Super Plant BroZ",
    "summary": "Enum DrawLayer Namespace ECS.Components.Animation Assembly ECS.dll public enum DrawLayer Fields Background = 0 Debug = 5 DebugText = 6 Platform = 2 Player = 3 Projectile = 4 Terrain = 1 UI = 7 UIOverlay1 = 8 UIOverlay2 = 9 UIOverlay3 = 10 UIText = 11"
  },
  "api/ECS.Components.Animation.FacingDirection.html": {
    "href": "api/ECS.Components.Animation.FacingDirection.html",
    "title": "Struct FacingDirection | Super Plant BroZ",
    "summary": "Struct FacingDirection Namespace ECS.Components.Animation Assembly ECS.dll public struct FacingDirection Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields IsFacingLeft public bool IsFacingLeft Field Value bool"
  },
  "api/ECS.Components.Animation.Parallax.html": {
    "href": "api/ECS.Components.Animation.Parallax.html",
    "title": "Struct Parallax | Super Plant BroZ",
    "summary": "Struct Parallax Namespace ECS.Components.Animation Assembly ECS.dll public struct Parallax Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Animation.Rotation.html": {
    "href": "api/ECS.Components.Animation.Rotation.html",
    "title": "Struct Rotation | Super Plant BroZ",
    "summary": "Struct Rotation Namespace ECS.Components.Animation Assembly ECS.dll public struct Rotation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Animation.Scale.html": {
    "href": "api/ECS.Components.Animation.Scale.html",
    "title": "Struct Scale | Super Plant BroZ",
    "summary": "Struct Scale Namespace ECS.Components.Animation Assembly ECS.dll public struct Scale Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Animation.SpriteConfig.html": {
    "href": "api/ECS.Components.Animation.SpriteConfig.html",
    "title": "Struct SpriteConfig | Super Plant BroZ",
    "summary": "Struct SpriteConfig Namespace ECS.Components.Animation Assembly ECS.dll public struct SpriteConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Color public Color Color Field Value Color Layer public DrawLayer Layer Field Value DrawLayer Origin public Vector2 Origin Field Value Vector2 SourceRect public Rectangle SourceRect Field Value Rectangle Texture public Texture2D Texture Field Value Texture2D"
  },
  "api/ECS.Components.Animation.html": {
    "href": "api/ECS.Components.Animation.html",
    "title": "Namespace ECS.Components.Animation | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Animation Structs AnimationConfig AnimationFrameConfig AnimationState FacingDirection Parallax Rotation Scale SpriteConfig Enums DrawLayer"
  },
  "api/ECS.Components.Camera.CameraTracking.html": {
    "href": "api/ECS.Components.Camera.CameraTracking.html",
    "title": "Struct CameraTracking | Super Plant BroZ",
    "summary": "Struct CameraTracking Namespace ECS.Components.Camera Assembly ECS.dll public struct CameraTracking Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.Camera.html": {
    "href": "api/ECS.Components.Camera.html",
    "title": "Namespace ECS.Components.Camera | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Camera Structs CameraTracking"
  },
  "api/ECS.Components.Characters.CharacterConfig.html": {
    "href": "api/ECS.Components.Characters.CharacterConfig.html",
    "title": "Struct CharacterConfig | Super Plant BroZ",
    "summary": "Struct CharacterConfig Namespace ECS.Components.Characters Assembly ECS.dll public struct CharacterConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.Characters.html": {
    "href": "api/ECS.Components.Characters.html",
    "title": "Namespace ECS.Components.Characters | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Characters Structs CharacterConfig"
  },
  "api/ECS.Components.Collision.CollisionBody.html": {
    "href": "api/ECS.Components.Collision.CollisionBody.html",
    "title": "Struct CollisionBody | Super Plant BroZ",
    "summary": "Struct CollisionBody Namespace ECS.Components.Collision Assembly ECS.dll public struct CollisionBody Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Polygons public List<Polygon> Polygons Field Value List<Polygon>"
  },
  "api/ECS.Components.Collision.CollisionLayer.html": {
    "href": "api/ECS.Components.Collision.CollisionLayer.html",
    "title": "Enum CollisionLayer | Super Plant BroZ",
    "summary": "Enum CollisionLayer Namespace ECS.Components.Collision Assembly ECS.dll public enum CollisionLayer Fields Hitbox = 4 Hurtbox = 8 Item = 32 None = 0 Physics = 2 Trigger = 16 World = 1"
  },
  "api/ECS.Components.Collision.Contact.html": {
    "href": "api/ECS.Components.Collision.Contact.html",
    "title": "Struct Contact | Super Plant BroZ",
    "summary": "Struct Contact Namespace ECS.Components.Collision Assembly ECS.dll public struct Contact Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields EntityA public Entity EntityA Field Value Entity EntityB public Entity EntityB Field Value Entity LayerA public CollisionLayer LayerA Field Value CollisionLayer LayerB public CollisionLayer LayerB Field Value CollisionLayer Normal public Vector2 Normal Field Value Vector2 Penetration public float Penetration Field Value float Point public Vector2 Point Field Value Vector2 TimeOfImpact public float TimeOfImpact Field Value float"
  },
  "api/ECS.Components.Collision.ContactState.html": {
    "href": "api/ECS.Components.Collision.ContactState.html",
    "title": "Struct ContactState | Super Plant BroZ",
    "summary": "Struct ContactState Namespace ECS.Components.Collision Assembly ECS.dll public struct ContactState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Contacts public Dictionary<Entity, Contact> Contacts Field Value Dictionary<Entity, Contact>"
  },
  "api/ECS.Components.Collision.Platform.html": {
    "href": "api/ECS.Components.Collision.Platform.html",
    "title": "Struct Platform | Super Plant BroZ",
    "summary": "Struct Platform Namespace ECS.Components.Collision Assembly ECS.dll public struct Platform Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Collision.PlatformTraversalState.html": {
    "href": "api/ECS.Components.Collision.PlatformTraversalState.html",
    "title": "Struct PlatformTraversalState | Super Plant BroZ",
    "summary": "Struct PlatformTraversalState Namespace ECS.Components.Collision Assembly ECS.dll public struct PlatformTraversalState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields IsRequestingDropThrough public bool IsRequestingDropThrough Field Value bool JustPassedUp public bool JustPassedUp Field Value bool LastYPosition public float LastYPosition Field Value float PassedThrough public HashSet<int> PassedThrough Field Value HashSet<int> WasGoingUp public bool WasGoingUp Field Value bool"
  },
  "api/ECS.Components.Collision.Polygon.html": {
    "href": "api/ECS.Components.Collision.Polygon.html",
    "title": "Struct Polygon | Super Plant BroZ",
    "summary": "Struct Polygon Namespace ECS.Components.Collision Assembly ECS.dll public struct Polygon Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CollidesWith public CollisionLayer CollidesWith Field Value CollisionLayer IsTrigger public bool IsTrigger Field Value bool Layer public CollisionLayer Layer Field Value CollisionLayer Vertices public Vector2[] Vertices Field Value Vector2[]"
  },
  "api/ECS.Components.Collision.WorldBounds.html": {
    "href": "api/ECS.Components.Collision.WorldBounds.html",
    "title": "Struct WorldBounds | Super Plant BroZ",
    "summary": "Struct WorldBounds Namespace ECS.Components.Collision Assembly ECS.dll public struct WorldBounds Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Bounds public Rectangle Bounds Field Value Rectangle"
  },
  "api/ECS.Components.Collision.html": {
    "href": "api/ECS.Components.Collision.html",
    "title": "Namespace ECS.Components.Collision | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Collision Structs CollisionBody Contact ContactState Platform PlatformTraversalState Polygon WorldBounds Enums CollisionLayer"
  },
  "api/ECS.Components.Effects.EffectType.html": {
    "href": "api/ECS.Components.Effects.EffectType.html",
    "title": "Enum EffectType | Super Plant BroZ",
    "summary": "Enum EffectType Namespace ECS.Components.Effects Assembly ECS.dll public enum EffectType Fields FireDamage = 7 GravityReduction = 3 IceSlow = 8 InvincibilityShield = 6 JumpBoost = 2 MassChange = 4 None = 0 ScaleChange = 5 SpeedBoost = 1"
  },
  "api/ECS.Components.Effects.FireDamageEffect.html": {
    "href": "api/ECS.Components.Effects.FireDamageEffect.html",
    "title": "Struct FireDamageEffect | Super Plant BroZ",
    "summary": "Struct FireDamageEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct FireDamageEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.GravityReductionEffect.html": {
    "href": "api/ECS.Components.Effects.GravityReductionEffect.html",
    "title": "Struct GravityReductionEffect | Super Plant BroZ",
    "summary": "Struct GravityReductionEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct GravityReductionEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.IEffectBase.html": {
    "href": "api/ECS.Components.Effects.IEffectBase.html",
    "title": "Interface IEffectBase | Super Plant BroZ",
    "summary": "Interface IEffectBase Namespace ECS.Components.Effects Assembly ECS.dll public interface IEffectBase Properties Duration float Duration { get; set; } Property Value float IsApplied bool IsApplied { get; set; } Property Value bool Magnitude float Magnitude { get; set; } Property Value float RemainingTime float RemainingTime { get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.IceSlowEffect.html": {
    "href": "api/ECS.Components.Effects.IceSlowEffect.html",
    "title": "Struct IceSlowEffect | Super Plant BroZ",
    "summary": "Struct IceSlowEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct IceSlowEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.InvincibilityEffect.html": {
    "href": "api/ECS.Components.Effects.InvincibilityEffect.html",
    "title": "Struct InvincibilityEffect | Super Plant BroZ",
    "summary": "Struct InvincibilityEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct InvincibilityEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.JumpBoostEffect.html": {
    "href": "api/ECS.Components.Effects.JumpBoostEffect.html",
    "title": "Struct JumpBoostEffect | Super Plant BroZ",
    "summary": "Struct JumpBoostEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct JumpBoostEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.MassChangeEffect.html": {
    "href": "api/ECS.Components.Effects.MassChangeEffect.html",
    "title": "Struct MassChangeEffect | Super Plant BroZ",
    "summary": "Struct MassChangeEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct MassChangeEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.OriginalValues.html": {
    "href": "api/ECS.Components.Effects.OriginalValues.html",
    "title": "Struct OriginalValues | Super Plant BroZ",
    "summary": "Struct OriginalValues Namespace ECS.Components.Effects Assembly ECS.dll public struct OriginalValues Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Values public Dictionary<Type, object> Values Field Value Dictionary<Type, object>"
  },
  "api/ECS.Components.Effects.ScaleChangeEffect.html": {
    "href": "api/ECS.Components.Effects.ScaleChangeEffect.html",
    "title": "Struct ScaleChangeEffect | Super Plant BroZ",
    "summary": "Struct ScaleChangeEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct ScaleChangeEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.SpeedBoostEffect.html": {
    "href": "api/ECS.Components.Effects.SpeedBoostEffect.html",
    "title": "Struct SpeedBoostEffect | Super Plant BroZ",
    "summary": "Struct SpeedBoostEffect Namespace ECS.Components.Effects Assembly ECS.dll public struct SpeedBoostEffect : IEffectBase Implements IEffectBase Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Duration public float Duration { readonly get; set; } Property Value float IsApplied public bool IsApplied { readonly get; set; } Property Value bool Magnitude public float Magnitude { readonly get; set; } Property Value float RemainingTime public float RemainingTime { readonly get; set; } Property Value float"
  },
  "api/ECS.Components.Effects.html": {
    "href": "api/ECS.Components.Effects.html",
    "title": "Namespace ECS.Components.Effects | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Effects Structs FireDamageEffect GravityReductionEffect IceSlowEffect InvincibilityEffect JumpBoostEffect MassChangeEffect OriginalValues ScaleChangeEffect SpeedBoostEffect Interfaces IEffectBase Enums EffectType"
  },
  "api/ECS.Components.Input.InputAction.html": {
    "href": "api/ECS.Components.Input.InputAction.html",
    "title": "Struct InputAction | Super Plant BroZ",
    "summary": "Struct InputAction Namespace ECS.Components.Input Assembly ECS.dll public struct InputAction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Buttons public Buttons[] Buttons Field Value Buttons[] Joysticks public JoystickInput[] Joysticks Field Value JoystickInput[] Keys public Keys[] Keys Field Value Keys[] Triggers public TriggerType[] Triggers Field Value TriggerType[]"
  },
  "api/ECS.Components.Input.InputConfig.html": {
    "href": "api/ECS.Components.Input.InputConfig.html",
    "title": "Struct InputConfig | Super Plant BroZ",
    "summary": "Struct InputConfig Namespace ECS.Components.Input Assembly ECS.dll public struct InputConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Actions public Dictionary<string, InputAction> Actions Field Value Dictionary<string, InputAction>"
  },
  "api/ECS.Components.Input.JoystickDirection.html": {
    "href": "api/ECS.Components.Input.JoystickDirection.html",
    "title": "Enum JoystickDirection | Super Plant BroZ",
    "summary": "Enum JoystickDirection Namespace ECS.Components.Input Assembly ECS.dll public enum JoystickDirection Fields Down = 2 DownLeft = 7 DownRight = 8 Left = 3 None = 0 Right = 4 Up = 1 UpLeft = 5 UpRight = 6"
  },
  "api/ECS.Components.Input.JoystickInput.html": {
    "href": "api/ECS.Components.Input.JoystickInput.html",
    "title": "Struct JoystickInput | Super Plant BroZ",
    "summary": "Struct JoystickInput Namespace ECS.Components.Input Assembly ECS.dll public struct JoystickInput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Direction public JoystickDirection Direction Field Value JoystickDirection Threshold public float Threshold Field Value float Type public JoystickType Type Field Value JoystickType"
  },
  "api/ECS.Components.Input.JoystickType.html": {
    "href": "api/ECS.Components.Input.JoystickType.html",
    "title": "Enum JoystickType | Super Plant BroZ",
    "summary": "Enum JoystickType Namespace ECS.Components.Input Assembly ECS.dll public enum JoystickType Fields LeftStick = 0 RightStick = 1"
  },
  "api/ECS.Components.Input.MapAction.html": {
    "href": "api/ECS.Components.Input.MapAction.html",
    "title": "Struct MapAction | Super Plant BroZ",
    "summary": "Struct MapAction Namespace ECS.Components.Input Assembly ECS.dll public struct MapAction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields levelEntities public List<string> levelEntities Field Value List<string>"
  },
  "api/ECS.Components.Input.MapConfig.html": {
    "href": "api/ECS.Components.Input.MapConfig.html",
    "title": "Struct MapConfig | Super Plant BroZ",
    "summary": "Struct MapConfig Namespace ECS.Components.Input Assembly ECS.dll public struct MapConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Actions public Dictionary<string, MapAction> Actions Field Value Dictionary<string, MapAction>"
  },
  "api/ECS.Components.Input.OpenPorts.html": {
    "href": "api/ECS.Components.Input.OpenPorts.html",
    "title": "Struct OpenPorts | Super Plant BroZ",
    "summary": "Struct OpenPorts Namespace ECS.Components.Input Assembly ECS.dll public struct OpenPorts Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields port public string port Field Value string"
  },
  "api/ECS.Components.Input.TriggerType.html": {
    "href": "api/ECS.Components.Input.TriggerType.html",
    "title": "Enum TriggerType | Super Plant BroZ",
    "summary": "Enum TriggerType Namespace ECS.Components.Input Assembly ECS.dll public enum TriggerType Fields Left = 0 Right = 1"
  },
  "api/ECS.Components.Input.html": {
    "href": "api/ECS.Components.Input.html",
    "title": "Namespace ECS.Components.Input | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Input Structs InputAction InputConfig JoystickInput MapAction MapConfig OpenPorts Enums JoystickDirection JoystickType TriggerType"
  },
  "api/ECS.Components.Items.Inventory.html": {
    "href": "api/ECS.Components.Items.Inventory.html",
    "title": "Struct Inventory | Super Plant BroZ",
    "summary": "Struct Inventory Namespace ECS.Components.Items Assembly ECS.dll public struct Inventory Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CollectedItems public List<Item> CollectedItems Field Value List<Item>"
  },
  "api/ECS.Components.Items.Item.html": {
    "href": "api/ECS.Components.Items.Item.html",
    "title": "Struct Item | Super Plant BroZ",
    "summary": "Struct Item Namespace ECS.Components.Items Assembly ECS.dll public struct Item Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.Items.html": {
    "href": "api/ECS.Components.Items.html",
    "title": "Namespace ECS.Components.Items | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Items Structs Inventory Item"
  },
  "api/ECS.Components.Lives.LivesCount.html": {
    "href": "api/ECS.Components.Lives.LivesCount.html",
    "title": "Struct LivesCount | Super Plant BroZ",
    "summary": "Struct LivesCount Namespace ECS.Components.Lives Assembly ECS.dll public struct LivesCount Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Lives public int Lives Field Value int"
  },
  "api/ECS.Components.Lives.html": {
    "href": "api/ECS.Components.Lives.html",
    "title": "Namespace ECS.Components.Lives | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Lives Structs LivesCount"
  },
  "api/ECS.Components.Map.PlatformDirectionState.html": {
    "href": "api/ECS.Components.Map.PlatformDirectionState.html",
    "title": "Struct PlatformDirectionState | Super Plant BroZ",
    "summary": "Struct PlatformDirectionState Namespace ECS.Components.Map Assembly ECS.dll public struct PlatformDirectionState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields DirectionChangeFrames public int DirectionChangeFrames Field Value int IsMovingUp public bool IsMovingUp Field Value bool JustChangedDirection public bool JustChangedDirection Field Value bool LastVelocityY public float LastVelocityY Field Value float WasMovingUp public bool WasMovingUp Field Value bool"
  },
  "api/ECS.Components.Map.PlatformRoute.html": {
    "href": "api/ECS.Components.Map.PlatformRoute.html",
    "title": "Struct PlatformRoute | Super Plant BroZ",
    "summary": "Struct PlatformRoute Namespace ECS.Components.Map Assembly ECS.dll public struct PlatformRoute Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentIndex public int CurrentIndex Field Value int Points public List<Vector2> Points Field Value List<Vector2>"
  },
  "api/ECS.Components.Map.html": {
    "href": "api/ECS.Components.Map.html",
    "title": "Namespace ECS.Components.Map | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Map Structs PlatformDirectionState PlatformRoute"
  },
  "api/ECS.Components.Objects.MapObject.html": {
    "href": "api/ECS.Components.Objects.MapObject.html",
    "title": "Struct MapObject | Super Plant BroZ",
    "summary": "Struct MapObject Namespace ECS.Components.Objects Assembly ECS.dll public struct MapObject Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.Objects.html": {
    "href": "api/ECS.Components.Objects.html",
    "title": "Namespace ECS.Components.Objects | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Objects Structs MapObject"
  },
  "api/ECS.Components.PVZ.CurrentTile.html": {
    "href": "api/ECS.Components.PVZ.CurrentTile.html",
    "title": "Struct CurrentTile | Super Plant BroZ",
    "summary": "Struct CurrentTile Namespace ECS.Components.PVZ Assembly ECS.dll public struct CurrentTile Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ColumnIndex public int ColumnIndex Field Value int RowIndex public int RowIndex Field Value int"
  },
  "api/ECS.Components.PVZ.GridInfo.html": {
    "href": "api/ECS.Components.PVZ.GridInfo.html",
    "title": "Struct GridInfo | Super Plant BroZ",
    "summary": "Struct GridInfo Namespace ECS.Components.PVZ Assembly ECS.dll public struct GridInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields NumColumns public int NumColumns Field Value int NumRows public int NumRows Field Value int RowInfo public Entity?[][] RowInfo Field Value Entity?[][] TileSize public int TileSize Field Value int XOffset public int XOffset Field Value int YOffset public int YOffset Field Value int ZombiesInRow public List<Entity>[] ZombiesInRow Field Value List<Entity>[]"
  },
  "api/ECS.Components.PVZ.GridSize.html": {
    "href": "api/ECS.Components.PVZ.GridSize.html",
    "title": "Struct GridSize | Super Plant BroZ",
    "summary": "Struct GridSize Namespace ECS.Components.PVZ Assembly ECS.dll public struct GridSize Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Columns public int Columns Field Value int Rows public int Rows Field Value int TileSize public int TileSize Field Value int"
  },
  "api/ECS.Components.PVZ.GridTag.html": {
    "href": "api/ECS.Components.PVZ.GridTag.html",
    "title": "Struct GridTag | Super Plant BroZ",
    "summary": "Struct GridTag Namespace ECS.Components.PVZ Assembly ECS.dll public struct GridTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.PVZ.PlantList.html": {
    "href": "api/ECS.Components.PVZ.PlantList.html",
    "title": "Struct PlantList | Super Plant BroZ",
    "summary": "Struct PlantList Namespace ECS.Components.PVZ Assembly ECS.dll public struct PlantList Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentPlantIndex public int CurrentPlantIndex Field Value int PossiblePlants public List<string> PossiblePlants Field Value List<string>"
  },
  "api/ECS.Components.PVZ.PlantTag.html": {
    "href": "api/ECS.Components.PVZ.PlantTag.html",
    "title": "Struct PlantTag | Super Plant BroZ",
    "summary": "Struct PlantTag Namespace ECS.Components.PVZ Assembly ECS.dll public struct PlantTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.PVZ.ProjectileSpawnType.html": {
    "href": "api/ECS.Components.PVZ.ProjectileSpawnType.html",
    "title": "Struct ProjectileSpawnType | Super Plant BroZ",
    "summary": "Struct ProjectileSpawnType Namespace ECS.Components.PVZ Assembly ECS.dll public struct ProjectileSpawnType Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.PVZ.PvZTag.html": {
    "href": "api/ECS.Components.PVZ.PvZTag.html",
    "title": "Struct PvZTag | Super Plant BroZ",
    "summary": "Struct PvZTag Namespace ECS.Components.PVZ Assembly ECS.dll public struct PvZTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.PVZ.Tile.html": {
    "href": "api/ECS.Components.PVZ.Tile.html",
    "title": "Struct Tile | Super Plant BroZ",
    "summary": "Struct Tile Namespace ECS.Components.PVZ Assembly ECS.dll public struct Tile Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity? Entity Field Value Entity?"
  },
  "api/ECS.Components.PVZ.TileGrid.html": {
    "href": "api/ECS.Components.PVZ.TileGrid.html",
    "title": "Struct TileGrid | Super Plant BroZ",
    "summary": "Struct TileGrid Namespace ECS.Components.PVZ Assembly ECS.dll public struct TileGrid Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Tiles public Tile[,] Tiles Field Value Tile[,]"
  },
  "api/ECS.Components.PVZ.ZombieSpawningInfo.html": {
    "href": "api/ECS.Components.PVZ.ZombieSpawningInfo.html",
    "title": "Struct ZombieSpawningInfo | Super Plant BroZ",
    "summary": "Struct ZombieSpawningInfo Namespace ECS.Components.PVZ Assembly ECS.dll For use with the timer public struct ZombieSpawningInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields MinTimeBetweenSpawn public float MinTimeBetweenSpawn Field Value float TimeBetweenSpawn public float TimeBetweenSpawn Field Value float TimeDecrease public float TimeDecrease Field Value float"
  },
  "api/ECS.Components.PVZ.ZombieTag.html": {
    "href": "api/ECS.Components.PVZ.ZombieTag.html",
    "title": "Struct ZombieTag | Super Plant BroZ",
    "summary": "Struct ZombieTag Namespace ECS.Components.PVZ Assembly ECS.dll public struct ZombieTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.PVZ.html": {
    "href": "api/ECS.Components.PVZ.html",
    "title": "Namespace ECS.Components.PVZ | Super Plant BroZ",
    "summary": "Namespace ECS.Components.PVZ Structs CurrentTile GridInfo GridSize GridTag PlantList PlantTag ProjectileSpawnType PvZTag Tile TileGrid ZombieSpawningInfo For use with the timer ZombieTag"
  },
  "api/ECS.Components.Physics.Acceleration.html": {
    "href": "api/ECS.Components.Physics.Acceleration.html",
    "title": "Struct Acceleration | Super Plant BroZ",
    "summary": "Struct Acceleration Namespace ECS.Components.Physics Assembly ECS.dll public struct Acceleration Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.AirControlForce.html": {
    "href": "api/ECS.Components.Physics.AirControlForce.html",
    "title": "Struct AirControlForce | Super Plant BroZ",
    "summary": "Struct AirControlForce Namespace ECS.Components.Physics Assembly ECS.dll public struct AirControlForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.AirResistance.html": {
    "href": "api/ECS.Components.Physics.AirResistance.html",
    "title": "Struct AirResistance | Super Plant BroZ",
    "summary": "Struct AirResistance Namespace ECS.Components.Physics Assembly ECS.dll public struct AirResistance Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.Direction.html": {
    "href": "api/ECS.Components.Physics.Direction.html",
    "title": "Struct Direction | Super Plant BroZ",
    "summary": "Struct Direction Namespace ECS.Components.Physics Assembly ECS.dll public struct Direction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.Force.html": {
    "href": "api/ECS.Components.Physics.Force.html",
    "title": "Struct Force | Super Plant BroZ",
    "summary": "Struct Force Namespace ECS.Components.Physics Assembly ECS.dll public struct Force Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.Friction.html": {
    "href": "api/ECS.Components.Physics.Friction.html",
    "title": "Struct Friction | Super Plant BroZ",
    "summary": "Struct Friction Namespace ECS.Components.Physics Assembly ECS.dll public struct Friction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.GravitySpeed.html": {
    "href": "api/ECS.Components.Physics.GravitySpeed.html",
    "title": "Struct GravitySpeed | Super Plant BroZ",
    "summary": "Struct GravitySpeed Namespace ECS.Components.Physics Assembly ECS.dll public struct GravitySpeed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.IsGrounded.html": {
    "href": "api/ECS.Components.Physics.IsGrounded.html",
    "title": "Struct IsGrounded | Super Plant BroZ",
    "summary": "Struct IsGrounded Namespace ECS.Components.Physics Assembly ECS.dll public struct IsGrounded Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields GroundNormal public Vector2 GroundNormal Field Value Vector2 UngroundedTimer public float UngroundedTimer Field Value float Value public bool Value Field Value bool WasGrounded public bool WasGrounded Field Value bool"
  },
  "api/ECS.Components.Physics.JumpForce.html": {
    "href": "api/ECS.Components.Physics.JumpForce.html",
    "title": "Struct JumpForce | Super Plant BroZ",
    "summary": "Struct JumpForce Namespace ECS.Components.Physics Assembly ECS.dll public struct JumpForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.Mass.html": {
    "href": "api/ECS.Components.Physics.Mass.html",
    "title": "Struct Mass | Super Plant BroZ",
    "summary": "Struct Mass Namespace ECS.Components.Physics Assembly ECS.dll public struct Mass Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.MaxVelocity.html": {
    "href": "api/ECS.Components.Physics.MaxVelocity.html",
    "title": "Struct MaxVelocity | Super Plant BroZ",
    "summary": "Struct MaxVelocity Namespace ECS.Components.Physics Assembly ECS.dll public struct MaxVelocity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.MovementForce.html": {
    "href": "api/ECS.Components.Physics.MovementForce.html",
    "title": "Struct MovementForce | Super Plant BroZ",
    "summary": "Struct MovementForce Namespace ECS.Components.Physics Assembly ECS.dll public struct MovementForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Magnitude public float Magnitude Field Value float"
  },
  "api/ECS.Components.Physics.Percent.html": {
    "href": "api/ECS.Components.Physics.Percent.html",
    "title": "Struct Percent | Super Plant BroZ",
    "summary": "Struct Percent Namespace ECS.Components.Physics Assembly ECS.dll public struct Percent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.Position.html": {
    "href": "api/ECS.Components.Physics.Position.html",
    "title": "Struct Position | Super Plant BroZ",
    "summary": "Struct Position Namespace ECS.Components.Physics Assembly ECS.dll public struct Position Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.RunSpeed.html": {
    "href": "api/ECS.Components.Physics.RunSpeed.html",
    "title": "Struct RunSpeed | Super Plant BroZ",
    "summary": "Struct RunSpeed Namespace ECS.Components.Physics Assembly ECS.dll public struct RunSpeed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Scalar public float Scalar Field Value float"
  },
  "api/ECS.Components.Physics.UIPosition.html": {
    "href": "api/ECS.Components.Physics.UIPosition.html",
    "title": "Struct UIPosition | Super Plant BroZ",
    "summary": "Struct UIPosition Namespace ECS.Components.Physics Assembly ECS.dll public struct UIPosition Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.Velocity.html": {
    "href": "api/ECS.Components.Physics.Velocity.html",
    "title": "Struct Velocity | Super Plant BroZ",
    "summary": "Struct Velocity Namespace ECS.Components.Physics Assembly ECS.dll public struct Velocity Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.Physics.WalkForce.html": {
    "href": "api/ECS.Components.Physics.WalkForce.html",
    "title": "Struct WalkForce | Super Plant BroZ",
    "summary": "Struct WalkForce Namespace ECS.Components.Physics Assembly ECS.dll public struct WalkForce Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Physics.html": {
    "href": "api/ECS.Components.Physics.html",
    "title": "Namespace ECS.Components.Physics | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Physics Structs Acceleration AirControlForce AirResistance Direction Force Friction GravitySpeed IsGrounded JumpForce Mass MaxVelocity MovementForce Percent Position RunSpeed UIPosition Velocity WalkForce"
  },
  "api/ECS.Components.Projectiles.ParentID.html": {
    "href": "api/ECS.Components.Projectiles.ParentID.html",
    "title": "Struct ParentID | Super Plant BroZ",
    "summary": "Struct ParentID Namespace ECS.Components.Projectiles Assembly ECS.dll public struct ParentID Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public int Value Field Value int"
  },
  "api/ECS.Components.Projectiles.ProjectileDespawnType.html": {
    "href": "api/ECS.Components.Projectiles.ProjectileDespawnType.html",
    "title": "Struct ProjectileDespawnType | Super Plant BroZ",
    "summary": "Struct ProjectileDespawnType Namespace ECS.Components.Projectiles Assembly ECS.dll public struct ProjectileDespawnType Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.Projectiles.html": {
    "href": "api/ECS.Components.Projectiles.html",
    "title": "Namespace ECS.Components.Projectiles | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Projectiles Structs ParentID ProjectileDespawnType"
  },
  "api/ECS.Components.Random.RandomRange.html": {
    "href": "api/ECS.Components.Random.RandomRange.html",
    "title": "Struct RandomRange | Super Plant BroZ",
    "summary": "Struct RandomRange Namespace ECS.Components.Random Assembly ECS.dll public struct RandomRange Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Maximum public int Maximum Field Value int Minimum public int Minimum Field Value int"
  },
  "api/ECS.Components.Random.RandomlyGeneratedFloat.html": {
    "href": "api/ECS.Components.Random.RandomlyGeneratedFloat.html",
    "title": "Struct RandomlyGeneratedFloat | Super Plant BroZ",
    "summary": "Struct RandomlyGeneratedFloat Namespace ECS.Components.Random Assembly ECS.dll public struct RandomlyGeneratedFloat Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public float Value Field Value float"
  },
  "api/ECS.Components.Random.RandomlyGeneratedInteger.html": {
    "href": "api/ECS.Components.Random.RandomlyGeneratedInteger.html",
    "title": "Struct RandomlyGeneratedInteger | Super Plant BroZ",
    "summary": "Struct RandomlyGeneratedInteger Namespace ECS.Components.Random Assembly ECS.dll public struct RandomlyGeneratedInteger Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public int Value Field Value int"
  },
  "api/ECS.Components.Random.html": {
    "href": "api/ECS.Components.Random.html",
    "title": "Namespace ECS.Components.Random | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Random Structs RandomRange RandomlyGeneratedFloat RandomlyGeneratedInteger"
  },
  "api/ECS.Components.State.GameState.html": {
    "href": "api/ECS.Components.State.GameState.html",
    "title": "Enum GameState | Super Plant BroZ",
    "summary": "Enum GameState Namespace ECS.Components.State Assembly ECS.dll public enum GameState Fields CharacterSelect = 2 Exit = 7 LevelSelect = 1 MainMenu = 0 Paused = 4 Reset = 6 Running = 3 Terminal = 5 Win = 8"
  },
  "api/ECS.Components.State.GameStateComponent.html": {
    "href": "api/ECS.Components.State.GameStateComponent.html",
    "title": "Struct GameStateComponent | Super Plant BroZ",
    "summary": "Struct GameStateComponent Namespace ECS.Components.State Assembly ECS.dll public struct GameStateComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentState public GameState CurrentState Field Value GameState"
  },
  "api/ECS.Components.State.PlayerState.html": {
    "href": "api/ECS.Components.State.PlayerState.html",
    "title": "Enum PlayerState | Super Plant BroZ",
    "summary": "Enum PlayerState Namespace ECS.Components.State Assembly ECS.dll public enum PlayerState Fields Attack = 100 Block = 90 Fall = 20 Idle = 0 Jump = 80 Run = 60 Shoot = 95 Stunned = 110 Walk = 50 down_jab = 106 down_special = 101 left_jab = 108 left_special = 104 right_jab = 107 right_special = 103 up_jab = 105 up_special = 102"
  },
  "api/ECS.Components.State.PlayerStateComponent.html": {
    "href": "api/ECS.Components.State.PlayerStateComponent.html",
    "title": "Struct PlayerStateComponent | Super Plant BroZ",
    "summary": "Struct PlayerStateComponent Namespace ECS.Components.State Assembly ECS.dll public struct PlayerStateComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentState public PlayerState CurrentState Field Value PlayerState"
  },
  "api/ECS.Components.State.html": {
    "href": "api/ECS.Components.State.html",
    "title": "Namespace ECS.Components.State | Super Plant BroZ",
    "summary": "Namespace ECS.Components.State Structs GameStateComponent PlayerStateComponent Enums GameState PlayerState"
  },
  "api/ECS.Components.Tags.AITag.html": {
    "href": "api/ECS.Components.Tags.AITag.html",
    "title": "Struct AITag | Super Plant BroZ",
    "summary": "Struct AITag Namespace ECS.Components.Tags Assembly ECS.dll public struct AITag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.CharacterSelectTag.html": {
    "href": "api/ECS.Components.Tags.CharacterSelectTag.html",
    "title": "Struct CharacterSelectTag | Super Plant BroZ",
    "summary": "Struct CharacterSelectTag Namespace ECS.Components.Tags Assembly ECS.dll public struct CharacterSelectTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.CharacterTag.html": {
    "href": "api/ECS.Components.Tags.CharacterTag.html",
    "title": "Struct CharacterTag | Super Plant BroZ",
    "summary": "Struct CharacterTag Namespace ECS.Components.Tags Assembly ECS.dll public struct CharacterTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.ItemTag.html": {
    "href": "api/ECS.Components.Tags.ItemTag.html",
    "title": "Struct ItemTag | Super Plant BroZ",
    "summary": "Struct ItemTag Namespace ECS.Components.Tags Assembly ECS.dll public struct ItemTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.LevelSelectTag.html": {
    "href": "api/ECS.Components.Tags.LevelSelectTag.html",
    "title": "Struct LevelSelectTag | Super Plant BroZ",
    "summary": "Struct LevelSelectTag Namespace ECS.Components.Tags Assembly ECS.dll public struct LevelSelectTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.MainMenuTag.html": {
    "href": "api/ECS.Components.Tags.MainMenuTag.html",
    "title": "Struct MainMenuTag | Super Plant BroZ",
    "summary": "Struct MainMenuTag Namespace ECS.Components.Tags Assembly ECS.dll public struct MainMenuTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.ObjectTag.html": {
    "href": "api/ECS.Components.Tags.ObjectTag.html",
    "title": "Struct ObjectTag | Super Plant BroZ",
    "summary": "Struct ObjectTag Namespace ECS.Components.Tags Assembly ECS.dll public struct ObjectTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.PlayerTag.html": {
    "href": "api/ECS.Components.Tags.PlayerTag.html",
    "title": "Struct PlayerTag | Super Plant BroZ",
    "summary": "Struct PlayerTag Namespace ECS.Components.Tags Assembly ECS.dll public struct PlayerTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.ProjectileTag.html": {
    "href": "api/ECS.Components.Tags.ProjectileTag.html",
    "title": "Struct ProjectileTag | Super Plant BroZ",
    "summary": "Struct ProjectileTag Namespace ECS.Components.Tags Assembly ECS.dll public struct ProjectileTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.SingletonTag.html": {
    "href": "api/ECS.Components.Tags.SingletonTag.html",
    "title": "Struct SingletonTag | Super Plant BroZ",
    "summary": "Struct SingletonTag Namespace ECS.Components.Tags Assembly ECS.dll public struct SingletonTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.TerminalTag.html": {
    "href": "api/ECS.Components.Tags.TerminalTag.html",
    "title": "Struct TerminalTag | Super Plant BroZ",
    "summary": "Struct TerminalTag Namespace ECS.Components.Tags Assembly ECS.dll public struct TerminalTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ECS.Components.Tags.html": {
    "href": "api/ECS.Components.Tags.html",
    "title": "Namespace ECS.Components.Tags | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Tags Structs AITag CharacterSelectTag CharacterTag ItemTag LevelSelectTag MainMenuTag ObjectTag PlayerTag ProjectileTag SingletonTag TerminalTag"
  },
  "api/ECS.Components.Timer.Timer.html": {
    "href": "api/ECS.Components.Timer.Timer.html",
    "title": "Struct Timer | Super Plant BroZ",
    "summary": "Struct Timer Namespace ECS.Components.Timer Assembly ECS.dll public struct Timer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Duration public float Duration Field Value float Elapsed public float Elapsed Field Value float OneShot public bool OneShot Field Value bool Type public TimerType Type Field Value TimerType"
  },
  "api/ECS.Components.Timer.TimerType.html": {
    "href": "api/ECS.Components.Timer.TimerType.html",
    "title": "Enum TimerType | Super Plant BroZ",
    "summary": "Enum TimerType Namespace ECS.Components.Timer Assembly ECS.dll public enum TimerType Fields AITimer = 1 EffectTimer = 7 HitboxTimer = 4 JabTimer = 6 None = 0 ProjectileTimer = 3 SpecialTimer = 5 StateTimer = 2 WinTimer = 9 ZombieSpawningTimer = 8"
  },
  "api/ECS.Components.Timer.Timers.html": {
    "href": "api/ECS.Components.Timer.Timers.html",
    "title": "Struct Timers | Super Plant BroZ",
    "summary": "Struct Timers Namespace ECS.Components.Timer Assembly ECS.dll public struct Timers Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields TimerMap public Dictionary<TimerType, Timer> TimerMap Field Value Dictionary<TimerType, Timer>"
  },
  "api/ECS.Components.Timer.html": {
    "href": "api/ECS.Components.Timer.html",
    "title": "Namespace ECS.Components.Timer | Super Plant BroZ",
    "summary": "Namespace ECS.Components.Timer Structs Timer Timers Enums TimerType"
  },
  "api/ECS.Components.UI.AddAI.html": {
    "href": "api/ECS.Components.UI.AddAI.html",
    "title": "Struct AddAI | Super Plant BroZ",
    "summary": "Struct AddAI Namespace ECS.Components.UI Assembly ECS.dll public struct AddAI Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.UI.Button.html": {
    "href": "api/ECS.Components.UI.Button.html",
    "title": "Struct Button | Super Plant BroZ",
    "summary": "Struct Button Namespace ECS.Components.UI Assembly ECS.dll public struct Button Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Action public string Action Field Value string Active public bool Active Field Value bool Color public Color Color Field Value Color Text public string Text Field Value string"
  },
  "api/ECS.Components.UI.ButtonSelected.html": {
    "href": "api/ECS.Components.UI.ButtonSelected.html",
    "title": "Struct ButtonSelected | Super Plant BroZ",
    "summary": "Struct ButtonSelected Namespace ECS.Components.UI Assembly ECS.dll public struct ButtonSelected Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public string Value Field Value string"
  },
  "api/ECS.Components.UI.HUDConfig.html": {
    "href": "api/ECS.Components.UI.HUDConfig.html",
    "title": "Struct HUDConfig | Super Plant BroZ",
    "summary": "Struct HUDConfig Namespace ECS.Components.UI Assembly ECS.dll public struct HUDConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Frame public string Frame Field Value string Lives public string Lives Field Value string LivesOffset public Vector2 LivesOffset Field Value Vector2 LivesPosition public Vector2 LivesPosition Field Value Vector2 TextPosition public Vector2 TextPosition Field Value Vector2"
  },
  "api/ECS.Components.UI.PlayerCount.html": {
    "href": "api/ECS.Components.UI.PlayerCount.html",
    "title": "Struct PlayerCount | Super Plant BroZ",
    "summary": "Struct PlayerCount Namespace ECS.Components.UI Assembly ECS.dll public struct PlayerCount Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields MaxValue public int MaxValue Field Value int Value public int Value Field Value int"
  },
  "api/ECS.Components.UI.PlayerIndicators.html": {
    "href": "api/ECS.Components.UI.PlayerIndicators.html",
    "title": "Struct PlayerIndicators | Super Plant BroZ",
    "summary": "Struct PlayerIndicators Namespace ECS.Components.UI Assembly ECS.dll public struct PlayerIndicators Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Values public UIIndicator[] Values Field Value UIIndicator[]"
  },
  "api/ECS.Components.UI.TerminalComponent.html": {
    "href": "api/ECS.Components.UI.TerminalComponent.html",
    "title": "Struct TerminalComponent | Super Plant BroZ",
    "summary": "Struct TerminalComponent Namespace ECS.Components.UI Assembly ECS.dll public struct TerminalComponent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields BackgroundOpacity public float BackgroundOpacity Field Value float CurrentInput public string CurrentInput Field Value string CursorPosition public int CursorPosition Field Value int History public List<string> History Field Value List<string> HistoryIndex public int HistoryIndex Field Value int IsActive public bool IsActive Field Value bool MaxOutputLines public int MaxOutputLines Field Value int OutputLines public List<string> OutputLines Field Value List<string> ScrollPosition public int ScrollPosition Field Value int"
  },
  "api/ECS.Components.UI.TextCenter.html": {
    "href": "api/ECS.Components.UI.TextCenter.html",
    "title": "Struct TextCenter | Super Plant BroZ",
    "summary": "Struct TextCenter Namespace ECS.Components.UI Assembly ECS.dll public struct TextCenter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.UI.TextScale.html": {
    "href": "api/ECS.Components.UI.TextScale.html",
    "title": "Struct TextScale | Super Plant BroZ",
    "summary": "Struct TextScale Namespace ECS.Components.UI Assembly ECS.dll public struct TextScale Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public Vector2 Value Field Value Vector2"
  },
  "api/ECS.Components.UI.UIIndicator.html": {
    "href": "api/ECS.Components.UI.UIIndicator.html",
    "title": "Struct UIIndicator | Super Plant BroZ",
    "summary": "Struct UIIndicator Namespace ECS.Components.UI Assembly ECS.dll public struct UIIndicator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Offset public Vector2 Offset Field Value Vector2 Position public Vector2 Position Field Value Vector2 PotentialValues public List<string> PotentialValues Field Value List<string> Value public int Value Field Value int"
  },
  "api/ECS.Components.UI.UIMenu.html": {
    "href": "api/ECS.Components.UI.UIMenu.html",
    "title": "Struct UIMenu | Super Plant BroZ",
    "summary": "Struct UIMenu Namespace ECS.Components.UI Assembly ECS.dll public struct UIMenu Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Active public bool Active Field Value bool Buttons public List<Button> Buttons Field Value List<Button> Selected public int Selected Field Value int Separation public int Separation Field Value int"
  },
  "api/ECS.Components.UI.UIMenu2D.html": {
    "href": "api/ECS.Components.UI.UIMenu2D.html",
    "title": "Struct UIMenu2D | Super Plant BroZ",
    "summary": "Struct UIMenu2D Namespace ECS.Components.UI Assembly ECS.dll public struct UIMenu2D Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Active public bool Active Field Value bool Menus public List<UIMenu> Menus Field Value List<UIMenu> Selected public int Selected Field Value int Separation public int Separation Field Value int"
  },
  "api/ECS.Components.UI.UIPaused.html": {
    "href": "api/ECS.Components.UI.UIPaused.html",
    "title": "Struct UIPaused | Super Plant BroZ",
    "summary": "Struct UIPaused Namespace ECS.Components.UI Assembly ECS.dll public struct UIPaused Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Value public bool Value Field Value bool"
  },
  "api/ECS.Components.UI.UIText.html": {
    "href": "api/ECS.Components.UI.UIText.html",
    "title": "Struct UIText | Super Plant BroZ",
    "summary": "Struct UIText Namespace ECS.Components.UI Assembly ECS.dll public struct UIText Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Color public Color Color Field Value Color Font public string Font Field Value string Text public string Text Field Value string"
  },
  "api/ECS.Components.UI.html": {
    "href": "api/ECS.Components.UI.html",
    "title": "Namespace ECS.Components.UI | Super Plant BroZ",
    "summary": "Namespace ECS.Components.UI Structs AddAI Button ButtonSelected HUDConfig PlayerCount PlayerIndicators TerminalComponent TextCenter TextScale UIIndicator UIMenu UIMenu2D UIPaused UIText"
  },
  "api/ECS.Components.html": {
    "href": "api/ECS.Components.html",
    "title": "Namespace ECS.Components | Super Plant BroZ",
    "summary": "Namespace ECS.Components Namespaces ECS.Components.AI ECS.Components.Animation ECS.Components.Camera ECS.Components.Characters ECS.Components.Collision ECS.Components.Effects ECS.Components.Input ECS.Components.Items ECS.Components.Lives ECS.Components.Map ECS.Components.Objects ECS.Components.PVZ ECS.Components.Physics ECS.Components.Projectiles ECS.Components.Random ECS.Components.State ECS.Components.Tags ECS.Components.Timer ECS.Components.UI"
  },
  "api/ECS.Core.AssetLoader.html": {
    "href": "api/ECS.Core.AssetLoader.html",
    "title": "Class AssetLoader | Super Plant BroZ",
    "summary": "Class AssetLoader Namespace ECS.Core Assembly ECS.dll public static class AssetLoader Inheritance object AssetLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DEFAULT_CONFIG_PATH private const string DEFAULT_CONFIG_PATH = \"Config/AssetConfig/assets.json\" Field Value string Methods LoadAssetCollection(IEnumerable<AssetEntry>, Action<string, string>) private static void LoadAssetCollection(IEnumerable<AssetEntry> assetConfigs, Action<string, string> loadFunc) Parameters assetConfigs IEnumerable<AssetEntry> loadFunc Action<string, string> LoadAssets(ContentManager, string) public static GameAssets LoadAssets(ContentManager content, string configPath = \"Config/AssetConfig/assets.json\") Parameters content ContentManager configPath string Returns GameAssets RegisterEntities(IEnumerable<EntityRegistration>) private static void RegisterEntities(IEnumerable<EntityRegistration> entities) Parameters entities IEnumerable<EntityRegistration>"
  },
  "api/ECS.Core.AssetManager.html": {
    "href": "api/ECS.Core.AssetManager.html",
    "title": "Class AssetManager | Super Plant BroZ",
    "summary": "Class AssetManager Namespace ECS.Core Assembly ECS.dll public static class AssetManager Inheritance object AssetManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields entityConfigLoader private static readonly EntityConfigLoader entityConfigLoader Field Value EntityConfigLoader inputConfigLoader private static readonly InputConfigLoader inputConfigLoader Field Value InputConfigLoader mapConfigLoader private static readonly MapConfigLoader mapConfigLoader Field Value MapConfigLoader spriteSheetLoader private static readonly SpriteSheetLoader spriteSheetLoader Field Value SpriteSheetLoader Methods LoadEntityConfig(GameAssets, string, string) public static void LoadEntityConfig(GameAssets assets, string key, string path) Parameters assets GameAssets key string path string LoadFont(GameAssets, ContentManager, string, string) public static void LoadFont(GameAssets assets, ContentManager content, string key, string path) Parameters assets GameAssets content ContentManager key string path string LoadInputConfig(GameAssets, string, string) public static void LoadInputConfig(GameAssets assets, string key, string path) Parameters assets GameAssets key string path string LoadLevelConfig(GameAssets, string, string) public static void LoadLevelConfig(GameAssets assets, string key, string path) Parameters assets GameAssets key string path string LoadSound(GameAssets, ContentManager, string, string) public static void LoadSound(GameAssets assets, ContentManager content, string key, string path) Parameters assets GameAssets content ContentManager key string path string LoadSpriteSheet(GameAssets, string, string) public static void LoadSpriteSheet(GameAssets assets, string key, string path) Parameters assets GameAssets key string path string LoadTexture(GameAssets, ContentManager, string, string) public static void LoadTexture(GameAssets assets, ContentManager content, string key, string path) Parameters assets GameAssets content ContentManager key string path string"
  },
  "api/ECS.Core.CameraManager.html": {
    "href": "api/ECS.Core.CameraManager.html",
    "title": "Class CameraManager | Super Plant BroZ",
    "summary": "Class CameraManager Namespace ECS.Core Assembly ECS.dll Manages camera state and transformations for the game public class CameraManager Inheritance object CameraManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraManager(GraphicsDevice) public CameraManager(GraphicsDevice graphicsDevice) Parameters graphicsDevice GraphicsDevice Fields DEFAULT_ZOOM private const float DEFAULT_ZOOM = 1 Field Value float LERP_VALUE private const float LERP_VALUE = 0.1 Field Value float MAX_ZOOM private const float MAX_ZOOM = 3 Field Value float MIN_ZOOM private const float MIN_ZOOM = 0.5 Field Value float ZOOM_SPEED private const float ZOOM_SPEED = 0.1 Field Value float graphicsDevice private readonly GraphicsDevice graphicsDevice Field Value GraphicsDevice maintainWorldScale private bool maintainWorldScale Field Value bool position private Vector2 position Field Value Vector2 referenceResolution private Point referenceResolution Field Value Point transformMatrix private Matrix transformMatrix Field Value Matrix zoom private float zoom Field Value float Methods GetEffectiveZoom() Gets the effective zoom including window scaling if not maintaining world scale public float GetEffectiveZoom() Returns float GetPosition() public Vector2 GetPosition() Returns Vector2 GetTransformMatrix() Gets the current camera transform matrix public Matrix GetTransformMatrix() Returns Matrix GetZoom() Gets the current zoom level public float GetZoom() Returns float HandleResize(Point) Handle window resize events public void HandleResize(Point newSize) Parameters newSize Point Reset() Resets the camera to its default state public void Reset() SetMaintainWorldScale(bool) Toggle whether world scale is maintained during window resizing public void SetMaintainWorldScale(bool maintain) Parameters maintain bool UpdateMatrix() Updates the camera's transform matrix based on its current position and zoom level private void UpdateMatrix() UpdatePosition(Vector2) public void UpdatePosition(Vector2 position) Parameters position Vector2 Zoom(float) Zooms the camera in or out public void Zoom(float zoomAmount) Parameters zoomAmount float Amount to zoom in (positive) or out (negative)."
  },
  "api/ECS.Core.ComponentPool-1.html": {
    "href": "api/ECS.Core.ComponentPool-1.html",
    "title": "Class ComponentPool<T> | Super Plant BroZ",
    "summary": "Class ComponentPool<T> Namespace ECS.Core Assembly ECS.dll public sealed class ComponentPool<T> : IComponentPool where T : struct Type Parameters T Inheritance object ComponentPool<T> Implements IComponentPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields COMPONENT_ARRAY_SIZE private const int COMPONENT_ARRAY_SIZE = 1024 Field Value int capacity private int capacity Field Value int components private T[] components Field Value T[] entityToIndex private Dictionary<int, int> entityToIndex Field Value Dictionary<int, int> freeIndices private Stack<int> freeIndices Field Value Stack<int> Properties Count public int Count { get; } Property Value int Methods EnsureCapacity(int) public void EnsureCapacity(int newCapacity) Parameters newCapacity int Get(Entity) public ref T Get(Entity entity) Parameters entity Entity Returns T Has(Entity) public bool Has(Entity entity) Parameters entity Entity Returns bool Remove(Entity) public void Remove(Entity entity) Parameters entity Entity Set(Entity, T) public void Set(Entity entity, T component) Parameters entity Entity component T"
  },
  "api/ECS.Core.Debug.Logger.html": {
    "href": "api/ECS.Core.Debug.Logger.html",
    "title": "Class Logger | Super Plant BroZ",
    "summary": "Class Logger Namespace ECS.Core.Debug Assembly ECS.dll public static class Logger Inheritance object Logger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields messages private static readonly List<string> messages Field Value List<string> Properties Messages public static IReadOnlyList<string> Messages { get; } Property Value IReadOnlyList<string> Methods Clear() public static void Clear() Log(string) public static void Log(string message) Parameters message string Save(string) public static string Save(string fileName = null) Parameters fileName string Returns string"
  },
  "api/ECS.Core.Debug.html": {
    "href": "api/ECS.Core.Debug.html",
    "title": "Namespace ECS.Core.Debug | Super Plant BroZ",
    "summary": "Namespace ECS.Core.Debug Classes Logger"
  },
  "api/ECS.Core.Entity.html": {
    "href": "api/ECS.Core.Entity.html",
    "title": "Struct Entity | Super Plant BroZ",
    "summary": "Struct Entity Namespace ECS.Core Assembly ECS.dll public readonly struct Entity Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Entity(int) public Entity(int id) Parameters id int Fields Id public readonly int Id Field Value int Methods Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance."
  },
  "api/ECS.Core.EntityAssetKey.html": {
    "href": "api/ECS.Core.EntityAssetKey.html",
    "title": "Class EntityAssetKey | Super Plant BroZ",
    "summary": "Class EntityAssetKey Namespace ECS.Core Assembly ECS.dll public record EntityAssetKey : IEquatable<EntityAssetKey> Inheritance object EntityAssetKey Implements IEquatable<EntityAssetKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityAssetKey(string, string, string, string) public EntityAssetKey(string SpriteKey, string AnimationKey, string ConfigKey, string InputKey) Parameters SpriteKey string AnimationKey string ConfigKey string InputKey string Properties AnimationKey public string AnimationKey { get; init; } Property Value string ConfigKey public string ConfigKey { get; init; } Property Value string InputKey public string InputKey { get; init; } Property Value string SpriteKey public string SpriteKey { get; init; } Property Value string"
  },
  "api/ECS.Core.EntityFactory.html": {
    "href": "api/ECS.Core.EntityFactory.html",
    "title": "Class EntityFactory | Super Plant BroZ",
    "summary": "Class EntityFactory Namespace ECS.Core Assembly ECS.dll public class EntityFactory Inheritance object EntityFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityFactory(World) public EntityFactory(World world) Parameters world World Fields PortMagic private string[] PortMagic Field Value string[] world private readonly World world Field Value World Methods CreateAIFromConfig(EntityConfig, Texture2D, AnimationConfig, Vector2) public Entity CreateAIFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, Vector2 position = default) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig position Vector2 Returns Entity CreateEntityFromConfig(EntityConfig, Texture2D, AnimationConfig, InputConfig) public Entity CreateEntityFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, InputConfig inputConfig = default) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig inputConfig InputConfig Returns Entity CreateEntityFromKey(string, GameAssets) public Entity CreateEntityFromKey(string entityKey, GameAssets assets) Parameters entityKey string assets GameAssets Returns Entity CreateGameStateEntity(GameAssets) public Entity CreateGameStateEntity(GameAssets assets) Parameters assets GameAssets Returns Entity CreateHitboxFromConfig(EntityConfig, Vector2) public Entity CreateHitboxFromConfig(EntityConfig config, Vector2 position = default) Parameters config EntityConfig position Vector2 Returns Entity CreatePlayerFromConfig(EntityConfig, Texture2D, AnimationConfig, InputConfig, Vector2) public Entity CreatePlayerFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, InputConfig inputConfig = default, Vector2 position = default) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig inputConfig InputConfig position Vector2 Returns Entity CreateProjectileFromConfig(EntityConfig, Texture2D, AnimationConfig, Vector2, bool) public Entity CreateProjectileFromConfig(EntityConfig config, Texture2D spriteSheet = null, AnimationConfig animationConfig = default, Vector2 position = default, bool isFacingLeft = false) Parameters config EntityConfig spriteSheet Texture2D animationConfig AnimationConfig position Vector2 isFacingLeft bool Returns Entity"
  },
  "api/ECS.Core.EntityRegistry.html": {
    "href": "api/ECS.Core.EntityRegistry.html",
    "title": "Class EntityRegistry | Super Plant BroZ",
    "summary": "Class EntityRegistry Namespace ECS.Core Assembly ECS.dll internal static class EntityRegistry Inheritance object EntityRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Entities private static readonly Dictionary<string, EntityAssetKey> Entities Field Value Dictionary<string, EntityAssetKey> Methods Clear() internal static void Clear() GetEntities() internal static IEnumerable<KeyValuePair<string, EntityAssetKey>> GetEntities() Returns IEnumerable<KeyValuePair<string, EntityAssetKey>> GetEntity(string) internal static EntityAssetKey GetEntity(string entityName) Parameters entityName string Returns EntityAssetKey RegisterEntity(string, string, string, string, string) internal static void RegisterEntity(string entityName, string spriteKey, string animationKey, string configKey, string inputKey) Parameters entityName string spriteKey string animationKey string configKey string inputKey string"
  },
  "api/ECS.Core.EventBus.html": {
    "href": "api/ECS.Core.EventBus.html",
    "title": "Class EventBus | Super Plant BroZ",
    "summary": "Class EventBus Namespace ECS.Core Assembly ECS.dll The event bus, a central system for managing event publication and subscription. Any subscriber to the type will recieve the published event. Each Action handles an event of type IEvent. public class EventBus Inheritance object EventBus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields subscribers Dictionary to store all subscriber delegates for each type of IEvent. private Dictionary<Type, List<Action<IEvent>>> subscribers Field Value Dictionary<Type, List<Action<IEvent>>> Methods Publish<T>(T) Publishes an IEvent to all subscribers of that event type T. Iterates over the list of subscribers for the event type and invokes each handler with the event data. public void Publish<T>(T eventData) where T : IEvent Parameters eventData T The data associated with the event being published. Type Parameters T The type of the event being published. Subscribe<T>(Action<IEvent>) Subscribes a handler to a specific event type T. public void Subscribe<T>(Action<IEvent> handler) where T : IEvent Parameters handler Action<IEvent> The delegate to be executed when the event is published. Type Parameters T The type of the event being subscribed to."
  },
  "api/ECS.Core.GameAssets.html": {
    "href": "api/ECS.Core.GameAssets.html",
    "title": "Class GameAssets | Super Plant BroZ",
    "summary": "Class GameAssets Namespace ECS.Core Assembly ECS.dll public class GameAssets Inheritance object GameAssets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields assets private readonly Dictionary<string, object> assets Field Value Dictionary<string, object> Methods AddAsset<T>(string, T) public void AddAsset<T>(string key, T asset) Parameters key string asset T Type Parameters T GetAnimation(string) public AnimationConfig GetAnimation(string path) Parameters path string Returns AnimationConfig GetAsset<T>(string) public T GetAsset<T>(string key) Parameters key string Returns T Type Parameters T GetEntityConfig(string) public EntityConfig GetEntityConfig(string path) Parameters path string Returns EntityConfig GetFont(string) public SpriteFont GetFont(string path) Parameters path string Returns SpriteFont GetInputConfig(string) public InputConfig GetInputConfig(string path) Parameters path string Returns InputConfig GetMapConfig(string) public MapConfig GetMapConfig(string path) Parameters path string Returns MapConfig GetSound(string) public SoundEffect GetSound(string path) Parameters path string Returns SoundEffect GetTexture(string) public Texture2D GetTexture(string path) Parameters path string Returns Texture2D HasAsset<T>(string) public bool HasAsset<T>(string key) Parameters key string Returns bool Type Parameters T"
  },
  "api/ECS.Core.GameInitializer.html": {
    "href": "api/ECS.Core.GameInitializer.html",
    "title": "Class GameInitializer | Super Plant BroZ",
    "summary": "Class GameInitializer Namespace ECS.Core Assembly ECS.dll public class GameInitializer Inheritance object GameInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameInitializer(World) public GameInitializer(World world) Parameters world World Fields entityFactory private readonly EntityFactory entityFactory Field Value EntityFactory world private readonly World world Field Value World Methods CreateGameState(GameAssets) private void CreateGameState(GameAssets assets) Parameters assets GameAssets CreateUI(GameAssets) private void CreateUI(GameAssets assets) Parameters assets GameAssets InitializeGame(GameAssets) public void InitializeGame(GameAssets assets) Parameters assets GameAssets"
  },
  "api/ECS.Core.GameStateManager.html": {
    "href": "api/ECS.Core.GameStateManager.html",
    "title": "Class GameStateManager | Super Plant BroZ",
    "summary": "Class GameStateManager Namespace ECS.Core Assembly ECS.dll public class GameStateManager Inheritance object GameStateManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameStateManager(Game, World, GameAssets, GraphicsManager, LevelLoader) public GameStateManager(Game game, World world, GameAssets assets, GraphicsManager graphicsManager, LevelLoader levelLoader) Parameters game Game world World assets GameAssets graphicsManager GraphicsManager levelLoader LevelLoader Fields assets private readonly GameAssets assets Field Value GameAssets currentLevel private string currentLevel Field Value string game private readonly Game game Field Value Game gameInitializer private readonly GameInitializer gameInitializer Field Value GameInitializer graphicsManager private readonly GraphicsManager graphicsManager Field Value GraphicsManager lastHandledPauseTime private double lastHandledPauseTime Field Value double levelLoader private readonly LevelLoader levelLoader Field Value LevelLoader pendingGameStart private bool pendingGameStart Field Value bool pendingReset private bool pendingReset Field Value bool winner private string winner Field Value string world private readonly World world Field Value World Methods Exit() public void Exit() GetTimeScale() public float GetTimeScale() Returns float Initialize(string) public void Initialize(string level = null) Parameters level string IsWin() public bool IsWin() Returns bool RequestTimeScale(float) public void RequestTimeScale(float scale) Parameters scale float Reset() public void Reset() ResetLobby() public void ResetLobby() ReturnToMainMenu() public void ReturnToMainMenu() ShowSettings() public void ShowSettings() StartCharacterSelect() public void StartCharacterSelect() StartGame() public void StartGame() StartLevelSelect() public void StartLevelSelect() TearDown() public void TearDown() TogglePause() public void TogglePause() Update() public void Update() UpdateCharacter(string, bool) public void UpdateCharacter(string character, bool ai) Parameters character string ai bool UpdateLevel(string) public void UpdateLevel(string level) Parameters level string UpdateWinner(string) public void UpdateWinner(string name) Parameters name string Win() public void Win()"
  },
  "api/ECS.Core.GraphicsManager.WindowResizedHandler.html": {
    "href": "api/ECS.Core.GraphicsManager.WindowResizedHandler.html",
    "title": "Delegate GraphicsManager.WindowResizedHandler | Super Plant BroZ",
    "summary": "Delegate GraphicsManager.WindowResizedHandler Namespace ECS.Core Assembly ECS.dll public delegate void GraphicsManager.WindowResizedHandler(Point newSize) Parameters newSize Point"
  },
  "api/ECS.Core.GraphicsManager.html": {
    "href": "api/ECS.Core.GraphicsManager.html",
    "title": "Class GraphicsManager | Super Plant BroZ",
    "summary": "Class GraphicsManager Namespace ECS.Core Assembly ECS.dll public class GraphicsManager Inheritance object GraphicsManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GraphicsManager(Game) public GraphicsManager(Game game) Parameters game Game Fields currentWindowSize private Point currentWindowSize Field Value Point defaultWindowSize private readonly Point defaultWindowSize Field Value Point graphics private readonly GraphicsDeviceManager graphics Field Value GraphicsDeviceManager Properties cameraManager public CameraManager cameraManager { get; private set; } Property Value CameraManager graphicsDevice public GraphicsDevice graphicsDevice { get; private set; } Property Value GraphicsDevice spriteBatch public SpriteBatch spriteBatch { get; private set; } Property Value SpriteBatch Methods GetGraphicsDevice() public GraphicsDevice GetGraphicsDevice() Returns GraphicsDevice GetLayerDepth(DrawLayer) public float GetLayerDepth(DrawLayer layer) Parameters layer DrawLayer Returns float GetTransformMatrix() public Matrix GetTransformMatrix() Returns Matrix GetWindowSize() public Point GetWindowSize() Returns Point Initialize() public void Initialize() Window_ClientSizeChanged(object, EventArgs) private void Window_ClientSizeChanged(object sender, EventArgs e) Parameters sender object e EventArgs Events OnWindowResized public event GraphicsManager.WindowResizedHandler OnWindowResized Event Type GraphicsManager.WindowResizedHandler"
  },
  "api/ECS.Core.IComponentPool.html": {
    "href": "api/ECS.Core.IComponentPool.html",
    "title": "Interface IComponentPool | Super Plant BroZ",
    "summary": "Interface IComponentPool Namespace ECS.Core Assembly ECS.dll public interface IComponentPool Methods Has(Entity) bool Has(Entity entity) Parameters entity Entity Returns bool Remove(Entity) void Remove(Entity entity) Parameters entity Entity"
  },
  "api/ECS.Core.ISystem.html": {
    "href": "api/ECS.Core.ISystem.html",
    "title": "Interface ISystem | Super Plant BroZ",
    "summary": "Interface ISystem Namespace ECS.Core Assembly ECS.dll public interface ISystem Properties Pausible bool Pausible { get; } Property Value bool Methods Initialize(World) void Initialize(World world) Parameters world World Update(World, GameTime) void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Core.LevelLoader.MakeEntity.html": {
    "href": "api/ECS.Core.LevelLoader.MakeEntity.html",
    "title": "Delegate LevelLoader.MakeEntity | Super Plant BroZ",
    "summary": "Delegate LevelLoader.MakeEntity Namespace ECS.Core Assembly ECS.dll private delegate void LevelLoader.MakeEntity(string element, EntityConfig config, AnimationConfig animation, Texture2D sprite, EntityAssetKey assetKey) Parameters element string config EntityConfig animation AnimationConfig sprite Texture2D assetKey EntityAssetKey"
  },
  "api/ECS.Core.LevelLoader.html": {
    "href": "api/ECS.Core.LevelLoader.html",
    "title": "Class LevelLoader | Super Plant BroZ",
    "summary": "Class LevelLoader Namespace ECS.Core Assembly ECS.dll public class LevelLoader Inheritance object LevelLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LevelLoader(World, GameAssets) public LevelLoader(World world, GameAssets assets) Parameters world World assets GameAssets Fields X_1_SPAWNPOINT private const int X_1_SPAWNPOINT = 100 Field Value int X_2_SPAWNPOINT private const int X_2_SPAWNPOINT = 300 Field Value int X_3_SPAWNPOINT private const int X_3_SPAWNPOINT = 500 Field Value int X_4_SPAWNPOINT private const int X_4_SPAWNPOINT = 600 Field Value int Y_1_SPAWNPOINT private const int Y_1_SPAWNPOINT = 100 Field Value int Y_2_SPAWNPOINT private const int Y_2_SPAWNPOINT = 100 Field Value int Y_3_SPAWNPOINT private const int Y_3_SPAWNPOINT = 100 Field Value int Y_4_SPAWNPOINT private const int Y_4_SPAWNPOINT = 100 Field Value int ai private List<string> ai Field Value List<string> assets private GameAssets assets Field Value GameAssets currentSpawnpoint private int currentSpawnpoint Field Value int entityFactory private readonly EntityFactory entityFactory Field Value EntityFactory makeEntities private Dictionary<string, LevelLoader.MakeEntity> makeEntities Field Value Dictionary<string, LevelLoader.MakeEntity> players private List<string> players Field Value List<string> spawnpoints private Vector2[] spawnpoints Field Value Vector2[] world private readonly World world Field Value World Properties shouldChangeLevel public bool shouldChangeLevel { get; set; } Property Value bool Methods MakeAI(string, EntityConfig, AnimationConfig, Texture2D, EntityAssetKey) private void MakeAI(string element, EntityConfig config, AnimationConfig animation, Texture2D sprite, EntityAssetKey assetKey) Parameters element string config EntityConfig animation AnimationConfig sprite Texture2D assetKey EntityAssetKey MakeEntities(string) public void MakeEntities(string level) Parameters level string MakeGridObject(string, EntityConfig, AnimationConfig, Texture2D, EntityAssetKey) private void MakeGridObject(string element, EntityConfig config, AnimationConfig animation, Texture2D sprite, EntityAssetKey assetKey) Parameters element string config EntityConfig animation AnimationConfig sprite Texture2D assetKey EntityAssetKey MakeLevelObjects(string, EntityConfig, AnimationConfig, Texture2D, EntityAssetKey) private void MakeLevelObjects(string element, EntityConfig config, AnimationConfig animation, Texture2D sprite, EntityAssetKey assetKey) Parameters element string config EntityConfig animation AnimationConfig sprite Texture2D assetKey EntityAssetKey MakePlayers(string, EntityConfig, AnimationConfig, Texture2D, EntityAssetKey) private void MakePlayers(string element, EntityConfig config, AnimationConfig animation, Texture2D sprite, EntityAssetKey assetKey) Parameters element string config EntityConfig animation AnimationConfig sprite Texture2D assetKey EntityAssetKey MakeUI(string, EntityConfig, AnimationConfig, Texture2D, EntityAssetKey) private void MakeUI(string element, EntityConfig config, AnimationConfig animation, Texture2D sprite, EntityAssetKey assetKey) Parameters element string config EntityConfig animation AnimationConfig sprite Texture2D assetKey EntityAssetKey ResetCharacters() public void ResetCharacters() SetAICharacter(string) public void SetAICharacter(string character) Parameters character string SetPlayerCharacter(string) public void SetPlayerCharacter(string character) Parameters character string"
  },
  "api/ECS.Core.SoundManager.html": {
    "href": "api/ECS.Core.SoundManager.html",
    "title": "Class SoundManager | Super Plant BroZ",
    "summary": "Class SoundManager Namespace ECS.Core Assembly ECS.dll public class SoundManager Inheritance object SoundManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SoundManager(Game, GameAssets) public SoundManager(Game game, GameAssets assets) Parameters game Game assets GameAssets Fields MusicVol public float MusicVol Field Value float SfxVol public float SfxVol Field Value float gameAssets private GameAssets gameAssets Field Value GameAssets soundEffectInstances public Dictionary<string, SoundEffectInstance> soundEffectInstances Field Value Dictionary<string, SoundEffectInstance> Methods DecMusicVolume() public void DecMusicVolume() DecSfxVolume() public void DecSfxVolume() IncMusicVolume() public void IncMusicVolume() IncSfxVolume() public void IncSfxVolume() Initialize() public void Initialize() Pause(string) public void Pause(string key) Parameters key string PauseAll() public void PauseAll() PlayMusic(string) public void PlayMusic(string key) Parameters key string PlaySFX(string) public void PlaySFX(string key) Parameters key string Resume(string) public void Resume(string key) Parameters key string ResumeAll() public void ResumeAll() Stop(string) public void Stop(string key) Parameters key string StopAll() public void StopAll()"
  },
  "api/ECS.Core.SystemBase.html": {
    "href": "api/ECS.Core.SystemBase.html",
    "title": "Class SystemBase | Super Plant BroZ",
    "summary": "Class SystemBase Namespace ECS.Core Assembly ECS.dll public abstract class SystemBase : ISystem Inheritance object SystemBase Implements ISystem Derived AISystem AnimationSystem FacingSystem RenderSystem AttackHandlingBase AttackHandlingManager AttackSystem ShootConvertSystem TouchedGroundSystem BlockActionSystem BlockRegenerationSystem BlockSystem CameraSystem CharacterSwitchSystem CollisionDetectionSystem CollisionResponseSystem HitResolutionSystem ActionDebugSystem ActionEventDebugSystem CollisionDebugSystem DebugGroundedSystem DebugRenderSystem GamePadDebugSystem RawInputDebugSystem TerminalSystem EffectApplicationSystem HitDetectionSystem SuperHitSystem InputMappingSystem RawInputSystem ItemSwitchSystem ItemSystem LevelLoaderSystem LevelSwitchSystem LivesSystem PlatformMoveSystem ObjectSwitchSystem AirControlSystem AirResistanceSystem DropThroughSystem ForceSystem FrictionSystem GravitySystem GroundedSystem JumpSystem PlatformPassengerSystem PositionSystem VelocitySystem PlayerDespawnSystem PlayerSpawningSystem HitboxDespawnSystem ProjectileShootingSystem SoundSystem DespawnSystem HitboxSpawningSystem ProjectileDespawnSystem ProjectileSpawningSystem PvZDeathHandlingSystem PvZDeathMonitoringSystem PvZGridTimerUpdateSystem PvZSpawningSystem SplatPeaSpawningSystem ZombieSpawningSystem ZombiesEatingBrainsSystem GameStateSystem PlayerStateSystem DamageSystem HUDRenderSystem MenuSystem UIPositionSystem UITextRenderSystem RandomSystem TimerSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Pausible public virtual bool Pausible { get; } Property Value bool UseScaledGameTime public virtual bool UseScaledGameTime { get; } Property Value bool World protected World World { get; private set; } Property Value World Methods GetComponent<T>(Entity) protected ref T GetComponent<T>(Entity entity) where T : struct Parameters entity Entity Returns T Type Parameters T GetEntitiesWith<T>(Entity) protected IEnumerable<Entity> GetEntitiesWith<T>(Entity entity) where T : struct Parameters entity Entity Returns IEnumerable<Entity> Type Parameters T HasComponents<T>(Entity) protected bool HasComponents<T>(Entity entity) where T : struct Parameters entity Entity Returns bool Type Parameters T Initialize(World) public virtual void Initialize(World world) Parameters world World Publish<T>(T) protected void Publish<T>(T evt) where T : IEvent Parameters evt T Type Parameters T Subscribe<T>(Action<IEvent>) protected void Subscribe<T>(Action<IEvent> handler) where T : IEvent Parameters handler Action<IEvent> Type Parameters T Update(World, GameTime) public abstract void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Core.SystemBuilder.html": {
    "href": "api/ECS.Core.SystemBuilder.html",
    "title": "Class SystemBuilder | Super Plant BroZ",
    "summary": "Class SystemBuilder Namespace ECS.Core Assembly ECS.dll public static class SystemBuilder Inheritance object SystemBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInputSystems(World) private static void AddInputSystems(World world) Parameters world World AddPostUpdateSystems(World, GameStateManager, GameAssets, GraphicsManager, SoundManager) private static void AddPostUpdateSystems(World world, GameStateManager gameStateManager, GameAssets assets, GraphicsManager graphicsManager, SoundManager soundManager) Parameters world World gameStateManager GameStateManager assets GameAssets graphicsManager GraphicsManager soundManager SoundManager AddPreUpdateSystems(World, GameStateManager, GameAssets, LevelLoader) private static void AddPreUpdateSystems(World world, GameStateManager gameStateManager, GameAssets assets, LevelLoader levelLoader) Parameters world World gameStateManager GameStateManager assets GameAssets levelLoader LevelLoader AddRenderSystems(World, GameAssets, GraphicsManager) private static void AddRenderSystems(World world, GameAssets assets, GraphicsManager graphicsManager) Parameters world World assets GameAssets graphicsManager GraphicsManager AddTerminalSystem(World, GameStateManager, GameAssets, GraphicsManager) private static void AddTerminalSystem(World world, GameStateManager gameStateManager, GameAssets assets, GraphicsManager graphicsManager) Parameters world World gameStateManager GameStateManager assets GameAssets graphicsManager GraphicsManager AddUpdateSystems(World) private static void AddUpdateSystems(World world) Parameters world World BuildSystems(World, GameStateManager, GameAssets, GraphicsManager, LevelLoader, SoundManager) public static void BuildSystems(World world, GameStateManager gameStateManager, GameAssets assets, GraphicsManager graphicsManager, LevelLoader levelLoader, SoundManager soundManager) Parameters world World gameStateManager GameStateManager assets GameAssets graphicsManager GraphicsManager levelLoader LevelLoader soundManager SoundManager"
  },
  "api/ECS.Core.SystemExecutionPhase.html": {
    "href": "api/ECS.Core.SystemExecutionPhase.html",
    "title": "Enum SystemExecutionPhase | Super Plant BroZ",
    "summary": "Enum SystemExecutionPhase Namespace ECS.Core Assembly ECS.dll public enum SystemExecutionPhase Fields Input = 1 PostUpdate = 4 PreUpdate = 2 Render = 5 Terminal = 0 Update = 3"
  },
  "api/ECS.Core.SystemInfo.html": {
    "href": "api/ECS.Core.SystemInfo.html",
    "title": "Class SystemInfo | Super Plant BroZ",
    "summary": "Class SystemInfo Namespace ECS.Core Assembly ECS.dll public class SystemInfo Inheritance object SystemInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemInfo(ISystem, SystemExecutionPhase, int) public SystemInfo(ISystem system, SystemExecutionPhase phase, int priority = 0) Parameters system ISystem phase SystemExecutionPhase priority int Properties Phase public SystemExecutionPhase Phase { get; } Property Value SystemExecutionPhase Priority public int Priority { get; } Property Value int System public ISystem System { get; } Property Value ISystem"
  },
  "api/ECS.Core.SystemManager.html": {
    "href": "api/ECS.Core.SystemManager.html",
    "title": "Class SystemManager | Super Plant BroZ",
    "summary": "Class SystemManager Namespace ECS.Core Assembly ECS.dll public class SystemManager Inheritance object SystemManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SystemManager(World) public SystemManager(World world) Parameters world World Fields LogInterval private const int LogInterval = 1000 Field Value int MICROSECONDS private const int MICROSECONDS = 1000000 Field Value int executionTimeHistory private readonly Dictionary<string, (double TotalTime, int Count)> executionTimeHistory Field Value Dictionary<string, (double TotalTime, int Count)> loopCount private int loopCount Field Value int needsSort private bool needsSort Field Value bool systemsByPhase private readonly Dictionary<SystemExecutionPhase, List<SystemInfo>> systemsByPhase Field Value Dictionary<SystemExecutionPhase, List<SystemInfo>> world private readonly World world Field Value World Properties ProfilingEnabled public bool ProfilingEnabled { get; set; } Property Value bool Methods AddSystem(ISystem, SystemExecutionPhase, int) public void AddSystem(ISystem system, SystemExecutionPhase phase, int priority = 0) Parameters system ISystem phase SystemExecutionPhase priority int GetAllSystems() public IEnumerable<ISystem> GetAllSystems() Returns IEnumerable<ISystem> LogExecutionTimes() private void LogExecutionTimes() RemoveSystem(ISystem) public void RemoveSystem(ISystem system) Parameters system ISystem SortSystems() private void SortSystems() UpdatePhase(SystemExecutionPhase, (GameTime original, GameTime scaled)) public void UpdatePhase(SystemExecutionPhase phase, (GameTime original, GameTime scaled) times) Parameters phase SystemExecutionPhase times (GameTime original, GameTime scaled)"
  },
  "api/ECS.Core.Utilities.AssetConfig.html": {
    "href": "api/ECS.Core.Utilities.AssetConfig.html",
    "title": "Class AssetConfig | Super Plant BroZ",
    "summary": "Class AssetConfig Namespace ECS.Core.Utilities Assembly ECS.dll public class AssetConfig Inheritance object AssetConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Entities public List<EntityRegistration> Entities { get; set; } Property Value List<EntityRegistration> EntityConfigs public List<AssetEntry> EntityConfigs { get; set; } Property Value List<AssetEntry> Fonts public List<AssetEntry> Fonts { get; set; } Property Value List<AssetEntry> InputConfigs public List<AssetEntry> InputConfigs { get; set; } Property Value List<AssetEntry> LevelConfigs public List<AssetEntry> LevelConfigs { get; set; } Property Value List<AssetEntry> Sounds public List<AssetEntry> Sounds { get; set; } Property Value List<AssetEntry> SpriteSheets public List<AssetEntry> SpriteSheets { get; set; } Property Value List<AssetEntry> Textures public List<AssetEntry> Textures { get; set; } Property Value List<AssetEntry>"
  },
  "api/ECS.Core.Utilities.AssetEntry.html": {
    "href": "api/ECS.Core.Utilities.AssetEntry.html",
    "title": "Class AssetEntry | Super Plant BroZ",
    "summary": "Class AssetEntry Namespace ECS.Core.Utilities Assembly ECS.dll public class AssetEntry Inheritance object AssetEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Key public string Key { get; set; } Property Value string Path public string Path { get; set; } Property Value string"
  },
  "api/ECS.Core.Utilities.EntityRegistration.html": {
    "href": "api/ECS.Core.Utilities.EntityRegistration.html",
    "title": "Class EntityRegistration | Super Plant BroZ",
    "summary": "Class EntityRegistration Namespace ECS.Core.Utilities Assembly ECS.dll public class EntityRegistration Inheritance object EntityRegistration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Animation public string Animation { get; set; } Property Value string Config public string Config { get; set; } Property Value string Input public string Input { get; set; } Property Value string Key public string Key { get; set; } Property Value string Sprite public string Sprite { get; set; } Property Value string"
  },
  "api/ECS.Core.Utilities.EntityUtils.html": {
    "href": "api/ECS.Core.Utilities.EntityUtils.html",
    "title": "Class EntityUtils | Super Plant BroZ",
    "summary": "Class EntityUtils Namespace ECS.Core.Utilities Assembly ECS.dll public static class EntityUtils Inheritance object EntityUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields setterCache private static readonly Dictionary<Type, Action<World, Entity, object>> setterCache Field Value Dictionary<Type, Action<World, Entity, object>> Methods ApplyComponents(World, Entity, EntityConfig) public static void ApplyComponents(World world, Entity entity, EntityConfig config) Parameters world World entity Entity config EntityConfig ApplyInputConfig(World, Entity, InputConfig) public static void ApplyInputConfig(World world, Entity entity, InputConfig inputConfig) Parameters world World entity Entity inputConfig InputConfig ApplySpriteAndAnimation(World, Entity, Texture2D, AnimationConfig) public static void ApplySpriteAndAnimation(World world, Entity entity, Texture2D spriteSheet, AnimationConfig animationConfig) Parameters world World entity Entity spriteSheet Texture2D animationConfig AnimationConfig CreateSetter(Type) private static Action<World, Entity, object> CreateSetter(Type componentType) Parameters componentType Type Returns Action<World, Entity, object>"
  },
  "api/ECS.Core.Utilities.GameStateHelper.html": {
    "href": "api/ECS.Core.Utilities.GameStateHelper.html",
    "title": "Class GameStateHelper | Super Plant BroZ",
    "summary": "Class GameStateHelper Namespace ECS.Core.Utilities Assembly ECS.dll public static class GameStateHelper Inheritance object GameStateHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckState(World, GameState) private static bool CheckState(World world, GameState gameState) Parameters world World gameState GameState Returns bool GetGameState(World) public static GameState GetGameState(World world) Parameters world World Returns GameState GetGameStateEntity(World) private static Entity GetGameStateEntity(World world) Parameters world World Returns Entity IsCharacterSelect(World) public static bool IsCharacterSelect(World world) Parameters world World Returns bool IsLevelSelect(World) public static bool IsLevelSelect(World world) Parameters world World Returns bool IsMenu(World) public static bool IsMenu(World world) Parameters world World Returns bool IsPaused(World) public static bool IsPaused(World world) Parameters world World Returns bool IsRunning(World) public static bool IsRunning(World world) Parameters world World Returns bool IsTerminal(World) public static bool IsTerminal(World world) Parameters world World Returns bool IsWin(World) public static bool IsWin(World world) Parameters world World Returns bool SetGameState(World, GameState) public static bool SetGameState(World world, GameState newState) Parameters world World newState GameState Returns bool"
  },
  "api/ECS.Core.Utilities.MAGIC.ACTIONS.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.ACTIONS.html",
    "title": "Class MAGIC.ACTIONS | Super Plant BroZ",
    "summary": "Class MAGIC.ACTIONS Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.ACTIONS Inheritance object MAGIC.ACTIONS Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ATTACK public static string ATTACK { get; } Property Value string BLOCK public static string BLOCK { get; } Property Value string COLUMN_LEFT public static string COLUMN_LEFT { get; } Property Value string COLUMN_RIGHT public static string COLUMN_RIGHT { get; } Property Value string DIG public static string DIG { get; } Property Value string DROP_THROUGH public static string DROP_THROUGH { get; } Property Value string EXIT public static string EXIT { get; } Property Value string JUMP public static string JUMP { get; } Property Value string MAIN_MENU public static string MAIN_MENU { get; } Property Value string MENU_DOWN public static string MENU_DOWN { get; } Property Value string MENU_ENTER public static string MENU_ENTER { get; } Property Value string MENU_LEFT public static string MENU_LEFT { get; } Property Value string MENU_RIGHT public static string MENU_RIGHT { get; } Property Value string MENU_UP public static string MENU_UP { get; } Property Value string PAUSE public static string PAUSE { get; } Property Value string PICK_UP public static string PICK_UP { get; } Property Value string PLANT public static string PLANT { get; } Property Value string PLANT_LIST_LEFT public static string PLANT_LIST_LEFT { get; } Property Value string PLANT_LIST_RIGHT public static string PLANT_LIST_RIGHT { get; } Property Value string RESET public static string RESET { get; } Property Value string ROW_DOWN public static string ROW_DOWN { get; } Property Value string ROW_UP public static string ROW_UP { get; } Property Value string RUN public static string RUN { get; } Property Value string SETTINGS public static string SETTINGS { get; } Property Value string SHOOT public static string SHOOT { get; } Property Value string START_GAME public static string START_GAME { get; } Property Value string START_LOBBY public static string START_LOBBY { get; } Property Value string SWITCH_CHARACTER_BACKWARD public static string SWITCH_CHARACTER_BACKWARD { get; } Property Value string SWITCH_CHARACTER_FORWARD public static string SWITCH_CHARACTER_FORWARD { get; } Property Value string SWITCH_ITEM_BACKWARD public static string SWITCH_ITEM_BACKWARD { get; } Property Value string SWITCH_ITEM_FORWARD public static string SWITCH_ITEM_FORWARD { get; } Property Value string SWITCH_LEVEL_FORWARD public static string SWITCH_LEVEL_FORWARD { get; } Property Value string SWITCH_OBJECT_BACKWARD public static string SWITCH_OBJECT_BACKWARD { get; } Property Value string SWITCH_OBJECT_FORWARD public static string SWITCH_OBJECT_FORWARD { get; } Property Value string WALKLEFT public static string WALKLEFT { get; } Property Value string WALKRIGHT public static string WALKRIGHT { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.ANIMATIONSTATE.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.ANIMATIONSTATE.html",
    "title": "Class MAGIC.ANIMATIONSTATE | Super Plant BroZ",
    "summary": "Class MAGIC.ANIMATIONSTATE Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.ANIMATIONSTATE Inheritance object MAGIC.ANIMATIONSTATE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ATTACK public static string ATTACK { get; } Property Value string IDLE public static string IDLE { get; } Property Value string SHOOT public static string SHOOT { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.ASSETKEY.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.ASSETKEY.html",
    "title": "Class MAGIC.ASSETKEY | Super Plant BroZ",
    "summary": "Class MAGIC.ASSETKEY Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.ASSETKEY Inheritance object MAGIC.ASSETKEY Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CHARACTERMENU public static string CHARACTERMENU { get; } Property Value string GAMESTATE public static string GAMESTATE { get; } Property Value string LEVELMENU public static string LEVELMENU { get; } Property Value string MAINMENU public static string MAINMENU { get; } Property Value string PAUSEMENU public static string PAUSEMENU { get; } Property Value string WIN public static string WIN { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.ATTACK.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.ATTACK.html",
    "title": "Class MAGIC.ATTACK | Super Plant BroZ",
    "summary": "Class MAGIC.ATTACK Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.ATTACK Inheritance object MAGIC.ATTACK Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DOWN_JAB public static string DOWN_JAB { get; } Property Value string DOWN_SPECIAL public static string DOWN_SPECIAL { get; } Property Value string JAB public static string JAB { get; } Property Value string LEFT_JAB public static string LEFT_JAB { get; } Property Value string LEFT_SPECIAL public static string LEFT_SPECIAL { get; } Property Value string RIGHT_JAB public static string RIGHT_JAB { get; } Property Value string RIGHT_SPECIAL public static string RIGHT_SPECIAL { get; } Property Value string SPECIAL public static string SPECIAL { get; } Property Value string UP_JAB public static string UP_JAB { get; } Property Value string UP_SPECIAL public static string UP_SPECIAL { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.CHARACTERS.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.CHARACTERS.html",
    "title": "Class MAGIC.CHARACTERS | Super Plant BroZ",
    "summary": "Class MAGIC.CHARACTERS Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.CHARACTERS Inheritance object MAGIC.CHARACTERS Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BONK_CHOY public static string BONK_CHOY { get; } Property Value string CHOMPER public static string CHOMPER { get; } Property Value string PEASHOOTER public static string PEASHOOTER { get; } Property Value string ZOMBIE public static string ZOMBIE { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.CONFIG.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.CONFIG.html",
    "title": "Class MAGIC.CONFIG | Super Plant BroZ",
    "summary": "Class MAGIC.CONFIG Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.CONFIG Inheritance object MAGIC.CONFIG Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CONTENT public static string CONTENT { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.DIRECTION.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.DIRECTION.html",
    "title": "Class MAGIC.DIRECTION | Super Plant BroZ",
    "summary": "Class MAGIC.DIRECTION Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.DIRECTION Inheritance object MAGIC.DIRECTION Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DOWN public static string DOWN { get; } Property Value string LEFT public static string LEFT { get; } Property Value string RIGHT public static string RIGHT { get; } Property Value string UP public static string UP { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.GAMEPAD.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.GAMEPAD.html",
    "title": "Class MAGIC.GAMEPAD | Super Plant BroZ",
    "summary": "Class MAGIC.GAMEPAD Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.GAMEPAD Inheritance object MAGIC.GAMEPAD Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ACCEPTS_ALL public static string ACCEPTS_ALL { get; } Property Value string PLAYER_FOUR public static string PLAYER_FOUR { get; } Property Value string PLAYER_ONE public static string PLAYER_ONE { get; } Property Value string PLAYER_THREE public static string PLAYER_THREE { get; } Property Value string PLAYER_TWO public static string PLAYER_TWO { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.JSON_PARSING.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.JSON_PARSING.html",
    "title": "Class MAGIC.JSON_PARSING | Super Plant BroZ",
    "summary": "Class MAGIC.JSON_PARSING Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.JSON_PARSING Inheritance object MAGIC.JSON_PARSING Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ACTIONS public static string ACTIONS { get; } Property Value string LEVEL_ELEMENTS public static string LEVEL_ELEMENTS { get; } Property Value string STATES public static string STATES { get; } Property Value string X public static string X { get; } Property Value string Y public static string Y { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.LEVEL.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.LEVEL.html",
    "title": "Class MAGIC.LEVEL | Super Plant BroZ",
    "summary": "Class MAGIC.LEVEL Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.LEVEL Inheritance object MAGIC.LEVEL Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AI public static string AI { get; } Property Value string BACKGROUND public static string BACKGROUND { get; } Property Value string DAY_LEVEL public static string DAY_LEVEL { get; } Property Value string DAY_LEVEL_ARENA public static string DAY_LEVEL_ARENA { get; } Property Value string GRID public static string GRID { get; } Property Value string ITEMS public static string ITEMS { get; } Property Value string NIGHT_LEVEL public static string NIGHT_LEVEL { get; } Property Value string NIGHT_LEVEL_ARENA public static string NIGHT_LEVEL_ARENA { get; } Property Value string NIGHT_ROOF public static string NIGHT_ROOF { get; } Property Value string PLATFORMS public static string PLATFORMS { get; } Property Value string PLAYERS public static string PLAYERS { get; } Property Value string PVZ_LEVEL public static string PVZ_LEVEL { get; } Property Value string ROOF_LEVEL public static string ROOF_LEVEL { get; } Property Value string TEST_LEVEL public static string TEST_LEVEL { get; } Property Value string UI public static string UI { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.METHODTYPES.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.METHODTYPES.html",
    "title": "Class MAGIC.METHODTYPES | Super Plant BroZ",
    "summary": "Class MAGIC.METHODTYPES Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.METHODTYPES Inheritance object MAGIC.METHODTYPES Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GET public static string GET { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.SOUND.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.SOUND.html",
    "title": "Class MAGIC.SOUND | Super Plant BroZ",
    "summary": "Class MAGIC.SOUND Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.SOUND Inheritance object MAGIC.SOUND Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BATTLE_MUSIC public static string BATTLE_MUSIC { get; } Property Value string BLOCK public static string BLOCK { get; } Property Value string CURSOR_SELECT public static string CURSOR_SELECT { get; } Property Value string DEATH public static string DEATH { get; } Property Value string ERROR public static string ERROR { get; } Property Value string GAMEOVER public static string GAMEOVER { get; } Property Value string GRAB public static string GRAB { get; } Property Value string ITEM_PICK_UP public static string ITEM_PICK_UP { get; } Property Value string JUMP public static string JUMP { get; } Property Value string MAX_VOL public static float MAX_VOL { get; } Property Value float MENU public static string MENU { get; } Property Value string MIN_VOL public static float MIN_VOL { get; } Property Value float MOVE_CURSOR public static string MOVE_CURSOR { get; } Property Value string MUSIC_TRACK public static string MUSIC_TRACK { get; } Property Value string MUSIC_VOLUME public static float MUSIC_VOLUME { get; } Property Value float POP public static string POP { get; } Property Value string PUNCH public static string PUNCH { get; } Property Value string SFX_VOLUME public static float SFX_VOLUME { get; } Property Value float SHOOT public static string SHOOT { get; } Property Value string VOLUME_UNIT public static float VOLUME_UNIT { get; } Property Value float"
  },
  "api/ECS.Core.Utilities.MAGIC.SPAWNED.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.SPAWNED.html",
    "title": "Class MAGIC.SPAWNED | Super Plant BroZ",
    "summary": "Class MAGIC.SPAWNED Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.SPAWNED Inheritance object MAGIC.SPAWNED Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DOWN_PEA public static string DOWN_PEA { get; } Property Value string IMP public static string IMP { get; } Property Value string MORTAR_PEA public static string MORTAR_PEA { get; } Property Value string PEA public static string PEA { get; } Property Value string PLAYER public static string PLAYER { get; } Property Value string PROJECTILE public static string PROJECTILE { get; } Property Value string PVZ_EAT public static string PVZ_EAT { get; } Property Value string PVZ_PEA public static string PVZ_PEA { get; } Property Value string PVZ_ZOMBIE public static string PVZ_ZOMBIE { get; } Property Value string SPLAT_PEA public static string SPLAT_PEA { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.UTILS.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.UTILS.html",
    "title": "Class MAGIC.UTILS | Super Plant BroZ",
    "summary": "Class MAGIC.UTILS Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.UTILS Inheritance object MAGIC.UTILS Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ENTITY public static string ENTITY { get; } Property Value string GETPOOL public static string GETPOOL { get; } Property Value string SET public static string SET { get; } Property Value string VALUE public static string VALUE { get; } Property Value string WORLD public static string WORLD { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.WIN_SCREEN.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.WIN_SCREEN.html",
    "title": "Class MAGIC.WIN_SCREEN | Super Plant BroZ",
    "summary": "Class MAGIC.WIN_SCREEN Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC.WIN_SCREEN Inheritance object MAGIC.WIN_SCREEN Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BACKGROUND public static string BACKGROUND { get; } Property Value string BACKGROUND_SCALE public static Vector2 BACKGROUND_SCALE { get; } Property Value Vector2 LOOK_FOR public static float LOOK_FOR { get; } Property Value float TEXT public static string TEXT { get; } Property Value string"
  },
  "api/ECS.Core.Utilities.MAGIC.html": {
    "href": "api/ECS.Core.Utilities.MAGIC.html",
    "title": "Class MAGIC | Super Plant BroZ",
    "summary": "Class MAGIC Namespace ECS.Core.Utilities Assembly ECS.dll public static class MAGIC Inheritance object MAGIC Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ECS.Core.Utilities.PolygonTools.html": {
    "href": "api/ECS.Core.Utilities.PolygonTools.html",
    "title": "Class PolygonTools | Super Plant BroZ",
    "summary": "Class PolygonTools Namespace ECS.Core.Utilities Assembly ECS.dll public static class PolygonTools Inheritance object PolygonTools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetPolygonCenter(Vector2[]) Calculates the center point of a polygon. public static Vector2 GetPolygonCenter(Vector2[] vertices) Parameters vertices Vector2[] Array of polygon vertices. Returns Vector2 Center point of the polygon. GetTransformedVertices(Entity, Polygon, Position, Scale) Transforms polygon vertices from local space to world space, accounting for entity scale and position. public static Vector2[] GetTransformedVertices(Entity entity, Polygon polygon, Position pos, Scale scale = default) Parameters entity Entity The entity the polygon belongs to. polygon Polygon The polygon whose vertices to transform. pos Position The entity's position component. scale Scale The entity's scale component (optional). Returns Vector2[] Array of transformed vertices in world space. ProjectPolygon(Vector2[], Vector2) Projects a polygon onto an axis and returns the min/max points of projection. public static (float X, float Y) ProjectPolygon(Vector2[] vertices, Vector2 axis) Parameters vertices Vector2[] Vertices of the polygon to project. axis Vector2 Axis to project onto. Returns (float X, float Y) Tuple containing min and max points of projection."
  },
  "api/ECS.Core.Utilities.UICoordinateHelper.html": {
    "href": "api/ECS.Core.Utilities.UICoordinateHelper.html",
    "title": "Class UICoordinateHelper | Super Plant BroZ",
    "summary": "Class UICoordinateHelper Namespace ECS.Core.Utilities Assembly ECS.dll Helper class for transforming between screen space and world space for UI elements public static class UICoordinateHelper Inheritance object UICoordinateHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ScreenToWorld(Vector2, CameraManager) Transforms screen coordinates to world coordinates using the inverse camera matrix public static Vector2 ScreenToWorld(Vector2 screenPosition, CameraManager cameraManager) Parameters screenPosition Vector2 cameraManager CameraManager Returns Vector2 WorldToScreen(Vector2, CameraManager) Transforms world coordinates to screen coordinates using the camera matrix public static Vector2 WorldToScreen(Vector2 worldPosition, CameraManager cameraManager) Parameters worldPosition Vector2 cameraManager CameraManager Returns Vector2"
  },
  "api/ECS.Core.Utilities.html": {
    "href": "api/ECS.Core.Utilities.html",
    "title": "Namespace ECS.Core.Utilities | Super Plant BroZ",
    "summary": "Namespace ECS.Core.Utilities Classes AssetConfig AssetEntry EntityRegistration EntityUtils GameStateHelper MAGIC MAGIC.ACTIONS MAGIC.ANIMATIONSTATE MAGIC.ASSETKEY MAGIC.ATTACK MAGIC.CHARACTERS MAGIC.CONFIG MAGIC.DIRECTION MAGIC.GAMEPAD MAGIC.JSON_PARSING MAGIC.LEVEL MAGIC.METHODTYPES MAGIC.SOUND MAGIC.SPAWNED MAGIC.UTILS MAGIC.WIN_SCREEN PolygonTools UICoordinateHelper Helper class for transforming between screen space and world space for UI elements"
  },
  "api/ECS.Core.World.html": {
    "href": "api/ECS.Core.World.html",
    "title": "Class World | Super Plant BroZ",
    "summary": "Class World Namespace ECS.Core Assembly ECS.dll public class World Inheritance object World Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors World() public World() Fields componentPools private readonly Dictionary<Type, IComponentPool> componentPools Field Value Dictionary<Type, IComponentPool> entities private readonly HashSet<Entity> entities Field Value HashSet<Entity> entitiesToDestroy private readonly HashSet<Entity> entitiesToDestroy Field Value HashSet<Entity> nextEntityId private int nextEntityId Field Value int recycledEntityIds private readonly Stack<int> recycledEntityIds Field Value Stack<int> scaledGameTime private GameTime scaledGameTime Field Value GameTime systemManager private readonly SystemManager systemManager Field Value SystemManager timeScale private float timeScale Field Value float Properties EventBus public EventBus EventBus { get; } Property Value EventBus ProfilingEnabled public bool ProfilingEnabled { get; set; } Property Value bool entityFactory public EntityFactory entityFactory { get; } Property Value EntityFactory Methods AddSystem(ISystem, SystemExecutionPhase, int) public void AddSystem(ISystem system, SystemExecutionPhase phase, int priority = 0) Parameters system ISystem phase SystemExecutionPhase priority int CreateEntity() public Entity CreateEntity() Returns Entity DestroyEntity(Entity) public void DestroyEntity(Entity entity) Parameters entity Entity Draw(GameTime, GraphicsManager) public void Draw(GameTime gameTime, GraphicsManager graphicsManager) Parameters gameTime GameTime graphicsManager GraphicsManager GetEntities() public HashSet<Entity> GetEntities() Returns HashSet<Entity> GetEntityById(int) public Entity GetEntityById(int id) Parameters id int Returns Entity GetEntityComponents(Entity) public Dictionary<Type, object> GetEntityComponents(Entity entity) Parameters entity Entity Returns Dictionary<Type, object> GetPool<T>() public ComponentPool<T> GetPool<T>() where T : struct Returns ComponentPool<T> Type Parameters T GetScaledGameTime(GameTime) public GameTime GetScaledGameTime(GameTime originalTime) Parameters originalTime GameTime Returns GameTime GetTimeScale() public float GetTimeScale() Returns float ProcessEntityDestructions() private void ProcessEntityDestructions() SetTimeScale(float) internal void SetTimeScale(float scale) Parameters scale float Update(GameTime) public void Update(GameTime gameTime) Parameters gameTime GameTime"
  },
  "api/ECS.Core.html": {
    "href": "api/ECS.Core.html",
    "title": "Namespace ECS.Core | Super Plant BroZ",
    "summary": "Namespace ECS.Core Namespaces ECS.Core.Debug ECS.Core.Utilities Classes AssetLoader AssetManager CameraManager Manages camera state and transformations for the game ComponentPool<T> EntityAssetKey EntityFactory EntityRegistry EventBus The event bus, a central system for managing event publication and subscription. Any subscriber to the type will recieve the published event. Each Action handles an event of type IEvent. GameAssets GameInitializer GameStateManager GraphicsManager LevelLoader SoundManager SystemBase SystemBuilder SystemInfo SystemManager World Structs Entity Interfaces IComponentPool ISystem Enums SystemExecutionPhase Delegates GraphicsManager.WindowResizedHandler LevelLoader.MakeEntity"
  },
  "api/ECS.Events.ActionEvent.html": {
    "href": "api/ECS.Events.ActionEvent.html",
    "title": "Struct ActionEvent | Super Plant BroZ",
    "summary": "Struct ActionEvent Namespace ECS.Events Assembly ECS.dll public struct ActionEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ActionName public string ActionName Field Value string Entity public Entity Entity Field Value Entity IsEnded public bool IsEnded Field Value bool IsHeld public bool IsHeld Field Value bool IsStarted public bool IsStarted Field Value bool"
  },
  "api/ECS.Events.AnimationStateEvent.html": {
    "href": "api/ECS.Events.AnimationStateEvent.html",
    "title": "Struct AnimationStateEvent | Super Plant BroZ",
    "summary": "Struct AnimationStateEvent Namespace ECS.Events Assembly ECS.dll public struct AnimationStateEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity NewState public string NewState Field Value string"
  },
  "api/ECS.Events.AttackActionEvent.html": {
    "href": "api/ECS.Events.AttackActionEvent.html",
    "title": "Struct AttackActionEvent | Super Plant BroZ",
    "summary": "Struct AttackActionEvent Namespace ECS.Events Assembly ECS.dll public struct AttackActionEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Direction public AttackDirection Direction Field Value AttackDirection Entity public Entity Entity Field Value Entity Type public AttackType Type Field Value AttackType"
  },
  "api/ECS.Events.CollisionEvent.html": {
    "href": "api/ECS.Events.CollisionEvent.html",
    "title": "Struct CollisionEvent | Super Plant BroZ",
    "summary": "Struct CollisionEvent Namespace ECS.Events Assembly ECS.dll public struct CollisionEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Contact public Contact Contact Field Value Contact EventType public CollisionEventType EventType Field Value CollisionEventType"
  },
  "api/ECS.Events.CollisionEventType.html": {
    "href": "api/ECS.Events.CollisionEventType.html",
    "title": "Enum CollisionEventType | Super Plant BroZ",
    "summary": "Enum CollisionEventType Namespace ECS.Events Assembly ECS.dll public enum CollisionEventType Fields Begin = 0 End = 2 Stay = 1"
  },
  "api/ECS.Events.DespawnEvent.html": {
    "href": "api/ECS.Events.DespawnEvent.html",
    "title": "Struct DespawnEvent | Super Plant BroZ",
    "summary": "Struct DespawnEvent Namespace ECS.Events Assembly ECS.dll public struct DespawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.GameExitEvent.html": {
    "href": "api/ECS.Events.GameExitEvent.html",
    "title": "Struct GameExitEvent | Super Plant BroZ",
    "summary": "Struct GameExitEvent Namespace ECS.Events Assembly ECS.dll public struct GameExitEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.HitEvent.html": {
    "href": "api/ECS.Events.HitEvent.html",
    "title": "Struct HitEvent | Super Plant BroZ",
    "summary": "Struct HitEvent Namespace ECS.Events Assembly ECS.dll public struct HitEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Attacker public Entity Attacker Field Value Entity ContactPoint public Vector2 ContactPoint Field Value Vector2 Damage public int Damage Field Value int Knockback public float Knockback Field Value float StunDuration public float StunDuration Field Value float Target public Entity Target Field Value Entity"
  },
  "api/ECS.Events.HitboxSpawnEvent.html": {
    "href": "api/ECS.Events.HitboxSpawnEvent.html",
    "title": "Struct HitboxSpawnEvent | Super Plant BroZ",
    "summary": "Struct HitboxSpawnEvent Namespace ECS.Events Assembly ECS.dll public struct HitboxSpawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.IEvent.html": {
    "href": "api/ECS.Events.IEvent.html",
    "title": "Interface IEvent | Super Plant BroZ",
    "summary": "Interface IEvent Namespace ECS.Events Assembly ECS.dll public interface IEvent"
  },
  "api/ECS.Events.ItemPickupEvent.html": {
    "href": "api/ECS.Events.ItemPickupEvent.html",
    "title": "Struct ItemPickupEvent | Super Plant BroZ",
    "summary": "Struct ItemPickupEvent Namespace ECS.Events Assembly ECS.dll public struct ItemPickupEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ItemPickupEvent(Entity, Item, Entity) public ItemPickupEvent(Entity player, Item item, Entity itemEntity) Parameters player Entity item Item itemEntity Entity Fields Item public Item Item Field Value Item ItemEntity public Entity ItemEntity Field Value Entity Player public Entity Player Field Value Entity"
  },
  "api/ECS.Events.LevelSwitchEvent.html": {
    "href": "api/ECS.Events.LevelSwitchEvent.html",
    "title": "Struct LevelSwitchEvent | Super Plant BroZ",
    "summary": "Struct LevelSwitchEvent Namespace ECS.Events Assembly ECS.dll public struct LevelSwitchEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Level public string Level Field Value string"
  },
  "api/ECS.Events.LifeLossEvent.html": {
    "href": "api/ECS.Events.LifeLossEvent.html",
    "title": "Struct LifeLossEvent | Super Plant BroZ",
    "summary": "Struct LifeLossEvent Namespace ECS.Events Assembly ECS.dll public struct LifeLossEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.PlayerStateEvent.html": {
    "href": "api/ECS.Events.PlayerStateEvent.html",
    "title": "Struct PlayerStateEvent | Super Plant BroZ",
    "summary": "Struct PlayerStateEvent Namespace ECS.Events Assembly ECS.dll public struct PlayerStateEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Duration public float? Duration Field Value float? Entity public Entity Entity Field Value Entity Force public bool Force Field Value bool RequestedState public PlayerState RequestedState Field Value PlayerState"
  },
  "api/ECS.Events.ProjectileDespawnEvent.html": {
    "href": "api/ECS.Events.ProjectileDespawnEvent.html",
    "title": "Struct ProjectileDespawnEvent | Super Plant BroZ",
    "summary": "Struct ProjectileDespawnEvent Namespace ECS.Events Assembly ECS.dll public struct ProjectileDespawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields World public World World Field Value World hitPoint public Vector2 hitPoint Field Value Vector2 type public string type Field Value string"
  },
  "api/ECS.Events.ProjectileHitEvent.html": {
    "href": "api/ECS.Events.ProjectileHitEvent.html",
    "title": "Struct ProjectileHitEvent | Super Plant BroZ",
    "summary": "Struct ProjectileHitEvent Namespace ECS.Events Assembly ECS.dll public struct ProjectileHitEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Attacker public Entity Attacker Field Value Entity Target public Entity Target Field Value Entity"
  },
  "api/ECS.Events.ProjectileSpawnEvent.html": {
    "href": "api/ECS.Events.ProjectileSpawnEvent.html",
    "title": "Struct ProjectileSpawnEvent | Super Plant BroZ",
    "summary": "Struct ProjectileSpawnEvent Namespace ECS.Events Assembly ECS.dll public struct ProjectileSpawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity World public World World Field Value World typeSpawned public string typeSpawned Field Value string"
  },
  "api/ECS.Events.PunchHitEvent.html": {
    "href": "api/ECS.Events.PunchHitEvent.html",
    "title": "Struct PunchHitEvent | Super Plant BroZ",
    "summary": "Struct PunchHitEvent Namespace ECS.Events Assembly ECS.dll public struct PunchHitEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Attacker public Entity Attacker Field Value Entity Target public Entity Target Field Value Entity"
  },
  "api/ECS.Events.PvZDeathEvent.html": {
    "href": "api/ECS.Events.PvZDeathEvent.html",
    "title": "Struct PvZDeathEvent | Super Plant BroZ",
    "summary": "Struct PvZDeathEvent Namespace ECS.Events Assembly ECS.dll public struct PvZDeathEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity Grid public Entity Grid Field Value Entity"
  },
  "api/ECS.Events.PvZSpawnEvent.html": {
    "href": "api/ECS.Events.PvZSpawnEvent.html",
    "title": "Struct PvZSpawnEvent | Super Plant BroZ",
    "summary": "Struct PvZSpawnEvent Namespace ECS.Events Assembly ECS.dll public struct PvZSpawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity Grid public Entity Grid Field Value Entity GridAssigned public bool GridAssigned Field Value bool spawnPosition public Vector2 spawnPosition Field Value Vector2 typeSpawned public string typeSpawned Field Value string"
  },
  "api/ECS.Events.RawInputEvent.html": {
    "href": "api/ECS.Events.RawInputEvent.html",
    "title": "Struct RawInputEvent | Super Plant BroZ",
    "summary": "Struct RawInputEvent Namespace ECS.Events Assembly ECS.dll public struct RawInputEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity IsGamepadInput public bool IsGamepadInput Field Value bool IsJoystickInput public bool IsJoystickInput Field Value bool IsPressed public bool IsPressed Field Value bool IsTriggerInput public bool IsTriggerInput Field Value bool JoystickDirection public JoystickDirection? JoystickDirection Field Value JoystickDirection? JoystickType public JoystickType? JoystickType Field Value JoystickType? JoystickValue public Vector2? JoystickValue Field Value Vector2? Player public PlayerIndex Player Field Value PlayerIndex RawButton public Buttons? RawButton Field Value Buttons? RawKey public Keys? RawKey Field Value Keys? TriggerType public TriggerType? TriggerType Field Value TriggerType? TriggerValue public float? TriggerValue Field Value float?"
  },
  "api/ECS.Events.SoundEvent.html": {
    "href": "api/ECS.Events.SoundEvent.html",
    "title": "Struct SoundEvent | Super Plant BroZ",
    "summary": "Struct SoundEvent Namespace ECS.Events Assembly ECS.dll public struct SoundEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields SoundKey public string SoundKey Field Value string isMusic public bool isMusic Field Value bool"
  },
  "api/ECS.Events.SpawnEvent.html": {
    "href": "api/ECS.Events.SpawnEvent.html",
    "title": "Struct SpawnEvent | Super Plant BroZ",
    "summary": "Struct SpawnEvent Namespace ECS.Events Assembly ECS.dll public struct SpawnEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity World public World World Field Value World typeSpawned public string typeSpawned Field Value string"
  },
  "api/ECS.Events.TerminalCommandEvent.html": {
    "href": "api/ECS.Events.TerminalCommandEvent.html",
    "title": "Struct TerminalCommandEvent | Super Plant BroZ",
    "summary": "Struct TerminalCommandEvent Namespace ECS.Events Assembly ECS.dll public struct TerminalCommandEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Args public string[] Args Field Value string[] Command public string Command Field Value string Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.TerminalToggleEvent.html": {
    "href": "api/ECS.Events.TerminalToggleEvent.html",
    "title": "Struct TerminalToggleEvent | Super Plant BroZ",
    "summary": "Struct TerminalToggleEvent Namespace ECS.Events Assembly ECS.dll public struct TerminalToggleEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.TimerEvent.html": {
    "href": "api/ECS.Events.TimerEvent.html",
    "title": "Struct TimerEvent | Super Plant BroZ",
    "summary": "Struct TimerEvent Namespace ECS.Events Assembly ECS.dll public struct TimerEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity TimerType public TimerType TimerType Field Value TimerType"
  },
  "api/ECS.Events.TouchedGroundEvent.html": {
    "href": "api/ECS.Events.TouchedGroundEvent.html",
    "title": "Struct TouchedGroundEvent | Super Plant BroZ",
    "summary": "Struct TouchedGroundEvent Namespace ECS.Events Assembly ECS.dll public struct TouchedGroundEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity"
  },
  "api/ECS.Events.UpdateTimerEvent.html": {
    "href": "api/ECS.Events.UpdateTimerEvent.html",
    "title": "Struct UpdateTimerEvent | Super Plant BroZ",
    "summary": "Struct UpdateTimerEvent Namespace ECS.Events Assembly ECS.dll public struct UpdateTimerEvent : IEvent Implements IEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Entity public Entity Entity Field Value Entity Timer public Timer Timer Field Value Timer Type public TimerType Type Field Value TimerType"
  },
  "api/ECS.Events.html": {
    "href": "api/ECS.Events.html",
    "title": "Namespace ECS.Events | Super Plant BroZ",
    "summary": "Namespace ECS.Events Structs ActionEvent AnimationStateEvent AttackActionEvent CollisionEvent DespawnEvent GameExitEvent HitEvent HitboxSpawnEvent ItemPickupEvent LevelSwitchEvent LifeLossEvent PlayerStateEvent ProjectileDespawnEvent ProjectileHitEvent ProjectileSpawnEvent PunchHitEvent PvZDeathEvent PvZSpawnEvent RawInputEvent SoundEvent SpawnEvent TerminalCommandEvent TerminalToggleEvent TimerEvent TouchedGroundEvent UpdateTimerEvent Interfaces IEvent Enums CollisionEventType"
  },
  "api/ECS.Game1.html": {
    "href": "api/ECS.Game1.html",
    "title": "Class Game1 | Super Plant BroZ",
    "summary": "Class Game1 Namespace ECS Assembly ECS.dll public class Game1 : Game, IDisposable Inheritance object Game Game1 Implements IDisposable Inherited Members Game.Dispose() Game.Dispose(bool) Game.Exit() Game.ResetElapsedTime() Game.SuppressDraw() Game.RunOneFrame() Game.Run() Game.Run(GameRunBehavior) Game.Tick() Game.BeginDraw() Game.EndDraw() Game.BeginRun() Game.EndRun() Game.UnloadContent() Game.OnExiting(object, EventArgs) Game.OnActivated(object, EventArgs) Game.OnDeactivated(object, EventArgs) Game.LaunchParameters Game.Components Game.InactiveSleepTime Game.MaxElapsedTime Game.IsActive Game.IsMouseVisible Game.TargetElapsedTime Game.IsFixedTimeStep Game.Services Game.Content Game.GraphicsDevice Game.Window Game.Activated Game.Deactivated Game.Disposed Game.Exiting object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Game1() public Game1() Fields assets private GameAssets assets Field Value GameAssets gameStateManager private GameStateManager gameStateManager Field Value GameStateManager graphicsManager private GraphicsManager graphicsManager Field Value GraphicsManager levelLoader private LevelLoader levelLoader Field Value LevelLoader soundManager private SoundManager soundManager Field Value SoundManager world private World world Field Value World Methods Draw(GameTime) protected override void Draw(GameTime gameTime) Parameters gameTime GameTime Initialize() protected override void Initialize() LoadContent() protected override void LoadContent() Update(GameTime) protected override void Update(GameTime gameTime) Parameters gameTime GameTime"
  },
  "api/ECS.Program.html": {
    "href": "api/ECS.Program.html",
    "title": "Class Program | Super Plant BroZ",
    "summary": "Class Program Namespace ECS Assembly ECS.dll public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/ECS.Resources.AssetConfigLoader.html": {
    "href": "api/ECS.Resources.AssetConfigLoader.html",
    "title": "Class AssetConfigLoader | Super Plant BroZ",
    "summary": "Class AssetConfigLoader Namespace ECS.Resources Assembly ECS.dll public class AssetConfigLoader : JsonLoaderBase<AssetConfig>, IJsonLoader<AssetConfig> Inheritance object JsonLoaderBase<AssetConfig> AssetConfigLoader Implements IJsonLoader<AssetConfig> Inherited Members JsonLoaderBase<AssetConfig>.DefaultOptions JsonLoaderBase<AssetConfig>.LoadFromJson(string) JsonLoaderBase<AssetConfig>.LoadFromFile(string) JsonLoaderBase<AssetConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<AssetConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LoadConfig(string) public static AssetConfig LoadConfig(string filePath) Parameters filePath string Returns AssetConfig ParseJson(string) protected override AssetConfig ParseJson(string jsonContent) Parameters jsonContent string Returns AssetConfig"
  },
  "api/ECS.Resources.ColorJsonConverter.html": {
    "href": "api/ECS.Resources.ColorJsonConverter.html",
    "title": "Class ColorJsonConverter | Super Plant BroZ",
    "summary": "Class ColorJsonConverter Namespace ECS.Resources Assembly ECS.dll public class ColorJsonConverter : JsonConverter<Color> Inheritance object JsonConverter JsonConverter<Color> ColorJsonConverter Inherited Members JsonConverter<Color>.CanConvert(Type) JsonConverter<Color>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Color>.WriteAsPropertyName(Utf8JsonWriter, Color, JsonSerializerOptions) JsonConverter<Color>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type Microsoft.Xna.Framework.Color. public override Color Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns Color The converted value. Write(Utf8JsonWriter, Color, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, Color value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value Color The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ECS.Resources.EntityConfig.html": {
    "href": "api/ECS.Resources.EntityConfig.html",
    "title": "Class EntityConfig | Super Plant BroZ",
    "summary": "Class EntityConfig Namespace ECS.Resources Assembly ECS.dll public class EntityConfig Inheritance object EntityConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Assets public Dictionary<string, string> Assets { get; set; } Property Value Dictionary<string, string> Components public Dictionary<Type, object> Components { get; } Property Value Dictionary<Type, object>"
  },
  "api/ECS.Resources.EntityConfigLoader.html": {
    "href": "api/ECS.Resources.EntityConfigLoader.html",
    "title": "Class EntityConfigLoader | Super Plant BroZ",
    "summary": "Class EntityConfigLoader Namespace ECS.Resources Assembly ECS.dll public class EntityConfigLoader : JsonLoaderBase<EntityConfig>, IJsonLoader<EntityConfig> Inheritance object JsonLoaderBase<EntityConfig> EntityConfigLoader Implements IJsonLoader<EntityConfig> Inherited Members JsonLoaderBase<EntityConfig>.DefaultOptions JsonLoaderBase<EntityConfig>.LoadFromJson(string) JsonLoaderBase<EntityConfig>.LoadFromFile(string) JsonLoaderBase<EntityConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<EntityConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ComponentTypes private static readonly Dictionary<string, Type> ComponentTypes Field Value Dictionary<string, Type> Methods ParseJson(string) protected override EntityConfig ParseJson(string jsonContent) Parameters jsonContent string Returns EntityConfig"
  },
  "api/ECS.Resources.IJsonLoader-1.html": {
    "href": "api/ECS.Resources.IJsonLoader-1.html",
    "title": "Interface IJsonLoader<T> | Super Plant BroZ",
    "summary": "Interface IJsonLoader<T> Namespace ECS.Resources Assembly ECS.dll public interface IJsonLoader<T> Type Parameters T Methods LoadFromFile(string) T LoadFromFile(string filePath) Parameters filePath string Returns T LoadFromJson(string) T LoadFromJson(string jsonContent) Parameters jsonContent string Returns T"
  },
  "api/ECS.Resources.InputConfigLoader.InputActionJson.html": {
    "href": "api/ECS.Resources.InputConfigLoader.InputActionJson.html",
    "title": "Class InputConfigLoader.InputActionJson | Super Plant BroZ",
    "summary": "Class InputConfigLoader.InputActionJson Namespace ECS.Resources Assembly ECS.dll private class InputConfigLoader.InputActionJson Inheritance object InputConfigLoader.InputActionJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Buttons public List<string> Buttons { get; set; } Property Value List<string> JoystickInput public List<InputConfigLoader.JoystickInputJson> JoystickInput { get; set; } Property Value List<InputConfigLoader.JoystickInputJson> Keys public List<string> Keys { get; set; } Property Value List<string> Triggers public List<string> Triggers { get; set; } Property Value List<string>"
  },
  "api/ECS.Resources.InputConfigLoader.InputConfigJson.html": {
    "href": "api/ECS.Resources.InputConfigLoader.InputConfigJson.html",
    "title": "Class InputConfigLoader.InputConfigJson | Super Plant BroZ",
    "summary": "Class InputConfigLoader.InputConfigJson Namespace ECS.Resources Assembly ECS.dll private class InputConfigLoader.InputConfigJson Inheritance object InputConfigLoader.InputConfigJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actions public Dictionary<string, InputConfigLoader.InputActionJson> Actions { get; set; } Property Value Dictionary<string, InputConfigLoader.InputActionJson>"
  },
  "api/ECS.Resources.InputConfigLoader.JoystickInputJson.html": {
    "href": "api/ECS.Resources.InputConfigLoader.JoystickInputJson.html",
    "title": "Class InputConfigLoader.JoystickInputJson | Super Plant BroZ",
    "summary": "Class InputConfigLoader.JoystickInputJson Namespace ECS.Resources Assembly ECS.dll private class InputConfigLoader.JoystickInputJson Inheritance object InputConfigLoader.JoystickInputJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties JoystickDirection public string JoystickDirection { get; set; } Property Value string JoystickThreshold public float JoystickThreshold { get; set; } Property Value float JoystickType public string JoystickType { get; set; } Property Value string"
  },
  "api/ECS.Resources.InputConfigLoader.html": {
    "href": "api/ECS.Resources.InputConfigLoader.html",
    "title": "Class InputConfigLoader | Super Plant BroZ",
    "summary": "Class InputConfigLoader Namespace ECS.Resources Assembly ECS.dll public class InputConfigLoader : JsonLoaderBase<InputConfig>, IJsonLoader<InputConfig> Inheritance object JsonLoaderBase<InputConfig> InputConfigLoader Implements IJsonLoader<InputConfig> Inherited Members JsonLoaderBase<InputConfig>.DefaultOptions JsonLoaderBase<InputConfig>.LoadFromJson(string) JsonLoaderBase<InputConfig>.LoadFromFile(string) JsonLoaderBase<InputConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<InputConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseJson(string) protected override InputConfig ParseJson(string jsonContent) Parameters jsonContent string Returns InputConfig"
  },
  "api/ECS.Resources.JsonLoaderBase-1.html": {
    "href": "api/ECS.Resources.JsonLoaderBase-1.html",
    "title": "Class JsonLoaderBase<T> | Super Plant BroZ",
    "summary": "Class JsonLoaderBase<T> Namespace ECS.Resources Assembly ECS.dll public abstract class JsonLoaderBase<T> : IJsonLoader<T> Type Parameters T Inheritance object JsonLoaderBase<T> Implements IJsonLoader<T> Derived AssetConfigLoader EntityConfigLoader InputConfigLoader MapConfigLoader SpriteSheetLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultOptions protected static readonly JsonSerializerOptions DefaultOptions Field Value JsonSerializerOptions Methods GetOptionalValue<TValue>(JsonElement, string, TValue) protected TValue GetOptionalValue<TValue>(JsonElement element, string propertyName, TValue defaultValue) Parameters element JsonElement propertyName string defaultValue TValue Returns TValue Type Parameters TValue GetRequiredValue<TValue>(JsonElement, string) protected TValue GetRequiredValue<TValue>(JsonElement element, string propertyName) Parameters element JsonElement propertyName string Returns TValue Type Parameters TValue LoadFromFile(string) public T LoadFromFile(string filePath) Parameters filePath string Returns T LoadFromJson(string) public T LoadFromJson(string jsonContent) Parameters jsonContent string Returns T ParseJson(string) protected abstract T ParseJson(string jsonContent) Parameters jsonContent string Returns T"
  },
  "api/ECS.Resources.MapConfigLoader.InputActionJson.html": {
    "href": "api/ECS.Resources.MapConfigLoader.InputActionJson.html",
    "title": "Class MapConfigLoader.InputActionJson | Super Plant BroZ",
    "summary": "Class MapConfigLoader.InputActionJson Namespace ECS.Resources Assembly ECS.dll private class MapConfigLoader.InputActionJson Inheritance object MapConfigLoader.InputActionJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Keys public List<string> Keys { get; set; } Property Value List<string>"
  },
  "api/ECS.Resources.MapConfigLoader.InputConfigJson.html": {
    "href": "api/ECS.Resources.MapConfigLoader.InputConfigJson.html",
    "title": "Class MapConfigLoader.InputConfigJson | Super Plant BroZ",
    "summary": "Class MapConfigLoader.InputConfigJson Namespace ECS.Resources Assembly ECS.dll private class MapConfigLoader.InputConfigJson Inheritance object MapConfigLoader.InputConfigJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actions public Dictionary<string, MapConfigLoader.InputActionJson> Actions { get; set; } Property Value Dictionary<string, MapConfigLoader.InputActionJson>"
  },
  "api/ECS.Resources.MapConfigLoader.html": {
    "href": "api/ECS.Resources.MapConfigLoader.html",
    "title": "Class MapConfigLoader | Super Plant BroZ",
    "summary": "Class MapConfigLoader Namespace ECS.Resources Assembly ECS.dll public class MapConfigLoader : JsonLoaderBase<MapConfig>, IJsonLoader<MapConfig> Inheritance object JsonLoaderBase<MapConfig> MapConfigLoader Implements IJsonLoader<MapConfig> Inherited Members JsonLoaderBase<MapConfig>.DefaultOptions JsonLoaderBase<MapConfig>.LoadFromJson(string) JsonLoaderBase<MapConfig>.LoadFromFile(string) JsonLoaderBase<MapConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<MapConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseJson(string) protected override MapConfig ParseJson(string jsonContent) Parameters jsonContent string Returns MapConfig"
  },
  "api/ECS.Resources.SpriteSheetLoader.FrameJson.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.FrameJson.html",
    "title": "Class SpriteSheetLoader.FrameJson | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader.FrameJson Namespace ECS.Resources Assembly ECS.dll private class SpriteSheetLoader.FrameJson Inheritance object SpriteSheetLoader.FrameJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration public float Duration { get; set; } Property Value float Height public int Height { get; set; } Property Value int HoldLastFrame public bool? HoldLastFrame { get; set; } Property Value bool? Loop public bool? Loop { get; set; } Property Value bool? Width public int Width { get; set; } Property Value int X public int X { get; set; } Property Value int Y public int Y { get; set; } Property Value int"
  },
  "api/ECS.Resources.SpriteSheetLoader.SpriteSheetJson.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.SpriteSheetJson.html",
    "title": "Class SpriteSheetLoader.SpriteSheetJson | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader.SpriteSheetJson Namespace ECS.Resources Assembly ECS.dll private class SpriteSheetLoader.SpriteSheetJson Inheritance object SpriteSheetLoader.SpriteSheetJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties States public Dictionary<string, SpriteSheetLoader.StateJson> States { get; set; } Property Value Dictionary<string, SpriteSheetLoader.StateJson>"
  },
  "api/ECS.Resources.SpriteSheetLoader.StateJson.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.StateJson.html",
    "title": "Class SpriteSheetLoader.StateJson | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader.StateJson Namespace ECS.Resources Assembly ECS.dll private class SpriteSheetLoader.StateJson Inheritance object SpriteSheetLoader.StateJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Duration public float Duration { get; set; } Property Value float Frames public List<SpriteSheetLoader.FrameJson> Frames { get; set; } Property Value List<SpriteSheetLoader.FrameJson> HoldLastFrame public bool? HoldLastFrame { get; set; } Property Value bool? Loop public bool? Loop { get; set; } Property Value bool?"
  },
  "api/ECS.Resources.SpriteSheetLoader.html": {
    "href": "api/ECS.Resources.SpriteSheetLoader.html",
    "title": "Class SpriteSheetLoader | Super Plant BroZ",
    "summary": "Class SpriteSheetLoader Namespace ECS.Resources Assembly ECS.dll public class SpriteSheetLoader : JsonLoaderBase<AnimationConfig>, IJsonLoader<AnimationConfig> Inheritance object JsonLoaderBase<AnimationConfig> SpriteSheetLoader Implements IJsonLoader<AnimationConfig> Inherited Members JsonLoaderBase<AnimationConfig>.DefaultOptions JsonLoaderBase<AnimationConfig>.LoadFromJson(string) JsonLoaderBase<AnimationConfig>.LoadFromFile(string) JsonLoaderBase<AnimationConfig>.GetRequiredValue<TValue>(JsonElement, string) JsonLoaderBase<AnimationConfig>.GetOptionalValue<TValue>(JsonElement, string, TValue) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSourceRect(AnimationConfig, string) public static Rectangle GetSourceRect(AnimationConfig config, string stateName) Parameters config AnimationConfig stateName string Returns Rectangle ParseJson(string) protected override AnimationConfig ParseJson(string jsonContent) Parameters jsonContent string Returns AnimationConfig"
  },
  "api/ECS.Resources.Vector2JsonConverter.html": {
    "href": "api/ECS.Resources.Vector2JsonConverter.html",
    "title": "Class Vector2JsonConverter | Super Plant BroZ",
    "summary": "Class Vector2JsonConverter Namespace ECS.Resources Assembly ECS.dll public class Vector2JsonConverter : JsonConverter<Vector2> Inheritance object JsonConverter JsonConverter<Vector2> Vector2JsonConverter Inherited Members JsonConverter<Vector2>.CanConvert(Type) JsonConverter<Vector2>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Vector2>.WriteAsPropertyName(Utf8JsonWriter, Vector2, JsonSerializerOptions) JsonConverter<Vector2>.HandleNull object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to type Microsoft.Xna.Framework.Vector2. public override Vector2 Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions An object that specifies serialization options to use. Returns Vector2 The converted value. Write(Utf8JsonWriter, Vector2, JsonSerializerOptions) Writes a specified value as JSON. public override void Write(Utf8JsonWriter writer, Vector2 value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer to write to. value Vector2 The value to convert to JSON. options JsonSerializerOptions An object that specifies serialization options to use."
  },
  "api/ECS.Resources.html": {
    "href": "api/ECS.Resources.html",
    "title": "Namespace ECS.Resources | Super Plant BroZ",
    "summary": "Namespace ECS.Resources Classes AssetConfigLoader ColorJsonConverter EntityConfig EntityConfigLoader InputConfigLoader InputConfigLoader.InputActionJson InputConfigLoader.InputConfigJson InputConfigLoader.JoystickInputJson JsonLoaderBase<T> MapConfigLoader MapConfigLoader.InputActionJson MapConfigLoader.InputConfigJson SpriteSheetLoader SpriteSheetLoader.FrameJson SpriteSheetLoader.SpriteSheetJson SpriteSheetLoader.StateJson Vector2JsonConverter Interfaces IJsonLoader<T>"
  },
  "api/ECS.Systems.AI.AISystem.AIState.html": {
    "href": "api/ECS.Systems.AI.AISystem.AIState.html",
    "title": "Enum AISystem.AIState | Super Plant BroZ",
    "summary": "Enum AISystem.AIState Namespace ECS.Systems.AI Assembly ECS.dll private enum AISystem.AIState Fields Attacking = 3 Defensive = 2 Normal = 0 Recovering = 1"
  },
  "api/ECS.Systems.AI.AISystem.html": {
    "href": "api/ECS.Systems.AI.AISystem.html",
    "title": "Class AISystem | Super Plant BroZ",
    "summary": "Class AISystem Namespace ECS.Systems.AI Assembly ECS.dll public class AISystem : SystemBase, ISystem Inheritance object SystemBase AISystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ACTION_SWITCH_COOLDOWN private const float ACTION_SWITCH_COOLDOWN = 0.5 Field Value float DEFAULT_AI_TIMER_DURATION private const float DEFAULT_AI_TIMER_DURATION = 0.35 Field Value float EDGE_DETECTION_DISTANCE private const float EDGE_DETECTION_DISTANCE = 150 Field Value float JUMP_COOLDOWN private const float JUMP_COOLDOWN = 1.5 Field Value float LEDGE_RAYCAST_DISTANCE private const float LEDGE_RAYCAST_DISTANCE = 120 Field Value float RECOVERY_THRESHOLD private const float RECOVERY_THRESHOLD = 100 Field Value float actionCooldowns private Dictionary<Entity, Dictionary<string, float>> actionCooldowns Field Value Dictionary<Entity, Dictionary<string, float>> actionQueue private Dictionary<Entity, List<string>> actionQueue Field Value Dictionary<Entity, List<string>> actions private Dictionary<int, string> actions Field Value Dictionary<int, string> aiStates private Dictionary<Entity, AISystem.AIState> aiStates Field Value Dictionary<Entity, AISystem.AIState> debugEnabled private bool debugEnabled Field Value bool debugPaths private Dictionary<Entity, List<Vector2>> debugPaths Field Value Dictionary<Entity, List<Vector2>> pathfinding private PhysicsAwarePathfinding pathfinding Field Value PhysicsAwarePathfinding platforms private List<Platform> platforms Field Value List<Platform> recoveryPlans private Dictionary<Entity, RecoveryPlan> recoveryPlans Field Value Dictionary<Entity, RecoveryPlan> stageBounds private Rectangle stageBounds Field Value Rectangle stageDirections private Dictionary<Entity, Vector2> stageDirections Field Value Dictionary<Entity, Vector2> stageFloorY private float stageFloorY Field Value float Methods AnalyzeStage() private void AnalyzeStage() CalculateCollisionBounds(Entity, CollisionBody, Position) private Rectangle CalculateCollisionBounds(Entity entity, CollisionBody body, Position position) Parameters entity Entity body CollisionBody position Position Returns Rectangle ChooseDefensiveAction(Entity, Vector2, Vector2, bool) private string ChooseDefensiveAction(Entity entity, Vector2 position, Vector2 velocity, bool isGrounded) Parameters entity Entity position Vector2 velocity Vector2 isGrounded bool Returns string ChooseNormalAction(Entity, Vector2, Vector2, bool, int) private string ChooseNormalAction(Entity entity, Vector2 position, Vector2 velocity, bool isGrounded, int randomValue) Parameters entity Entity position Vector2 velocity Vector2 isGrounded bool randomValue int Returns string ChooseRecoveryAction(Entity, Vector2, Vector2) private string ChooseRecoveryAction(Entity entity, Vector2 position, Vector2 velocity) Parameters entity Entity position Vector2 velocity Vector2 Returns string DetermineNextAction(Entity, int) private string DetermineNextAction(Entity entity, int randomValue) Parameters entity Entity randomValue int Returns string GetEntityBounds(Entity) private Rectangle GetEntityBounds(Entity entity) Parameters entity Entity Returns Rectangle GetRandomAction(int) private string GetRandomAction(int randomValue) Parameters randomValue int Returns string HandleCollision(IEvent) private void HandleCollision(IEvent evt) Parameters evt IEvent HandleTimerUp(IEvent) private void HandleTimerUp(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World IsActionOnCooldown(Entity, string) private bool IsActionOnCooldown(Entity entity, string actionName) Parameters entity Entity actionName string Returns bool IsNearEdge(Entity, Vector2, Vector2) private bool IsNearEdge(Entity entity, Vector2 position, Vector2 velocity) Parameters entity Entity position Vector2 velocity Vector2 Returns bool IsOffStage(Entity, Vector2) private bool IsOffStage(Entity entity, Vector2 position) Parameters entity Entity position Vector2 Returns bool MappingSetter() private void MappingSetter() SetActionCooldown(Entity, string, float) private void SetActionCooldown(Entity entity, string actionName, float duration) Parameters entity Entity actionName string duration float StartNewAction(Entity, string) private void StartNewAction(Entity entity, string newAction) Parameters entity Entity newAction string StopCurrentAction(Entity, string) private void StopCurrentAction(Entity entity, string currentAction) Parameters entity Entity currentAction string Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdateStageDirection(Entity, Vector2) private void UpdateStageDirection(Entity entity, Vector2 position) Parameters entity Entity position Vector2"
  },
  "api/ECS.Systems.AI.PhysicsAwarePathfinding.html": {
    "href": "api/ECS.Systems.AI.PhysicsAwarePathfinding.html",
    "title": "Class PhysicsAwarePathfinding | Super Plant BroZ",
    "summary": "Class PhysicsAwarePathfinding Namespace ECS.Systems.AI Assembly ECS.dll public class PhysicsAwarePathfinding Inheritance object PhysicsAwarePathfinding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PhysicsAwarePathfinding(World) public PhysicsAwarePathfinding(World world) Parameters world World Fields GRAVITY_ACCELERATION private const float GRAVITY_ACCELERATION = 1000 Field Value float GRID_CELL_SIZE private const int GRID_CELL_SIZE = 32 Field Value int JUMP_FORCE private const float JUMP_FORCE = 700 Field Value float MAX_PATH_LENGTH private const int MAX_PATH_LENGTH = 60 Field Value int MAX_SIMULATION_TIME private const float MAX_SIMULATION_TIME = 3 Field Value float MOVE_FORCE private const float MOVE_FORCE = 300 Field Value float PLATFORM_CLEARANCE private const float PLATFORM_CLEARANCE = 50 Field Value float SIMULATION_STEP private const float SIMULATION_STEP = 0.05 Field Value float collisionGrid private bool[,] collisionGrid Field Value bool[,] gridHeight private int gridHeight Field Value int gridWidth private int gridWidth Field Value int platforms private List<(Entity entity, Rectangle bounds)> platforms Field Value List<(Entity entity, Rectangle bounds)> stageBounds private Rectangle stageBounds Field Value Rectangle world private readonly World world Field Value World Methods CalculateCollisionBounds(Entity, CollisionBody, Position) Calculate bounds from collision body private Rectangle CalculateCollisionBounds(Entity entity, CollisionBody body, Position position) Parameters entity Entity body CollisionBody position Position Returns Rectangle EstimateMaxHeight(float, float) Estimate maximum height a character can reach with current vertical velocity private float EstimateMaxHeight(float currentY, float currentVelY) Parameters currentY float currentVelY float Returns float FindSafePosition(Vector2) Find a safe position on stage for recovery private Vector2 FindSafePosition(Vector2 position) Parameters position Vector2 Returns Vector2 GenerateLevelRepresentation() Generate a representation of the level for pathfinding public void GenerateLevelRepresentation() GetActionsFromPlan(RecoveryPlan) Convert a recovery plan to a list of executable actions public List<string> GetActionsFromPlan(RecoveryPlan plan) Parameters plan RecoveryPlan Returns List<string> GetEntityBounds(Entity, Position) Get the approximate bounds of an entity private Rectangle GetEntityBounds(Entity entity, Position position) Parameters entity Entity position Position Returns Rectangle GridToWorld(int, int) Convert grid cell to world position private Vector2 GridToWorld(int x, int y) Parameters x int y int Returns Vector2 IsLikelyToLandOnPlatform(Vector2, Vector2, out Entity) Check if character will likely land on a platform with current trajectory private bool IsLikelyToLandOnPlatform(Vector2 position, Vector2 velocity, out Entity platformEntity) Parameters position Vector2 velocity Vector2 platformEntity Entity Returns bool IsPositionSafe(Vector2, Vector2) Check if a position is safe (on stage and near target position) private bool IsPositionSafe(Vector2 position, Vector2 safePosition) Parameters position Vector2 safePosition Vector2 Returns bool PlanRecovery(Entity, Vector2, Vector2) Plan a recovery path accounting for physics public RecoveryPlan PlanRecovery(Entity entity, Vector2 position, Vector2 velocity) Parameters entity Entity position Vector2 velocity Vector2 Returns RecoveryPlan SimulatePath(Entity, Vector2, Vector2, RecoveryPlan) Simulate character movement and physics to validate a recovery plan private (bool success, List<Vector2> path) SimulatePath(Entity entity, Vector2 position, Vector2 velocity, RecoveryPlan plan) Parameters entity Entity position Vector2 velocity Vector2 plan RecoveryPlan Returns (bool success, List<Vector2> path) WorldToGrid(Vector2) Convert world position to grid cell private (int, int) WorldToGrid(Vector2 position) Parameters position Vector2 Returns (int, int)"
  },
  "api/ECS.Systems.AI.RecoveryPlan.html": {
    "href": "api/ECS.Systems.AI.RecoveryPlan.html",
    "title": "Class RecoveryPlan | Super Plant BroZ",
    "summary": "Class RecoveryPlan Namespace ECS.Systems.AI Assembly ECS.dll Represents a recovery plan with movement directions and priorities public class RecoveryPlan Inheritance object RecoveryPlan Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HorizontalDirection public int HorizontalDirection { get; set; } Property Value int HorizontalUrgency public float HorizontalUrgency { get; set; } Property Value float JumpUrgency public float JumpUrgency { get; set; } Property Value float ShouldDropThrough public bool ShouldDropThrough { get; set; } Property Value bool ShouldJump public bool ShouldJump { get; set; } Property Value bool SimulatedPath public List<Vector2> SimulatedPath { get; set; } Property Value List<Vector2>"
  },
  "api/ECS.Systems.AI.html": {
    "href": "api/ECS.Systems.AI.html",
    "title": "Namespace ECS.Systems.AI | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.AI Classes AISystem PhysicsAwarePathfinding RecoveryPlan Represents a recovery plan with movement directions and priorities Enums AISystem.AIState"
  },
  "api/ECS.Systems.Animation.AnimationSystem.html": {
    "href": "api/ECS.Systems.Animation.AnimationSystem.html",
    "title": "Class AnimationSystem | Super Plant BroZ",
    "summary": "Class AnimationSystem Namespace ECS.Systems.Animation Assembly ECS.dll public class AnimationSystem : SystemBase, ISystem Inheritance object SystemBase AnimationSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleAnimationStateChange(IEvent) private void HandleAnimationStateChange(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Animation.FacingSystem.html": {
    "href": "api/ECS.Systems.Animation.FacingSystem.html",
    "title": "Class FacingSystem | Super Plant BroZ",
    "summary": "Class FacingSystem Namespace ECS.Systems.Animation Assembly ECS.dll public class FacingSystem : SystemBase, ISystem Inheritance object SystemBase FacingSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isWalkingLeft private Dictionary<Entity, bool> isWalkingLeft Field Value Dictionary<Entity, bool> isWalkingRight private Dictionary<Entity, bool> isWalkingRight Field Value Dictionary<Entity, bool> Methods HandleWalkAction(IEvent) private void HandleWalkAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Animation.RenderSystem.html": {
    "href": "api/ECS.Systems.Animation.RenderSystem.html",
    "title": "Class RenderSystem | Super Plant BroZ",
    "summary": "Class RenderSystem Namespace ECS.Systems.Animation Assembly ECS.dll public class RenderSystem : SystemBase, ISystem Inheritance object SystemBase RenderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RenderSystem(GraphicsManager) public RenderSystem(GraphicsManager graphicsManager) Parameters graphicsManager GraphicsManager Fields graphicsManager private readonly GraphicsManager graphicsManager Field Value GraphicsManager renderQueue private List<Entity> renderQueue Field Value List<Entity> spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch Properties Pausible public override bool Pausible { get; } Property Value bool UseScaledGameTime public override bool UseScaledGameTime { get; } Property Value bool Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Animation.html": {
    "href": "api/ECS.Systems.Animation.html",
    "title": "Namespace ECS.Systems.Animation | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Animation Classes AnimationSystem FacingSystem RenderSystem"
  },
  "api/ECS.Systems.Attacking.AttackHandlerEnum.html": {
    "href": "api/ECS.Systems.Attacking.AttackHandlerEnum.html",
    "title": "Enum AttackHandlerEnum | Super Plant BroZ",
    "summary": "Enum AttackHandlerEnum Namespace ECS.Systems.Attacking Assembly ECS.dll Enums for every possible type of attack that AttackHandler will need to deal with. public enum AttackHandlerEnum Fields BonkChoyDownSpecial = 9 BonkChoyLeftSpecial = 11 BonkChoyRightSpecial = 10 BonkChoyUpSpecial = 8 ChomperDownSpecial = 13 ChomperLeftSpecial = 15 ChomperRightSpecial = 14 ChomperUpSpecial = 12 Down_Jab = 1 Left_Jab = 2 PeashooterDownSpecial = 5 PeashooterLeftSpecial = 7 PeashooterRightSpecial = 6 PeashooterUpSpecial = 4 Right_Jab = 3 Up_Jab = 0 ZombieDownSpecial = 17 ZombieLeftSpecial = 19 ZombieRightSpecial = 18 ZombieUpSpecial = 16"
  },
  "api/ECS.Systems.Attacking.AttackHandlingBase.html": {
    "href": "api/ECS.Systems.Attacking.AttackHandlingBase.html",
    "title": "Class AttackHandlingBase | Super Plant BroZ",
    "summary": "Class AttackHandlingBase Namespace ECS.Systems.Attacking Assembly ECS.dll Holds all sorts of helpful functions for attack handlers to use. public class AttackHandlingBase : SystemBase, ISystem Inheritance object SystemBase AttackHandlingBase Implements ISystem Derived BonkChoyAttackHandling ChomperAttackHandling GenericAttackHandling PeashooterAttackHandling ZombieAttackHandling Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddHitbox(Entity, string) Adds the specified hitbox to the attackers collision body, and starts a timer to then remove it protected void AddHitbox(Entity attacker, string type) Parameters attacker Entity type string AddTimer(Entity, TimerType) Adds the specified timer to the given entity protected void AddTimer(Entity entity, TimerType type) Parameters entity Entity type TimerType ApplyForce(Entity, Vector2) Applies the given vector as an impulse to entity protected void ApplyForce(Entity entity, Vector2 impulse) Parameters entity Entity entity to apply force to impulse Vector2 vector that acts as impulse AttackEnumConverter(string) Converts string s into the appropriate enum of direction and type. example ---> s = \"up_jab\" returns (AttackDirection.Up, AttackType.Jab). NOTE: Don't give this method a string such as \"peashooter_up_special\". Take off the peashooter prior to the call. private static (AttackDirection, AttackType) AttackEnumConverter(string s) Parameters s string string to parse to enum Returns (AttackDirection, AttackType) DealWithTimers(Entity, TimerType) Deals with everything timer related. Returns false if the attack should not continue. protected bool DealWithTimers(Entity entity, TimerType type) Parameters entity Entity type TimerType Returns bool HasTimer(Entity, TimerType) Returns true if the entity has the given timer type active, false if not protected bool HasTimer(Entity entity, TimerType type) Parameters entity Entity type TimerType Returns bool Initialize(World) public override void Initialize(World world) Parameters world World IsAllowed(Entity, string, int) Checks if the entity is allowed to execute a certain type of attack protected bool IsAllowed(Entity entity, string type, int maxAllowed) Parameters entity Entity type string maxAllowed int Returns bool SetCurrentAttack(Entity, string) Sets the current attack component to the requested type protected void SetCurrentAttack(Entity attacker, string type) Parameters attacker Entity type string SetFacingDirection(Entity, bool) Sets facing direction according to isFacingLeft protected void SetFacingDirection(Entity entity, bool isFacingLeft) Parameters entity Entity isFacingLeft bool true for left, false for right StartHitboxTimer(Entity, string) Begins hitbox timer for given attacker, using type as the animation lookup. Defaults to 0.25 seconds if animation type is not found. protected void StartHitboxTimer(Entity attacker, string type) Parameters attacker Entity type string StartSound(string) Plays the sound specified by key protected void StartSound(string key) Parameters key string sound key StartState(Entity, string) Starts the attack state requested by type for entity attacker. type must be a valid animation type for entity attacker. protected void StartState(Entity attacker, string type) Parameters attacker Entity type string Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Attacking.AttackHandlingManager.html": {
    "href": "api/ECS.Systems.Attacking.AttackHandlingManager.html",
    "title": "Class AttackHandlingManager | Super Plant BroZ",
    "summary": "Class AttackHandlingManager Namespace ECS.Systems.Attacking Assembly ECS.dll A manager for sending out work for attacks. Inherits from systemBase so that its children have access to GetComponent methods. This extra layer is to fit the delegate definition and to provide an opportunity later to refactor this into some data. public class AttackHandlingManager : SystemBase, ISystem Inheritance object SystemBase AttackHandlingManager Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AttackHandlingManager(World) public AttackHandlingManager(World world) Parameters world World Fields bonkChoyHandler private static ISpecialAttackHandler bonkChoyHandler Field Value ISpecialAttackHandler chomperHandler private static ISpecialAttackHandler chomperHandler Field Value ISpecialAttackHandler genericHandler private static IJabAttackHandler genericHandler Field Value IJabAttackHandler peashooterHandler private static ISpecialAttackHandler peashooterHandler Field Value ISpecialAttackHandler zombieHandler private static ISpecialAttackHandler zombieHandler Field Value ISpecialAttackHandler Properties AttackHandlerLookup public Dictionary<AttackHandlerEnum, AttackHandler> AttackHandlerLookup { get; } Property Value Dictionary<AttackHandlerEnum, AttackHandler> Methods BonkChoyHandleDownSpecial(Entity) private static void BonkChoyHandleDownSpecial(Entity attacker) Parameters attacker Entity BonkChoyHandleLeftSpecial(Entity) private static void BonkChoyHandleLeftSpecial(Entity attacker) Parameters attacker Entity BonkChoyHandleRightSpecial(Entity) private static void BonkChoyHandleRightSpecial(Entity attacker) Parameters attacker Entity BonkChoyHandleUpSpecial(Entity) private static void BonkChoyHandleUpSpecial(Entity attacker) Parameters attacker Entity ChomperHandleDownSpecial(Entity) private static void ChomperHandleDownSpecial(Entity attacker) Parameters attacker Entity ChomperHandleLeftSpecial(Entity) private static void ChomperHandleLeftSpecial(Entity attacker) Parameters attacker Entity ChomperHandleRightSpecial(Entity) private static void ChomperHandleRightSpecial(Entity attacker) Parameters attacker Entity ChomperHandleUpSpecial(Entity) private static void ChomperHandleUpSpecial(Entity attacker) Parameters attacker Entity HandleDownJab(Entity) private static void HandleDownJab(Entity attacker) Parameters attacker Entity HandleLeftJab(Entity) private static void HandleLeftJab(Entity attacker) Parameters attacker Entity HandleRightJab(Entity) private static void HandleRightJab(Entity attacker) Parameters attacker Entity HandleUpJab(Entity) private static void HandleUpJab(Entity attacker) Parameters attacker Entity PeashooterHandleDownSpecial(Entity) private static void PeashooterHandleDownSpecial(Entity attacker) Parameters attacker Entity PeashooterHandleLeftSpecial(Entity) private static void PeashooterHandleLeftSpecial(Entity attacker) Parameters attacker Entity PeashooterHandleRightSpecial(Entity) private static void PeashooterHandleRightSpecial(Entity attacker) Parameters attacker Entity PeashooterHandleUpSpecial(Entity) private static void PeashooterHandleUpSpecial(Entity attacker) Parameters attacker Entity Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime ZombieHandleDownSpecial(Entity) private static void ZombieHandleDownSpecial(Entity attacker) Parameters attacker Entity ZombieHandleLeftSpecial(Entity) private static void ZombieHandleLeftSpecial(Entity attacker) Parameters attacker Entity ZombieHandleRightSpecial(Entity) private static void ZombieHandleRightSpecial(Entity attacker) Parameters attacker Entity ZombieHandleUpSpecial(Entity) private static void ZombieHandleUpSpecial(Entity attacker) Parameters attacker Entity"
  },
  "api/ECS.Systems.Attacking.AttackSystem.html": {
    "href": "api/ECS.Systems.Attacking.AttackSystem.html",
    "title": "Class AttackSystem | Super Plant BroZ",
    "summary": "Class AttackSystem Namespace ECS.Systems.Attacking Assembly ECS.dll public class AttackSystem : SystemBase, ISystem Inheritance object SystemBase AttackSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AttackSystem(World) public AttackSystem(World world) Parameters world World Fields handler private AttackHandlingManager handler Field Value AttackHandlingManager Methods HandleAttackAction(IEvent) private void HandleAttackAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Attacking.BonkChoyAttackHandling.html": {
    "href": "api/ECS.Systems.Attacking.BonkChoyAttackHandling.html",
    "title": "Class BonkChoyAttackHandling | Super Plant BroZ",
    "summary": "Class BonkChoyAttackHandling Namespace ECS.Systems.Attacking Assembly ECS.dll Handling for bonk choy specific attacks public class BonkChoyAttackHandling : AttackHandlingBase, ISystem, ISpecialAttackHandler Inheritance object SystemBase AttackHandlingBase BonkChoyAttackHandling Implements ISystem ISpecialAttackHandler Inherited Members AttackHandlingBase.AttackEnumConverter(string) AttackHandlingBase.SetCurrentAttack(Entity, string) AttackHandlingBase.StartHitboxTimer(Entity, string) AttackHandlingBase.AddHitbox(Entity, string) AttackHandlingBase.StartState(Entity, string) AttackHandlingBase.StartSound(string) AttackHandlingBase.ApplyForce(Entity, Vector2) AttackHandlingBase.SetFacingDirection(Entity, bool) AttackHandlingBase.IsAllowed(Entity, string, int) AttackHandlingBase.AddTimer(Entity, TimerType) AttackHandlingBase.HasTimer(Entity, TimerType) AttackHandlingBase.DealWithTimers(Entity, TimerType) AttackHandlingBase.Update(World, GameTime) SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BonkChoyAttackHandling(World) public BonkChoyAttackHandling(World world) Parameters world World Fields DOWN_SPECIAL_IMPULSE_STRENGTH private const int DOWN_SPECIAL_IMPULSE_STRENGTH = 100000 Field Value int MAX_DOWN_SPECIALS private const int MAX_DOWN_SPECIALS = 1 Field Value int MAX_SIDE_SPECIALS private const int MAX_SIDE_SPECIALS = 2 Field Value int MAX_UP_SPECIALS private const int MAX_UP_SPECIALS = 1 Field Value int SIDE_SPECIAL_X_IMPULSE_STRENGTH_GROUNDED private const int SIDE_SPECIAL_X_IMPULSE_STRENGTH_GROUNDED = 2500000 Field Value int SIDE_SPECIAL_X_IMPULSE_STRENGTH_UNGROUNDED private const int SIDE_SPECIAL_X_IMPULSE_STRENGTH_UNGROUNDED = 50000 Field Value int SIDE_SPECIAL_Y_IMPULSE_STRENGTH private const int SIDE_SPECIAL_Y_IMPULSE_STRENGTH = 1000 Field Value int UP_SPECIAL_IMPULSE_STRENGTH private const int UP_SPECIAL_IMPULSE_STRENGTH = 50000 Field Value int Methods HandleDownSpecial(Entity) public void HandleDownSpecial(Entity attacker) Parameters attacker Entity HandleLeftSpecial(Entity) public void HandleLeftSpecial(Entity attacker) Parameters attacker Entity HandleRightSpecial(Entity) public void HandleRightSpecial(Entity attacker) Parameters attacker Entity HandleUpSpecial(Entity) public void HandleUpSpecial(Entity attacker) Parameters attacker Entity Initialize(World) public override void Initialize(World world) Parameters world World"
  },
  "api/ECS.Systems.Attacking.ChomperAttackHandling.html": {
    "href": "api/ECS.Systems.Attacking.ChomperAttackHandling.html",
    "title": "Class ChomperAttackHandling | Super Plant BroZ",
    "summary": "Class ChomperAttackHandling Namespace ECS.Systems.Attacking Assembly ECS.dll Handling for bonk choy specific attacks public class ChomperAttackHandling : AttackHandlingBase, ISystem, ISpecialAttackHandler Inheritance object SystemBase AttackHandlingBase ChomperAttackHandling Implements ISystem ISpecialAttackHandler Inherited Members AttackHandlingBase.AttackEnumConverter(string) AttackHandlingBase.SetCurrentAttack(Entity, string) AttackHandlingBase.StartHitboxTimer(Entity, string) AttackHandlingBase.AddHitbox(Entity, string) AttackHandlingBase.StartState(Entity, string) AttackHandlingBase.StartSound(string) AttackHandlingBase.ApplyForce(Entity, Vector2) AttackHandlingBase.SetFacingDirection(Entity, bool) AttackHandlingBase.IsAllowed(Entity, string, int) AttackHandlingBase.AddTimer(Entity, TimerType) AttackHandlingBase.HasTimer(Entity, TimerType) AttackHandlingBase.DealWithTimers(Entity, TimerType) AttackHandlingBase.Update(World, GameTime) SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChomperAttackHandling(World) public ChomperAttackHandling(World world) Parameters world World Fields DOWN_SPECIAL_IMPULSE_STRENGTH private const int DOWN_SPECIAL_IMPULSE_STRENGTH = 100000 Field Value int MAX_DOWN_SPECIALS private const int MAX_DOWN_SPECIALS = 1 Field Value int MAX_SIDE_SPECIALS private const int MAX_SIDE_SPECIALS = 2 Field Value int MAX_UP_SPECIALS private const int MAX_UP_SPECIALS = 1 Field Value int SIDE_SPECIAL_X_IMPULSE_STRENGTH_GROUNDED private const int SIDE_SPECIAL_X_IMPULSE_STRENGTH_GROUNDED = 2500000 Field Value int SIDE_SPECIAL_X_IMPULSE_STRENGTH_UNGROUNDED private const int SIDE_SPECIAL_X_IMPULSE_STRENGTH_UNGROUNDED = 50000 Field Value int SIDE_SPECIAL_Y_IMPULSE_STRENGTH private const int SIDE_SPECIAL_Y_IMPULSE_STRENGTH = 1000 Field Value int UP_SPECIAL_IMPULSE_STRENGTH private const int UP_SPECIAL_IMPULSE_STRENGTH = 50000 Field Value int Methods HandleDownSpecial(Entity) public void HandleDownSpecial(Entity attacker) Parameters attacker Entity HandleLeftSpecial(Entity) public void HandleLeftSpecial(Entity attacker) Parameters attacker Entity HandleRightSpecial(Entity) public void HandleRightSpecial(Entity attacker) Parameters attacker Entity HandleUpSpecial(Entity) public void HandleUpSpecial(Entity attacker) Parameters attacker Entity Initialize(World) public override void Initialize(World world) Parameters world World"
  },
  "api/ECS.Systems.Attacking.GenericAttackHandling.html": {
    "href": "api/ECS.Systems.Attacking.GenericAttackHandling.html",
    "title": "Class GenericAttackHandling | Super Plant BroZ",
    "summary": "Class GenericAttackHandling Namespace ECS.Systems.Attacking Assembly ECS.dll Holds definitions for basic jabs public class GenericAttackHandling : AttackHandlingBase, ISystem, IJabAttackHandler Inheritance object SystemBase AttackHandlingBase GenericAttackHandling Implements ISystem IJabAttackHandler Inherited Members AttackHandlingBase.AttackEnumConverter(string) AttackHandlingBase.SetCurrentAttack(Entity, string) AttackHandlingBase.StartHitboxTimer(Entity, string) AttackHandlingBase.AddHitbox(Entity, string) AttackHandlingBase.StartState(Entity, string) AttackHandlingBase.StartSound(string) AttackHandlingBase.ApplyForce(Entity, Vector2) AttackHandlingBase.SetFacingDirection(Entity, bool) AttackHandlingBase.IsAllowed(Entity, string, int) AttackHandlingBase.AddTimer(Entity, TimerType) AttackHandlingBase.HasTimer(Entity, TimerType) AttackHandlingBase.DealWithTimers(Entity, TimerType) AttackHandlingBase.Update(World, GameTime) SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenericAttackHandling(World) public GenericAttackHandling(World world) Parameters world World Methods HandleDownJab(Entity, string) public void HandleDownJab(Entity attacker, string type) Parameters attacker Entity type string HandleJab(Entity, string) private void HandleJab(Entity attacker, string type) Parameters attacker Entity type string HandleLeftJab(Entity, string) public void HandleLeftJab(Entity attacker, string type) Parameters attacker Entity type string HandleRightJab(Entity, string) public void HandleRightJab(Entity attacker, string type) Parameters attacker Entity type string HandleUpJab(Entity, string) public void HandleUpJab(Entity attacker, string type) Parameters attacker Entity type string Initialize(World) public override void Initialize(World world) Parameters world World"
  },
  "api/ECS.Systems.Attacking.IJabAttackHandler.html": {
    "href": "api/ECS.Systems.Attacking.IJabAttackHandler.html",
    "title": "Interface IJabAttackHandler | Super Plant BroZ",
    "summary": "Interface IJabAttackHandler Namespace ECS.Systems.Attacking Assembly ECS.dll public interface IJabAttackHandler Methods HandleDownJab(Entity, string) void HandleDownJab(Entity attacker, string type) Parameters attacker Entity type string HandleLeftJab(Entity, string) void HandleLeftJab(Entity attacker, string type) Parameters attacker Entity type string HandleRightJab(Entity, string) void HandleRightJab(Entity attacker, string type) Parameters attacker Entity type string HandleUpJab(Entity, string) void HandleUpJab(Entity attacker, string type) Parameters attacker Entity type string"
  },
  "api/ECS.Systems.Attacking.ISpecialAttackHandler.html": {
    "href": "api/ECS.Systems.Attacking.ISpecialAttackHandler.html",
    "title": "Interface ISpecialAttackHandler | Super Plant BroZ",
    "summary": "Interface ISpecialAttackHandler Namespace ECS.Systems.Attacking Assembly ECS.dll public interface ISpecialAttackHandler Methods HandleDownSpecial(Entity) void HandleDownSpecial(Entity attacker) Parameters attacker Entity HandleLeftSpecial(Entity) void HandleLeftSpecial(Entity attacker) Parameters attacker Entity HandleRightSpecial(Entity) void HandleRightSpecial(Entity attacker) Parameters attacker Entity HandleUpSpecial(Entity) void HandleUpSpecial(Entity attacker) Parameters attacker Entity"
  },
  "api/ECS.Systems.Attacking.PeashooterAttackHandling.html": {
    "href": "api/ECS.Systems.Attacking.PeashooterAttackHandling.html",
    "title": "Class PeashooterAttackHandling | Super Plant BroZ",
    "summary": "Class PeashooterAttackHandling Namespace ECS.Systems.Attacking Assembly ECS.dll Handling for peashooter specific attacks public class PeashooterAttackHandling : AttackHandlingBase, ISystem, ISpecialAttackHandler Inheritance object SystemBase AttackHandlingBase PeashooterAttackHandling Implements ISystem ISpecialAttackHandler Inherited Members AttackHandlingBase.AttackEnumConverter(string) AttackHandlingBase.SetCurrentAttack(Entity, string) AttackHandlingBase.StartHitboxTimer(Entity, string) AttackHandlingBase.AddHitbox(Entity, string) AttackHandlingBase.StartState(Entity, string) AttackHandlingBase.StartSound(string) AttackHandlingBase.ApplyForce(Entity, Vector2) AttackHandlingBase.SetFacingDirection(Entity, bool) AttackHandlingBase.IsAllowed(Entity, string, int) AttackHandlingBase.AddTimer(Entity, TimerType) AttackHandlingBase.HasTimer(Entity, TimerType) AttackHandlingBase.DealWithTimers(Entity, TimerType) AttackHandlingBase.Update(World, GameTime) SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PeashooterAttackHandling(World) public PeashooterAttackHandling(World world) Parameters world World Fields DOWN_SPECIAL_IMPULSE_STRENGTH private const int DOWN_SPECIAL_IMPULSE_STRENGTH = 100000 Field Value int MAX_DOWN_SPECIALS private const int MAX_DOWN_SPECIALS = 1 Field Value int Methods HandleDownSpecial(Entity) public void HandleDownSpecial(Entity attacker) Parameters attacker Entity HandleLeftSpecial(Entity) public void HandleLeftSpecial(Entity attacker) Parameters attacker Entity HandleRightSpecial(Entity) public void HandleRightSpecial(Entity attacker) Parameters attacker Entity HandleSideSpecial(Entity, string) private void HandleSideSpecial(Entity attacker, string type) Parameters attacker Entity type string HandleUpSpecial(Entity) public void HandleUpSpecial(Entity attacker) Parameters attacker Entity Initialize(World) public override void Initialize(World world) Parameters world World"
  },
  "api/ECS.Systems.Attacking.ShootConvertSystem.html": {
    "href": "api/ECS.Systems.Attacking.ShootConvertSystem.html",
    "title": "Class ShootConvertSystem | Super Plant BroZ",
    "summary": "Class ShootConvertSystem Namespace ECS.Systems.Attacking Assembly ECS.dll Temporary system to convert shoot events to attackActions. This needs to die asap. public class ShootConvertSystem : SystemBase, ISystem Inheritance object SystemBase ShootConvertSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleAction(IEvent) private void HandleAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Attacking.TouchedGroundSystem.html": {
    "href": "api/ECS.Systems.Attacking.TouchedGroundSystem.html",
    "title": "Class TouchedGroundSystem | Super Plant BroZ",
    "summary": "Class TouchedGroundSystem Namespace ECS.Systems.Attacking Assembly ECS.dll public class TouchedGroundSystem : SystemBase, ISystem Inheritance object SystemBase TouchedGroundSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Attacking.ZombieAttackHandling.html": {
    "href": "api/ECS.Systems.Attacking.ZombieAttackHandling.html",
    "title": "Class ZombieAttackHandling | Super Plant BroZ",
    "summary": "Class ZombieAttackHandling Namespace ECS.Systems.Attacking Assembly ECS.dll Handling for bonk choy specific attacks public class ZombieAttackHandling : AttackHandlingBase, ISystem, ISpecialAttackHandler Inheritance object SystemBase AttackHandlingBase ZombieAttackHandling Implements ISystem ISpecialAttackHandler Inherited Members AttackHandlingBase.AttackEnumConverter(string) AttackHandlingBase.SetCurrentAttack(Entity, string) AttackHandlingBase.StartHitboxTimer(Entity, string) AttackHandlingBase.AddHitbox(Entity, string) AttackHandlingBase.StartState(Entity, string) AttackHandlingBase.StartSound(string) AttackHandlingBase.ApplyForce(Entity, Vector2) AttackHandlingBase.SetFacingDirection(Entity, bool) AttackHandlingBase.IsAllowed(Entity, string, int) AttackHandlingBase.AddTimer(Entity, TimerType) AttackHandlingBase.HasTimer(Entity, TimerType) AttackHandlingBase.DealWithTimers(Entity, TimerType) AttackHandlingBase.Update(World, GameTime) SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ZombieAttackHandling(World) public ZombieAttackHandling(World world) Parameters world World Fields DOWN_SPECIAL_IMPULSE_STRENGTH private const int DOWN_SPECIAL_IMPULSE_STRENGTH = 100000 Field Value int MAX_DOWN_SPECIALS private const int MAX_DOWN_SPECIALS = 1 Field Value int MAX_SIDE_SPECIALS private const int MAX_SIDE_SPECIALS = 2 Field Value int MAX_UP_SPECIALS private const int MAX_UP_SPECIALS = 1 Field Value int SIDE_SPECIAL_X_IMPULSE_STRENGTH private const int SIDE_SPECIAL_X_IMPULSE_STRENGTH = 2500000 Field Value int SIDE_SPECIAL_Y_IMPULSE_STRENGTH private const int SIDE_SPECIAL_Y_IMPULSE_STRENGTH = 1000 Field Value int UP_SPECIAL_IMPULSE_STRENGTH private const int UP_SPECIAL_IMPULSE_STRENGTH = 50000 Field Value int Methods HandleDownSpecial(Entity) public void HandleDownSpecial(Entity attacker) Parameters attacker Entity HandleLeftSpecial(Entity) public void HandleLeftSpecial(Entity attacker) Parameters attacker Entity HandleRightSpecial(Entity) public void HandleRightSpecial(Entity attacker) Parameters attacker Entity HandleUpSpecial(Entity) public void HandleUpSpecial(Entity attacker) Parameters attacker Entity Initialize(World) public override void Initialize(World world) Parameters world World"
  },
  "api/ECS.Systems.Attacking.html": {
    "href": "api/ECS.Systems.Attacking.html",
    "title": "Namespace ECS.Systems.Attacking | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Attacking Classes AttackHandlingBase Holds all sorts of helpful functions for attack handlers to use. AttackHandlingManager A manager for sending out work for attacks. Inherits from systemBase so that its children have access to GetComponent methods. This extra layer is to fit the delegate definition and to provide an opportunity later to refactor this into some data. AttackSystem BonkChoyAttackHandling Handling for bonk choy specific attacks ChomperAttackHandling Handling for bonk choy specific attacks GenericAttackHandling Holds definitions for basic jabs PeashooterAttackHandling Handling for peashooter specific attacks ShootConvertSystem Temporary system to convert shoot events to attackActions. This needs to die asap. TouchedGroundSystem ZombieAttackHandling Handling for bonk choy specific attacks Interfaces IJabAttackHandler ISpecialAttackHandler Enums AttackHandlerEnum Enums for every possible type of attack that AttackHandler will need to deal with."
  },
  "api/ECS.Systems.Blocking.BlockActionSystem.html": {
    "href": "api/ECS.Systems.Blocking.BlockActionSystem.html",
    "title": "Class BlockActionSystem | Super Plant BroZ",
    "summary": "Class BlockActionSystem Namespace ECS.Systems.Blocking Assembly ECS.dll public class BlockActionSystem : SystemBase, ISystem Inheritance object SystemBase BlockActionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleBlockAction(IEvent) private void HandleBlockAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Blocking.BlockRegenerationSystem.html": {
    "href": "api/ECS.Systems.Blocking.BlockRegenerationSystem.html",
    "title": "Class BlockRegenerationSystem | Super Plant BroZ",
    "summary": "Class BlockRegenerationSystem Namespace ECS.Systems.Blocking Assembly ECS.dll public class BlockRegenerationSystem : SystemBase, ISystem Inheritance object SystemBase BlockRegenerationSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SHIELD_REGENERATION_RATE private const int SHIELD_REGENERATION_RATE = 20 Field Value int Methods Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime isBlocking(Entity) private bool isBlocking(Entity entity) Parameters entity Entity Returns bool"
  },
  "api/ECS.Systems.Blocking.BlockSystem.html": {
    "href": "api/ECS.Systems.Blocking.BlockSystem.html",
    "title": "Class BlockSystem | Super Plant BroZ",
    "summary": "Class BlockSystem Namespace ECS.Systems.Blocking Assembly ECS.dll public class BlockSystem : SystemBase, ISystem Inheritance object SystemBase BlockSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SHIELD_DAMAGE_RATE private const int SHIELD_DAMAGE_RATE = 50 Field Value int STUN_TIME_ON_SHIELD_BREAK private const float STUN_TIME_ON_SHIELD_BREAK = 0.5 Field Value float Methods Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime isBlocking(Entity) private bool isBlocking(Entity entity) Parameters entity Entity Returns bool"
  },
  "api/ECS.Systems.Blocking.html": {
    "href": "api/ECS.Systems.Blocking.html",
    "title": "Namespace ECS.Systems.Blocking | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Blocking Classes BlockActionSystem BlockRegenerationSystem BlockSystem"
  },
  "api/ECS.Systems.Camera.CameraSystem.html": {
    "href": "api/ECS.Systems.Camera.CameraSystem.html",
    "title": "Class CameraSystem | Super Plant BroZ",
    "summary": "Class CameraSystem Namespace ECS.Systems.Camera Assembly ECS.dll public class CameraSystem : SystemBase, ISystem Inheritance object SystemBase CameraSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraSystem(CameraManager) public CameraSystem(CameraManager cameraManager) Parameters cameraManager CameraManager Fields cameraManager private readonly CameraManager cameraManager Field Value CameraManager previousCameraTrackingEnabled private bool previousCameraTrackingEnabled Field Value bool Methods HandleCameraAction(IEvent) private void HandleCameraAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Camera.html": {
    "href": "api/ECS.Systems.Camera.html",
    "title": "Namespace ECS.Systems.Camera | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Camera Classes CameraSystem"
  },
  "api/ECS.Systems.Characters.CharacterSwitchSystem.html": {
    "href": "api/ECS.Systems.Characters.CharacterSwitchSystem.html",
    "title": "Class CharacterSwitchSystem | Super Plant BroZ",
    "summary": "Class CharacterSwitchSystem Namespace ECS.Systems.Characters Assembly ECS.dll public class CharacterSwitchSystem : SystemBase, ISystem Inheritance object SystemBase CharacterSwitchSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CharacterSwitchSystem(GameAssets) public CharacterSwitchSystem(GameAssets assets) Parameters assets GameAssets Fields actionDirections private readonly Dictionary<string, int> actionDirections Field Value Dictionary<string, int> assets private readonly GameAssets assets Field Value GameAssets factory private EntityFactory factory Field Value EntityFactory lastDirection private int lastDirection Field Value int playableCharacters private HashSet<string> playableCharacters Field Value HashSet<string> switchQueue private readonly Queue<Entity> switchQueue Field Value Queue<Entity> Methods HandleCharacterSwitchAction(IEvent) private void HandleCharacterSwitchAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World InitializePlayableCharacters() private void InitializePlayableCharacters() Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Characters.html": {
    "href": "api/ECS.Systems.Characters.html",
    "title": "Namespace ECS.Systems.Characters | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Characters Classes CharacterSwitchSystem"
  },
  "api/ECS.Systems.Collision.CollisionDetectionSystem.html": {
    "href": "api/ECS.Systems.Collision.CollisionDetectionSystem.html",
    "title": "Class CollisionDetectionSystem | Super Plant BroZ",
    "summary": "Class CollisionDetectionSystem Namespace ECS.Systems.Collision Assembly ECS.dll public class CollisionDetectionSystem : SystemBase, ISystem Inheritance object SystemBase CollisionDetectionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActiveContacts private HashSet<(Entity, Entity)> ActiveContacts Field Value HashSet<(Entity, Entity)> BroadphaseCache private Dictionary<Entity, Rectangle> BroadphaseCache Field Value Dictionary<Entity, Rectangle> PlatformDirectionHistory private Dictionary<int, bool> PlatformDirectionHistory Field Value Dictionary<int, bool> transformedVerticesCache private Dictionary<(Entity, Polygon), Vector2[]> transformedVerticesCache Field Value Dictionary<(Entity, Polygon), Vector2[]> Methods BroadPhase(List<(Entity, CollisionBody, Position, Velocity?)>) private List<(Entity, Entity)> BroadPhase(List<(Entity, CollisionBody, Position, Velocity?)> bodies) Parameters bodies List<(Entity, CollisionBody, Position, Velocity?)> Returns List<(Entity, Entity)> CacheTransformedVertices(List<(Entity, CollisionBody, Position, Velocity?)>) private void CacheTransformedVertices(List<(Entity, CollisionBody, Position, Velocity?)> bodies) Parameters bodies List<(Entity, CollisionBody, Position, Velocity?)> CalculateAABB(Entity, CollisionBody, Position) private Rectangle CalculateAABB(Entity entity, CollisionBody body, Position pos) Parameters entity Entity body CollisionBody pos Position Returns Rectangle CalculateCharacterBounds(Entity, out float, out float) private void CalculateCharacterBounds(Entity character, out float feet, out float height) Parameters character Entity feet float height float CalculateContactPoint(Vector2[], Vector2[], Vector2) private Vector2 CalculateContactPoint(Vector2[] verticesA, Vector2[] verticesB, Vector2 normal) Parameters verticesA Vector2[] verticesB Vector2[] normal Vector2 Returns Vector2 CalculatePlatformTop(Entity) private float CalculatePlatformTop(Entity platform) Parameters platform Entity Returns float CheckPolygonCollision(Entity, Entity, Vector2[], Vector2[], Polygon, Polygon) private Contact? CheckPolygonCollision(Entity entityA, Entity entityB, Vector2[] verticesA, Vector2[] verticesB, Polygon polygonA, Polygon polygonB) Parameters entityA Entity entityB Entity verticesA Vector2[] verticesB Vector2[] polygonA Polygon polygonB Polygon Returns Contact? GetCollidableBodies() private List<(Entity, CollisionBody, Position, Velocity?)> GetCollidableBodies() Returns List<(Entity, CollisionBody, Position, Velocity?)> GetExpandedAABB(Entity, CollisionBody, Position) private Rectangle GetExpandedAABB(Entity entity, CollisionBody body, Position pos) Parameters entity Entity body CollisionBody pos Position Returns Rectangle GetSATAxes(Vector2[], Vector2[]) private List<Vector2> GetSATAxes(Vector2[] verticesA, Vector2[] verticesB) Parameters verticesA Vector2[] verticesB Vector2[] Returns List<Vector2> Initialize(World) public override void Initialize(World world) Parameters world World NarrowPhase(List<(Entity, Entity)>) private List<Contact> NarrowPhase(List<(Entity, Entity)> pairs) Parameters pairs List<(Entity, Entity)> Returns List<Contact> ProcessContacts(List<Contact>) private void ProcessContacts(List<Contact> contacts) Parameters contacts List<Contact> ProcessEntityPairContacts(Entity, Entity, CollisionBody, CollisionBody, Position, Position) private List<Contact> ProcessEntityPairContacts(Entity entityA, Entity entityB, CollisionBody bodyA, CollisionBody bodyB, Position posA, Position posB) Parameters entityA Entity entityB Entity bodyA CollisionBody bodyB CollisionBody posA Position posB Position Returns List<Contact> ShouldSkipPlatformCollision(Entity, Entity) private bool ShouldSkipPlatformCollision(Entity entityA, Entity entityB) Parameters entityA Entity entityB Entity Returns bool Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Collision.CollisionResponseSystem.html": {
    "href": "api/ECS.Systems.Collision.CollisionResponseSystem.html",
    "title": "Class CollisionResponseSystem | Super Plant BroZ",
    "summary": "Class CollisionResponseSystem Namespace ECS.Systems.Collision Assembly ECS.dll Handles physical responses to collisions between entities using impulse-based resolution. Implements position correction and velocity response for realistic collision behavior. public class CollisionResponseSystem : SystemBase, ISystem Inheritance object SystemBase CollisionResponseSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleCollision(IEvent) Handles collision events by calculating and applying appropriate physical responses. Implements impulse-based collision response with position correction. private void HandleCollision(IEvent evt) Parameters evt IEvent The collision event to handle. Remarks This method: Filters out trigger collisions (hitbox/hurtbox) Handles both static and dynamic object collisions Applies position correction to prevent object penetration Calculates and applies impulses for velocity response Initialize(World) Initializes the collision response system and subscribes to collision events. public override void Initialize(World world) Parameters world World The game world containing all entities. Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Collision.html": {
    "href": "api/ECS.Systems.Collision.html",
    "title": "Namespace ECS.Systems.Collision | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Collision Classes CollisionDetectionSystem CollisionResponseSystem Handles physical responses to collisions between entities using impulse-based resolution. Implements position correction and velocity response for realistic collision behavior."
  },
  "api/ECS.Systems.Damage.HitResolutionSystem.html": {
    "href": "api/ECS.Systems.Damage.HitResolutionSystem.html",
    "title": "Class HitResolutionSystem | Super Plant BroZ",
    "summary": "Class HitResolutionSystem Namespace ECS.Systems.Damage Assembly ECS.dll public class HitResolutionSystem : SystemBase, ISystem Inheritance object SystemBase HitResolutionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DealWithDamage(HitEvent) private void DealWithDamage(HitEvent hitEvent) Parameters hitEvent HitEvent DealWithHitPhysics(HitEvent) private void DealWithHitPhysics(HitEvent hitEvent) Parameters hitEvent HitEvent HandleHit(IEvent) private void HandleHit(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World StunTarget(HitEvent) private void StunTarget(HitEvent hitEvent) Parameters hitEvent HitEvent Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Damage.html": {
    "href": "api/ECS.Systems.Damage.html",
    "title": "Namespace ECS.Systems.Damage | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Damage Classes HitResolutionSystem"
  },
  "api/ECS.Systems.Debug.ActionDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.ActionDebugSystem.html",
    "title": "Class ActionDebugSystem | Super Plant BroZ",
    "summary": "Class ActionDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class ActionDebugSystem : SystemBase, ISystem Inheritance object SystemBase ActionDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleAction(IEvent) private void HandleAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.ActionEventDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.ActionEventDebugSystem.html",
    "title": "Class ActionEventDebugSystem | Super Plant BroZ",
    "summary": "Class ActionEventDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class ActionEventDebugSystem : SystemBase, ISystem Inheritance object SystemBase ActionEventDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.CollisionDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.CollisionDebugSystem.html",
    "title": "Class CollisionDebugSystem | Super Plant BroZ",
    "summary": "Class CollisionDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class CollisionDebugSystem : SystemBase, ISystem Inheritance object SystemBase CollisionDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields LOG_INTERVAL private const float LOG_INTERVAL = 1 Field Value float activeCollisions private Dictionary<Entity, List<CollisionEvent>> activeCollisions Field Value Dictionary<Entity, List<CollisionEvent>> collisionCount private int collisionCount Field Value int timeSinceLastLog private float timeSinceLastLog Field Value float Methods HandleCollision(IEvent) private void HandleCollision(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World LogCollision(CollisionEvent) private void LogCollision(CollisionEvent collision) Parameters collision CollisionEvent TrackCollision(Entity, CollisionEvent) private void TrackCollision(Entity entity, CollisionEvent collisionEvent) Parameters entity Entity collisionEvent CollisionEvent Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.ColoredTextSegment.html": {
    "href": "api/ECS.Systems.Debug.ColoredTextSegment.html",
    "title": "Struct ColoredTextSegment | Super Plant BroZ",
    "summary": "Struct ColoredTextSegment Namespace ECS.Systems.Debug Assembly ECS.dll public struct ColoredTextSegment Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ColoredTextSegment(string, Color) public ColoredTextSegment(string text, Color color) Parameters text string color Color Fields Color public Color Color Field Value Color Text public string Text Field Value string"
  },
  "api/ECS.Systems.Debug.DebugGroundedSystem.html": {
    "href": "api/ECS.Systems.Debug.DebugGroundedSystem.html",
    "title": "Class DebugGroundedSystem | Super Plant BroZ",
    "summary": "Class DebugGroundedSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class DebugGroundedSystem : SystemBase, ISystem Inheritance object SystemBase DebugGroundedSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.DebugRenderSystem.html": {
    "href": "api/ECS.Systems.Debug.DebugRenderSystem.html",
    "title": "Class DebugRenderSystem | Super Plant BroZ",
    "summary": "Class DebugRenderSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class DebugRenderSystem : SystemBase, ISystem Inheritance object SystemBase DebugRenderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DebugRenderSystem(GameAssets, GraphicsManager) public DebugRenderSystem(GameAssets assets, GraphicsManager graphicsManager) Parameters assets GameAssets graphicsManager GraphicsManager Fields debugCollisionEvents private List<CollisionEvent> debugCollisionEvents Field Value List<CollisionEvent> debugFont private SpriteFont debugFont Field Value SpriteFont elapsedTime private TimeSpan elapsedTime Field Value TimeSpan frameCounter private int frameCounter Field Value int frameRate private int frameRate Field Value int graphicsManager private readonly GraphicsManager graphicsManager Field Value GraphicsManager layerDepth private float layerDepth Field Value float layerDepthTop private float layerDepthTop Field Value float pixel private Texture2D pixel Field Value Texture2D polygonCreationMode private bool polygonCreationMode Field Value bool polygonPoints private List<Vector2> polygonPoints Field Value List<Vector2> previousLeftButtonPressed private bool previousLeftButtonPressed Field Value bool previousRightButtonPressed private bool previousRightButtonPressed Field Value bool showEntityIDs private bool showEntityIDs Field Value bool showFPS private bool showFPS Field Value bool showHitboxes private bool showHitboxes Field Value bool showMouseCoordinates private bool showMouseCoordinates Field Value bool showMovementVectors private bool showMovementVectors Field Value bool showPlayerState private bool showPlayerState Field Value bool spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch Properties Pausible public override bool Pausible { get; } Property Value bool UseScaledGameTime public override bool UseScaledGameTime { get; } Property Value bool Methods CalculateFPS(GameTime) private void CalculateFPS(GameTime gameTime) Parameters gameTime GameTime DrawAccelerationVectors(SpriteBatch) private void DrawAccelerationVectors(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawCollisionContactNormals(SpriteBatch) private void DrawCollisionContactNormals(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawEntityIDs(SpriteBatch) private void DrawEntityIDs(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawFPSCounter(SpriteBatch, Vector2, float) private void DrawFPSCounter(SpriteBatch spriteBatch, Vector2 position, float cameraZoom) Parameters spriteBatch SpriteBatch position Vector2 cameraZoom float DrawHitboxes(SpriteBatch) private void DrawHitboxes(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawLine(SpriteBatch, Vector2, Vector2, Color, float) private void DrawLine(SpriteBatch spriteBatch, Vector2 start, Vector2 end, Color color, float thickness) Parameters spriteBatch SpriteBatch start Vector2 end Vector2 color Color thickness float DrawMouseCoordinates(SpriteBatch, Vector2, Vector2, Vector2, float) private void DrawMouseCoordinates(SpriteBatch spriteBatch, Vector2 position, Vector2 mouseScreen, Vector2 mouseWorld, float cameraZoom) Parameters spriteBatch SpriteBatch position Vector2 mouseScreen Vector2 mouseWorld Vector2 cameraZoom float DrawOutlinedText(SpriteBatch, string, Vector2) private void DrawOutlinedText(SpriteBatch spriteBatch, string text, Vector2 position) Parameters spriteBatch SpriteBatch text string position Vector2 DrawOutlinedTextFixedSize(SpriteBatch, string, Vector2, float) private void DrawOutlinedTextFixedSize(SpriteBatch spriteBatch, string text, Vector2 position, float cameraZoom) Parameters spriteBatch SpriteBatch text string position Vector2 cameraZoom float DrawPlayerStateText(SpriteBatch) private void DrawPlayerStateText(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawPolygonCreationPreview(SpriteBatch) private void DrawPolygonCreationPreview(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch DrawPolygonNormals(SpriteBatch, Vector2[]) private void DrawPolygonNormals(SpriteBatch spriteBatch, Vector2[] vertices) Parameters spriteBatch SpriteBatch vertices Vector2[] DrawRectangle(SpriteBatch, Vector2, Vector2, Color) private void DrawRectangle(SpriteBatch spriteBatch, Vector2 position, Vector2 size, Color color) Parameters spriteBatch SpriteBatch position Vector2 size Vector2 color Color DrawVector(SpriteBatch, Vector2, Vector2, Color, float) private void DrawVector(SpriteBatch spriteBatch, Vector2 origin, Vector2 vectorValue, Color color, float scaleFactor) Parameters spriteBatch SpriteBatch origin Vector2 vectorValue Vector2 color Color scaleFactor float DrawVelocityVectors(SpriteBatch) private void DrawVelocityVectors(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch GetColorForLayer(CollisionLayer) private Color GetColorForLayer(CollisionLayer layer) Parameters layer CollisionLayer Returns Color GetEntityBounds(Entity, CollisionBody, Position) private Rectangle GetEntityBounds(Entity entity, CollisionBody body, Position pos) Parameters entity Entity body CollisionBody pos Position Returns Rectangle HandleAction(IEvent) private void HandleAction(IEvent evt) Parameters evt IEvent HandleCollisionEvent(IEvent) private void HandleCollisionEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World OutputPolygonPoints() private void OutputPolygonPoints() Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdatePolygonCreation(Matrix) private void UpdatePolygonCreation(Matrix invertedCameraMatrix) Parameters invertedCameraMatrix Matrix"
  },
  "api/ECS.Systems.Debug.GamePadDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.GamePadDebugSystem.html",
    "title": "Class GamePadDebugSystem | Super Plant BroZ",
    "summary": "Class GamePadDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class GamePadDebugSystem : SystemBase, ISystem Inheritance object SystemBase GamePadDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleInput(IEvent) private void HandleInput(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.RawInputDebugSystem.html": {
    "href": "api/ECS.Systems.Debug.RawInputDebugSystem.html",
    "title": "Class RawInputDebugSystem | Super Plant BroZ",
    "summary": "Class RawInputDebugSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class RawInputDebugSystem : SystemBase, ISystem Inheritance object SystemBase RawInputDebugSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleRawInput(IEvent) private void HandleRawInput(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Debug.TerminalSystem.html": {
    "href": "api/ECS.Systems.Debug.TerminalSystem.html",
    "title": "Class TerminalSystem | Super Plant BroZ",
    "summary": "Class TerminalSystem Namespace ECS.Systems.Debug Assembly ECS.dll public class TerminalSystem : SystemBase, ISystem Inheritance object SystemBase TerminalSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TerminalSystem(GameStateManager, GameAssets, GraphicsManager) public TerminalSystem(GameStateManager gameStateManager, GameAssets assets, GraphicsManager graphicsManager) Parameters gameStateManager GameStateManager assets GameAssets graphicsManager GraphicsManager Fields InitialDelay private const float InitialDelay = 0.5 Field Value float RepeatInterval private const float RepeatInterval = 0.1 Field Value float TOGGLE_KEY private const Keys TOGGLE_KEY = OemTilde Field Value Keys backgroundColor private readonly Color backgroundColor Field Value Color commands private Dictionary<string, Func<string[], string>> commands Field Value Dictionary<string, Func<string[], string>> componentSetterCache private static Dictionary<Type, Action<World, Entity, object>> componentSetterCache Field Value Dictionary<Type, Action<World, Entity, object>> currentKeyboardState private KeyboardState currentKeyboardState Field Value KeyboardState cursorBlinkTimer private float cursorBlinkTimer Field Value float font private readonly SpriteFont font Field Value SpriteFont gameStateManager private readonly GameStateManager gameStateManager Field Value GameStateManager graphicsManager private readonly GraphicsManager graphicsManager Field Value GraphicsManager heldKeyTimers private Dictionary<Keys, float> heldKeyTimers Field Value Dictionary<Keys, float> keyMappings private Dictionary<Keys, (char Normal, char Shift)> keyMappings Field Value Dictionary<Keys, (char Normal, char Shift)> lastLoggerMessageCount private int lastLoggerMessageCount Field Value int padding private readonly int padding Field Value int prevKeyboardState private KeyboardState prevKeyboardState Field Value KeyboardState previousGameState private GameState previousGameState Field Value GameState previousMouseState private MouseState previousMouseState Field Value MouseState prompt private readonly string prompt Field Value string promptColor private readonly Color promptColor Field Value Color showCursor private bool showCursor Field Value bool spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch textColor private readonly Color textColor Field Value Color textScale private readonly float textScale Field Value float Properties Pausible public override bool Pausible { get; } Property Value bool UseScaledGameTime public override bool UseScaledGameTime { get; } Property Value bool Methods AddOutputLine(ref TerminalComponent, string) private void AddOutputLine(ref TerminalComponent terminal, string text) Parameters terminal TerminalComponent text string CloseTerminal() private void CloseTerminal() Draw(GameTime) public void Draw(GameTime gameTime) Parameters gameTime GameTime ExecuteCommand(ref TerminalComponent, string) private void ExecuteCommand(ref TerminalComponent terminal, string commandInput) Parameters terminal TerminalComponent commandInput string FormatValue(object) private string FormatValue(object value) Parameters value object Returns string GetSetMethodForComponent(Type) private Action<World, Entity, object> GetSetMethodForComponent(Type componentType) Parameters componentType Type Returns Action<World, Entity, object> GetTerminalEntity() private Entity GetTerminalEntity() Returns Entity Initialize(World) public override void Initialize(World world) Parameters world World InitializeCommands() private void InitializeCommands() InitializeKeyMappings() private void InitializeKeyMappings() OpenTerminal() private void OpenTerminal() ParseColoredText(string) private List<ColoredTextSegment> ParseColoredText(string text) Parameters text string Returns List<ColoredTextSegment> ProcessKey(Keys, ref TerminalComponent) private void ProcessKey(Keys key, ref TerminalComponent terminal) Parameters key Keys terminal TerminalComponent ProcessKeyboardInput(ref TerminalComponent, GameTime) private void ProcessKeyboardInput(ref TerminalComponent terminal, GameTime gameTime) Parameters terminal TerminalComponent gameTime GameTime SaveCombinedLog(List<string>, string) private string SaveCombinedLog(List<string> logEntries, string fileName = null) Parameters logEntries List<string> fileName string Returns string SetComponentPropertyValue(Entity, string, string, string) private string SetComponentPropertyValue(Entity entity, string componentName, string propertyName, string valueString) Parameters entity Entity componentName string propertyName string valueString string Returns string Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime WrapColoredText(List<ColoredTextSegment>, SpriteFont, float, float) private List<List<ColoredTextSegment>> WrapColoredText(List<ColoredTextSegment> segments, SpriteFont font, float maxWidth, float scale) Parameters segments List<ColoredTextSegment> font SpriteFont maxWidth float scale float Returns List<List<ColoredTextSegment>>"
  },
  "api/ECS.Systems.Debug.html": {
    "href": "api/ECS.Systems.Debug.html",
    "title": "Namespace ECS.Systems.Debug | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Debug Classes ActionDebugSystem ActionEventDebugSystem CollisionDebugSystem DebugGroundedSystem DebugRenderSystem GamePadDebugSystem RawInputDebugSystem TerminalSystem Structs ColoredTextSegment"
  },
  "api/ECS.Systems.Effects.EffectApplicationSystem.html": {
    "href": "api/ECS.Systems.Effects.EffectApplicationSystem.html",
    "title": "Class EffectApplicationSystem | Super Plant BroZ",
    "summary": "Class EffectApplicationSystem Namespace ECS.Systems.Effects Assembly ECS.dll public class EffectApplicationSystem : SystemBase, ISystem Inheritance object SystemBase EffectApplicationSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EffectApplicationSystem(GameStateManager) public EffectApplicationSystem(GameStateManager gameStateManager) Parameters gameStateManager GameStateManager Fields gameStateManager private GameStateManager gameStateManager Field Value GameStateManager Methods ApplyEffectsFromItem(Entity, Entity) private void ApplyEffectsFromItem(Entity itemEntity, Entity playerEntity) Parameters itemEntity Entity playerEntity Entity ApplyGravityReduction(Entity, float, float) private void ApplyGravityReduction(Entity entity, float duration, float magnitude) Parameters entity Entity duration float magnitude float ApplyInvincibility(Entity, float, float) private void ApplyInvincibility(Entity entity, float duration, float magnitude) Parameters entity Entity duration float magnitude float ApplyJumpBoost(Entity, float, float) private void ApplyJumpBoost(Entity entity, float duration, float magnitude) Parameters entity Entity duration float magnitude float ApplyMassChange(Entity, float, float) private void ApplyMassChange(Entity entity, float duration, float magnitude) Parameters entity Entity duration float magnitude float ApplyScaleChange(Entity, float, float) private void ApplyScaleChange(Entity entity, float duration, float magnitude) Parameters entity Entity duration float magnitude float ApplySpeedBoost(Entity, float, float) private void ApplySpeedBoost(Entity entity, float duration, float magnitude) Parameters entity Entity duration float magnitude float EnsureEffectTimer(Entity) private void EnsureEffectTimer(Entity entity) Parameters entity Entity HandleEffectTimers(IEvent) private void HandleEffectTimers(IEvent evt) Parameters evt IEvent HandleItemPickup(IEvent) private void HandleItemPickup(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World RemoveGravityReduction(Entity) private void RemoveGravityReduction(Entity entity) Parameters entity Entity RemoveInvincibility(Entity) private void RemoveInvincibility(Entity entity) Parameters entity Entity RemoveJumpBoost(Entity) private void RemoveJumpBoost(Entity entity) Parameters entity Entity RemoveMassChange(Entity) private void RemoveMassChange(Entity entity) Parameters entity Entity RemoveScaleChange(Entity) private void RemoveScaleChange(Entity entity) Parameters entity Entity RemoveSpeedBoost(Entity) private void RemoveSpeedBoost(Entity entity) Parameters entity Entity RestoreOriginalValue<T>(Entity) private void RestoreOriginalValue<T>(Entity entity) where T : struct Parameters entity Entity Type Parameters T StoreOriginalValue<T>(Entity) private void StoreOriginalValue<T>(Entity entity) where T : struct Parameters entity Entity Type Parameters T StoreOriginalValues(Entity) private void StoreOriginalValues(Entity entity) Parameters entity Entity Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdateEffectTime<T>(Entity, Action<Entity>) private void UpdateEffectTime<T>(Entity entity, Action<Entity> removeAction) where T : struct, IEffectBase Parameters entity Entity removeAction Action<Entity> Type Parameters T UpdateEffects(Entity) private void UpdateEffects(Entity entity) Parameters entity Entity"
  },
  "api/ECS.Systems.Effects.html": {
    "href": "api/ECS.Systems.Effects.html",
    "title": "Namespace ECS.Systems.Effects | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Effects Classes EffectApplicationSystem"
  },
  "api/ECS.Systems.Hitbox.AttackHitSystem.html": {
    "href": "api/ECS.Systems.Hitbox.AttackHitSystem.html",
    "title": "Class AttackHitSystem | Super Plant BroZ",
    "summary": "Class AttackHitSystem Namespace ECS.Systems.Hitbox Assembly ECS.dll public class AttackHitSystem : SuperHitSystem, ISystem Inheritance object SystemBase SuperHitSystem AttackHitSystem Implements ISystem Inherited Members SuperHitSystem.SendHitEvent(Entity, Entity) SuperHitSystem.isBlocking(Entity) SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleHitEvent(IEvent) private void HandleHitEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Hitbox.HitDetectionSystem.html": {
    "href": "api/ECS.Systems.Hitbox.HitDetectionSystem.html",
    "title": "Class HitDetectionSystem | Super Plant BroZ",
    "summary": "Class HitDetectionSystem Namespace ECS.Systems.Hitbox Assembly ECS.dll public class HitDetectionSystem : SystemBase, ISystem Inheritance object SystemBase HitDetectionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleCollisionEvent(IEvent) private void HandleCollisionEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Hitbox.ProjectileHitSystem.html": {
    "href": "api/ECS.Systems.Hitbox.ProjectileHitSystem.html",
    "title": "Class ProjectileHitSystem | Super Plant BroZ",
    "summary": "Class ProjectileHitSystem Namespace ECS.Systems.Hitbox Assembly ECS.dll public class ProjectileHitSystem : SuperHitSystem, ISystem Inheritance object SystemBase SuperHitSystem ProjectileHitSystem Implements ISystem Inherited Members SuperHitSystem.SendHitEvent(Entity, Entity) SuperHitSystem.isBlocking(Entity) SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleProjectileDespawn(Entity, Entity) private void HandleProjectileDespawn(Entity attacker, Entity target) Parameters attacker Entity target Entity HandleProjectileHitEvent(IEvent) private void HandleProjectileHitEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime isCollidingWithParent(Entity, Entity) private bool isCollidingWithParent(Entity attacker, Entity target) Parameters attacker Entity target Entity Returns bool"
  },
  "api/ECS.Systems.Hitbox.SuperHitSystem.html": {
    "href": "api/ECS.Systems.Hitbox.SuperHitSystem.html",
    "title": "Class SuperHitSystem | Super Plant BroZ",
    "summary": "Class SuperHitSystem Namespace ECS.Systems.Hitbox Assembly ECS.dll public class SuperHitSystem : SystemBase, ISystem Inheritance object SystemBase SuperHitSystem Implements ISystem Derived AttackHitSystem ProjectileHitSystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(World) public override void Initialize(World world) Parameters world World SendHitEvent(Entity, Entity) protected void SendHitEvent(Entity attacker, Entity target) Parameters attacker Entity target Entity Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime isBlocking(Entity) protected bool isBlocking(Entity entity) Parameters entity Entity Returns bool"
  },
  "api/ECS.Systems.Hitbox.html": {
    "href": "api/ECS.Systems.Hitbox.html",
    "title": "Namespace ECS.Systems.Hitbox | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Hitbox Classes AttackHitSystem HitDetectionSystem ProjectileHitSystem SuperHitSystem"
  },
  "api/ECS.Systems.Input.InputMappingSystem.html": {
    "href": "api/ECS.Systems.Input.InputMappingSystem.html",
    "title": "Class InputMappingSystem | Super Plant BroZ",
    "summary": "Class InputMappingSystem Namespace ECS.Systems.Input Assembly ECS.dll public class InputMappingSystem : SystemBase, ISystem Inheritance object SystemBase InputMappingSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields activeActions private Dictionary<Entity, Dictionary<string, bool>> activeActions Field Value Dictionary<Entity, Dictionary<string, bool>> Properties Pausible public override bool Pausible { get; } Property Value bool Methods GetDirection(bool, bool, bool, bool) private static AttackDirection? GetDirection(bool up, bool down, bool left, bool right) Parameters up bool down bool left bool right bool Returns AttackDirection? HandleGamepadInput(Entity, RawInputEvent, InputConfig) private void HandleGamepadInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig HandleJoystickInput(Entity, RawInputEvent, InputConfig) private void HandleJoystickInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig HandleKeyboardInput(Entity, RawInputEvent, InputConfig) private void HandleKeyboardInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig HandleRawInput(IEvent) private void HandleRawInput(IEvent evt) Parameters evt IEvent HandleSpecializedAttackInput(Entity, RawInputEvent, InputConfig) private void HandleSpecializedAttackInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig HandleTriggerInput(Entity, RawInputEvent, InputConfig) private void HandleTriggerInput(Entity entity, RawInputEvent rawInput, InputConfig config) Parameters entity Entity rawInput RawInputEvent config InputConfig Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Input.RawInputSystem.html": {
    "href": "api/ECS.Systems.Input.RawInputSystem.html",
    "title": "Class RawInputSystem | Super Plant BroZ",
    "summary": "Class RawInputSystem Namespace ECS.Systems.Input Assembly ECS.dll public class RawInputSystem : SystemBase, ISystem Inheritance object SystemBase RawInputSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields leftDirection private Dictionary<Entity, JoystickDirection> leftDirection Field Value Dictionary<Entity, JoystickDirection> pressedButtons private Dictionary<Entity, HashSet<Buttons>> pressedButtons Field Value Dictionary<Entity, HashSet<Buttons>> pressedKeys private Dictionary<Entity, HashSet<Keys>> pressedKeys Field Value Dictionary<Entity, HashSet<Keys>> pressedTriggerList private Dictionary<Entity, HashSet<TriggerType>> pressedTriggerList Field Value Dictionary<Entity, HashSet<TriggerType>> rightDirection private Dictionary<Entity, JoystickDirection> rightDirection Field Value Dictionary<Entity, JoystickDirection> Properties Pausible public override bool Pausible { get; } Property Value bool Methods GetJoyStickDirection(Vector2, float) private JoystickDirection GetJoyStickDirection(Vector2 joystick, float threshold) Parameters joystick Vector2 threshold float Returns JoystickDirection HandleGamePad(World, GameTime, GamePadState, PlayerIndex) private void HandleGamePad(World world, GameTime gameTime, GamePadState gamePadState, PlayerIndex player) Parameters world World gameTime GameTime gamePadState GamePadState player PlayerIndex HandleJoystick(Entity, JoystickDirection, float, Vector2, PlayerIndex, JoystickType, Dictionary<Entity, JoystickDirection>) private void HandleJoystick(Entity entity, JoystickDirection direction, float threshold, Vector2 joystickValue, PlayerIndex player, JoystickType joystickType, Dictionary<Entity, JoystickDirection> directionMap) Parameters entity Entity direction JoystickDirection threshold float joystickValue Vector2 player PlayerIndex joystickType JoystickType directionMap Dictionary<Entity, JoystickDirection> HandleJoysticks(World, GameTime, GamePadState, PlayerIndex) private void HandleJoysticks(World world, GameTime gameTime, GamePadState gamePadState, PlayerIndex player) Parameters world World gameTime GameTime gamePadState GamePadState player PlayerIndex HandleKeys(World, GameTime, PlayerIndex) private void HandleKeys(World world, GameTime gameTime, PlayerIndex player) Parameters world World gameTime GameTime player PlayerIndex HandleTriggers(World, GameTime, GamePadState, PlayerIndex) private void HandleTriggers(World world, GameTime gameTime, GamePadState gamePadState, PlayerIndex player) Parameters world World gameTime GameTime gamePadState GamePadState player PlayerIndex IsListening(PlayerIndex, string) private bool IsListening(PlayerIndex player, string port) Parameters player PlayerIndex port string Returns bool PublishRawInputEvent(Entity, Keys?, Buttons?, bool, bool, bool, JoystickType?, Vector2?, TriggerType?, JoystickDirection?, float?, PlayerIndex) private void PublishRawInputEvent(Entity entity, Keys? key, Buttons? button, bool isGamePad, bool isJoystick, bool isTrigger, JoystickType? joystickType, Vector2? joystickValue, TriggerType? triggerType, JoystickDirection? joystickDirection, float? triggerValue, PlayerIndex player) Parameters entity Entity key Keys? button Buttons? isGamePad bool isJoystick bool isTrigger bool joystickType JoystickType? joystickValue Vector2? triggerType TriggerType? joystickDirection JoystickDirection? triggerValue float? player PlayerIndex Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Input.html": {
    "href": "api/ECS.Systems.Input.html",
    "title": "Namespace ECS.Systems.Input | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Input Classes InputMappingSystem RawInputSystem"
  },
  "api/ECS.Systems.Items.ItemSwitchSystem.html": {
    "href": "api/ECS.Systems.Items.ItemSwitchSystem.html",
    "title": "Class ItemSwitchSystem | Super Plant BroZ",
    "summary": "Class ItemSwitchSystem Namespace ECS.Systems.Items Assembly ECS.dll public class ItemSwitchSystem : SystemBase, ISystem Inheritance object SystemBase ItemSwitchSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields actionDirections private readonly Dictionary<string, int> actionDirections Field Value Dictionary<string, int> Methods HandleItemSwitchAction(IEvent) private void HandleItemSwitchAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Items.ItemSystem.html": {
    "href": "api/ECS.Systems.Items.ItemSystem.html",
    "title": "Class ItemSystem | Super Plant BroZ",
    "summary": "Class ItemSystem Namespace ECS.Systems.Items Assembly ECS.dll public class ItemSystem : SystemBase, ISystem Inheritance object SystemBase ItemSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FindAndPickupItem(Entity) private void FindAndPickupItem(Entity player) Parameters player Entity HandlePickup(Entity, Entity) private void HandlePickup(Entity itemEntity, Entity playerEntity) Parameters itemEntity Entity playerEntity Entity HandlePickupInput(IEvent) private void HandlePickupInput(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World IsItem(Entity) private bool IsItem(Entity entity) Parameters entity Entity Returns bool IsPlayer(Entity) private bool IsPlayer(Entity entity) Parameters entity Entity Returns bool Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Items.LevelLoaderSystem.html": {
    "href": "api/ECS.Systems.Items.LevelLoaderSystem.html",
    "title": "Class LevelLoaderSystem | Super Plant BroZ",
    "summary": "Class LevelLoaderSystem Namespace ECS.Systems.Items Assembly ECS.dll public class LevelLoaderSystem : SystemBase, ISystem Inheritance object SystemBase LevelLoaderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LevelLoaderSystem(GameStateManager, LevelLoader) public LevelLoaderSystem(GameStateManager stateManager, LevelLoader level) Parameters stateManager GameStateManager level LevelLoader Fields changeLevel private bool changeLevel Field Value bool gameStateManager private GameStateManager gameStateManager Field Value GameStateManager level private LevelLoader level Field Value LevelLoader Methods HandleLevelSwitch(IEvent) private void HandleLevelSwitch(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime clearCurrentEntities() private void clearCurrentEntities()"
  },
  "api/ECS.Systems.Items.LevelSwitchSystem.html": {
    "href": "api/ECS.Systems.Items.LevelSwitchSystem.html",
    "title": "Class LevelSwitchSystem | Super Plant BroZ",
    "summary": "Class LevelSwitchSystem Namespace ECS.Systems.Items Assembly ECS.dll public class LevelSwitchSystem : SystemBase, ISystem Inheritance object SystemBase LevelSwitchSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LevelSwitchSystem(GameStateManager) public LevelSwitchSystem(GameStateManager stateManager) Parameters stateManager GameStateManager Fields gameStateManager private GameStateManager gameStateManager Field Value GameStateManager index private int index Field Value int levelDirections private readonly Dictionary<string, int> levelDirections Field Value Dictionary<string, int> levelSwitchNames private List<string> levelSwitchNames Field Value List<string> needsToChange private bool needsToChange Field Value bool Methods FillLevelList() private void FillLevelList() HandleLevelSwitchAction(IEvent) private void HandleLevelSwitchAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Items.html": {
    "href": "api/ECS.Systems.Items.html",
    "title": "Namespace ECS.Systems.Items | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Items Classes ItemSwitchSystem ItemSystem LevelLoaderSystem LevelSwitchSystem"
  },
  "api/ECS.Systems.Lives.LivesSystem.html": {
    "href": "api/ECS.Systems.Lives.LivesSystem.html",
    "title": "Class LivesSystem | Super Plant BroZ",
    "summary": "Class LivesSystem Namespace ECS.Systems.Lives Assembly ECS.dll public class LivesSystem : SystemBase, ISystem Inheritance object SystemBase LivesSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleDespawn(IEvent) private void HandleDespawn(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Lives.html": {
    "href": "api/ECS.Systems.Lives.html",
    "title": "Namespace ECS.Systems.Lives | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Lives Classes LivesSystem"
  },
  "api/ECS.Systems.Map.PlatformMoveSystem.html": {
    "href": "api/ECS.Systems.Map.PlatformMoveSystem.html",
    "title": "Class PlatformMoveSystem | Super Plant BroZ",
    "summary": "Class PlatformMoveSystem Namespace ECS.Systems.Map Assembly ECS.dll public class PlatformMoveSystem : SystemBase, ISystem Inheritance object SystemBase PlatformMoveSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DIRECTION_CHANGE_GRACE_PERIOD private const int DIRECTION_CHANGE_GRACE_PERIOD = 15 Field Value int PLATFORM_SPEED private const float PLATFORM_SPEED = 40 Field Value float POINT_THRESHOLD private const float POINT_THRESHOLD = 5 Field Value float Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Map.html": {
    "href": "api/ECS.Systems.Map.html",
    "title": "Namespace ECS.Systems.Map | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Map Classes PlatformMoveSystem"
  },
  "api/ECS.Systems.Objects.ObjectSwitchSystem.html": {
    "href": "api/ECS.Systems.Objects.ObjectSwitchSystem.html",
    "title": "Class ObjectSwitchSystem | Super Plant BroZ",
    "summary": "Class ObjectSwitchSystem Namespace ECS.Systems.Objects Assembly ECS.dll public class ObjectSwitchSystem : SystemBase, ISystem Inheritance object SystemBase ObjectSwitchSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields actionDirections private readonly Dictionary<string, int> actionDirections Field Value Dictionary<string, int> Methods HandleObjectSwitchAction(IEvent) private void HandleObjectSwitchAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Objects.html": {
    "href": "api/ECS.Systems.Objects.html",
    "title": "Namespace ECS.Systems.Objects | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Objects Classes ObjectSwitchSystem"
  },
  "api/ECS.Systems.Physics.AirControlSystem.html": {
    "href": "api/ECS.Systems.Physics.AirControlSystem.html",
    "title": "Class AirControlSystem | Super Plant BroZ",
    "summary": "Class AirControlSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class AirControlSystem : SystemBase, ISystem Inheritance object SystemBase AirControlSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields isWalkingLeft private Dictionary<Entity, bool> isWalkingLeft Field Value Dictionary<Entity, bool> isWalkingRight private Dictionary<Entity, bool> isWalkingRight Field Value Dictionary<Entity, bool> Methods HandleAirMoveAction(IEvent) private void HandleAirMoveAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.AirResistanceSystem.html": {
    "href": "api/ECS.Systems.Physics.AirResistanceSystem.html",
    "title": "Class AirResistanceSystem | Super Plant BroZ",
    "summary": "Class AirResistanceSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class AirResistanceSystem : SystemBase, ISystem Inheritance object SystemBase AirResistanceSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.DropThroughSystem.html": {
    "href": "api/ECS.Systems.Physics.DropThroughSystem.html",
    "title": "Class DropThroughSystem | Super Plant BroZ",
    "summary": "Class DropThroughSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class DropThroughSystem : SystemBase, ISystem Inheritance object SystemBase DropThroughSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleDropThroughAction(IEvent) private void HandleDropThroughAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.ForceSystem.html": {
    "href": "api/ECS.Systems.Physics.ForceSystem.html",
    "title": "Class ForceSystem | Super Plant BroZ",
    "summary": "Class ForceSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class ForceSystem : SystemBase, ISystem Inheritance object SystemBase ForceSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.FrictionSystem.html": {
    "href": "api/ECS.Systems.Physics.FrictionSystem.html",
    "title": "Class FrictionSystem | Super Plant BroZ",
    "summary": "Class FrictionSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class FrictionSystem : SystemBase, ISystem Inheritance object SystemBase FrictionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClampSmallValues(Vector2, float) private Vector2 ClampSmallValues(Vector2 vector, float threshold = 1E-10) Parameters vector Vector2 threshold float Returns Vector2 Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.GravitySystem.html": {
    "href": "api/ECS.Systems.Physics.GravitySystem.html",
    "title": "Class GravitySystem | Super Plant BroZ",
    "summary": "Class GravitySystem Namespace ECS.Systems.Physics Assembly ECS.dll public class GravitySystem : SystemBase, ISystem Inheritance object SystemBase GravitySystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GRAVITY_ACCELERATION private const float GRAVITY_ACCELERATION = 1000 Field Value float gravity private readonly Vector2 gravity Field Value Vector2 Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.GroundedSystem.html": {
    "href": "api/ECS.Systems.Physics.GroundedSystem.html",
    "title": "Class GroundedSystem | Super Plant BroZ",
    "summary": "Class GroundedSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class GroundedSystem : SystemBase, ISystem Inheritance object SystemBase GroundedSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SLOPE_THRESHOLD private const float SLOPE_THRESHOLD = 0.7 Field Value float UNGROUNDED_DELAY private const float UNGROUNDED_DELAY = 0.1 Field Value float Methods HandleCollision(IEvent) private void HandleCollision(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdateEntityGroundedState(Entity, CollisionEvent) private void UpdateEntityGroundedState(Entity entity, CollisionEvent collision) Parameters entity Entity collision CollisionEvent"
  },
  "api/ECS.Systems.Physics.JumpSystem.html": {
    "href": "api/ECS.Systems.Physics.JumpSystem.html",
    "title": "Class JumpSystem | Super Plant BroZ",
    "summary": "Class JumpSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class JumpSystem : SystemBase, ISystem Inheritance object SystemBase JumpSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleJump(IEvent) private void HandleJump(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.PlatformPassengerSystem.html": {
    "href": "api/ECS.Systems.Physics.PlatformPassengerSystem.html",
    "title": "Class PlatformPassengerSystem | Super Plant BroZ",
    "summary": "Class PlatformPassengerSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class PlatformPassengerSystem : SystemBase, ISystem Inheritance object SystemBase PlatformPassengerSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields STICKY_FRAMES private const int STICKY_FRAMES = 5 Field Value int entityToPlatform private Dictionary<Entity, Entity> entityToPlatform Field Value Dictionary<Entity, Entity> graceFrames private Dictionary<Entity, int> graceFrames Field Value Dictionary<Entity, int> previousPlatformPositions private Dictionary<Entity, Vector2> previousPlatformPositions Field Value Dictionary<Entity, Vector2> Methods HandleCollision(IEvent) private void HandleCollision(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.PositionSystem.html": {
    "href": "api/ECS.Systems.Physics.PositionSystem.html",
    "title": "Class PositionSystem | Super Plant BroZ",
    "summary": "Class PositionSystem Namespace ECS.Systems.Physics Assembly ECS.dll public class PositionSystem : SystemBase, ISystem Inheritance object SystemBase PositionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.VelocitySystem.html": {
    "href": "api/ECS.Systems.Physics.VelocitySystem.html",
    "title": "Class VelocitySystem | Super Plant BroZ",
    "summary": "Class VelocitySystem Namespace ECS.Systems.Physics Assembly ECS.dll public class VelocitySystem : SystemBase, ISystem Inheritance object SystemBase VelocitySystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Physics.html": {
    "href": "api/ECS.Systems.Physics.html",
    "title": "Namespace ECS.Systems.Physics | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Physics Classes AirControlSystem AirResistanceSystem DropThroughSystem ForceSystem FrictionSystem GravitySystem GroundedSystem JumpSystem PlatformPassengerSystem PositionSystem VelocitySystem"
  },
  "api/ECS.Systems.Player.PlayerDespawnSystem.html": {
    "href": "api/ECS.Systems.Player.PlayerDespawnSystem.html",
    "title": "Class PlayerDespawnSystem | Super Plant BroZ",
    "summary": "Class PlayerDespawnSystem Namespace ECS.Systems.Player Assembly ECS.dll public class PlayerDespawnSystem : SystemBase, ISystem Inheritance object SystemBase PlayerDespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerDespawnSystem(GraphicsManager) public PlayerDespawnSystem(GraphicsManager graphics) Parameters graphics GraphicsManager Fields graphicsManager private GraphicsManager graphicsManager Field Value GraphicsManager Methods Initialize(World) public override void Initialize(World world) Parameters world World IsOutOfBounds(Entity) private bool IsOutOfBounds(Entity entity) Parameters entity Entity Returns bool Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Player.PlayerSpawningSystem.html": {
    "href": "api/ECS.Systems.Player.PlayerSpawningSystem.html",
    "title": "Class PlayerSpawningSystem | Super Plant BroZ",
    "summary": "Class PlayerSpawningSystem Namespace ECS.Systems.Player Assembly ECS.dll public class PlayerSpawningSystem : SystemBase, ISystem Inheritance object SystemBase PlayerSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleSpawn(IEvent) private void HandleSpawn(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Player.html": {
    "href": "api/ECS.Systems.Player.html",
    "title": "Namespace ECS.Systems.Player | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Player Classes PlayerDespawnSystem PlayerSpawningSystem"
  },
  "api/ECS.Systems.Projectile.HitboxDespawnSystem.html": {
    "href": "api/ECS.Systems.Projectile.HitboxDespawnSystem.html",
    "title": "Class HitboxDespawnSystem | Super Plant BroZ",
    "summary": "Class HitboxDespawnSystem Namespace ECS.Systems.Projectile Assembly ECS.dll public class HitboxDespawnSystem : SystemBase, ISystem Inheritance object SystemBase HitboxDespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields despawners private Stack<Polygon> despawners Field Value Stack<Polygon> Methods HandleTimerUp(IEvent) private void HandleTimerUp(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Projectile.ProjectileShootingSystem.html": {
    "href": "api/ECS.Systems.Projectile.ProjectileShootingSystem.html",
    "title": "Class ProjectileShootingSystem | Super Plant BroZ",
    "summary": "Class ProjectileShootingSystem Namespace ECS.Systems.Projectile Assembly ECS.dll public class ProjectileShootingSystem : SystemBase, ISystem Inheritance object SystemBase ProjectileShootingSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleShootAction(IEvent) private void HandleShootAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Projectile.html": {
    "href": "api/ECS.Systems.Projectile.html",
    "title": "Namespace ECS.Systems.Projectile | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Projectile Classes HitboxDespawnSystem ProjectileShootingSystem"
  },
  "api/ECS.Systems.Sound.SoundSystem.html": {
    "href": "api/ECS.Systems.Sound.SoundSystem.html",
    "title": "Class SoundSystem | Super Plant BroZ",
    "summary": "Class SoundSystem Namespace ECS.Systems.Sound Assembly ECS.dll public class SoundSystem : SystemBase, ISystem Inheritance object SystemBase SoundSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SoundSystem(SoundManager) public SoundSystem(SoundManager soundManager) Parameters soundManager SoundManager Fields soundManager private SoundManager soundManager Field Value SoundManager Methods HandleSoundEvent(IEvent) public void HandleSoundEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Sound.html": {
    "href": "api/ECS.Systems.Sound.html",
    "title": "Namespace ECS.Systems.Sound | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Sound Classes SoundSystem"
  },
  "api/ECS.Systems.Spawning.DespawnSystem.html": {
    "href": "api/ECS.Systems.Spawning.DespawnSystem.html",
    "title": "Class DespawnSystem | Super Plant BroZ",
    "summary": "Class DespawnSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class DespawnSystem : SystemBase, ISystem Inheritance object SystemBase DespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields despawners private Stack<Entity> despawners Field Value Stack<Entity> Methods HandleDespawn(IEvent) private void HandleDespawn(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.HitboxSpawningSystem.html": {
    "href": "api/ECS.Systems.Spawning.HitboxSpawningSystem.html",
    "title": "Class HitboxSpawningSystem | Super Plant BroZ",
    "summary": "Class HitboxSpawningSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class HitboxSpawningSystem : SystemBase, ISystem Inheritance object SystemBase HitboxSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HitboxSpawningSystem(GameAssets) public HitboxSpawningSystem(GameAssets assets) Parameters assets GameAssets Fields assets private GameAssets assets Field Value GameAssets entityFactory private EntityFactory entityFactory Field Value EntityFactory Methods GetCorrectHitbox(HitboxSpawnEvent) private Polygon GetCorrectHitbox(HitboxSpawnEvent hitboxSpawnEvent) Parameters hitboxSpawnEvent HitboxSpawnEvent Returns Polygon HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World StartTimer(HitboxSpawnEvent) private void StartTimer(HitboxSpawnEvent hitboxSpawnEvent) Parameters hitboxSpawnEvent HitboxSpawnEvent Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.ProjectileDespawnSystem.html": {
    "href": "api/ECS.Systems.Spawning.ProjectileDespawnSystem.html",
    "title": "Class ProjectileDespawnSystem | Super Plant BroZ",
    "summary": "Class ProjectileDespawnSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class ProjectileDespawnSystem : SystemBase, ISystem Inheritance object SystemBase ProjectileDespawnSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleTimerUp(IEvent) private void HandleTimerUp(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.ProjectileSpawningSystem.html": {
    "href": "api/ECS.Systems.Spawning.ProjectileSpawningSystem.html",
    "title": "Class ProjectileSpawningSystem | Super Plant BroZ",
    "summary": "Class ProjectileSpawningSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class ProjectileSpawningSystem : SystemBase, ISystem Inheritance object SystemBase ProjectileSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectileSpawningSystem(GameAssets) public ProjectileSpawningSystem(GameAssets assets) Parameters assets GameAssets Fields assets private GameAssets assets Field Value GameAssets entityFactory private EntityFactory entityFactory Field Value EntityFactory spawners private Stack<(Entity, string)> spawners Field Value Stack<(Entity, string)> Methods HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.PvZDeathHandlingSystem.html": {
    "href": "api/ECS.Systems.Spawning.PvZDeathHandlingSystem.html",
    "title": "Class PvZDeathHandlingSystem | Super Plant BroZ",
    "summary": "Class PvZDeathHandlingSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class PvZDeathHandlingSystem : SystemBase, ISystem Inheritance object SystemBase PvZDeathHandlingSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleDeathEvent(IEvent) private void HandleDeathEvent(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World IsInGrid(Entity, GridInfo) Returns bool for if it is in the grid, and coordinates if it is. private (bool, int, int) IsInGrid(Entity entity, GridInfo gridInfo) Parameters entity Entity gridInfo GridInfo Returns (bool, int, int) RemoveFromGridIfPresent(Entity, Entity) private void RemoveFromGridIfPresent(Entity entity, Entity grid) Parameters entity Entity grid Entity RemoveFromZombieList(Entity, Entity) private void RemoveFromZombieList(Entity entity, Entity grid) Parameters entity Entity grid Entity Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.PvZDeathMonitoringSystem.html": {
    "href": "api/ECS.Systems.Spawning.PvZDeathMonitoringSystem.html",
    "title": "Class PvZDeathMonitoringSystem | Super Plant BroZ",
    "summary": "Class PvZDeathMonitoringSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class PvZDeathMonitoringSystem : SystemBase, ISystem Inheritance object SystemBase PvZDeathMonitoringSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DEATH_PERCENT_LIMIT private const int DEATH_PERCENT_LIMIT = 100 Field Value int Methods Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.PvZGridTimerUpdateSystem.html": {
    "href": "api/ECS.Systems.Spawning.PvZGridTimerUpdateSystem.html",
    "title": "Class PvZGridTimerUpdateSystem | Super Plant BroZ",
    "summary": "Class PvZGridTimerUpdateSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class PvZGridTimerUpdateSystem : SystemBase, ISystem Inheritance object SystemBase PvZGridTimerUpdateSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields timersToUpdate private Stack<UpdateTimerEvent> timersToUpdate Field Value Stack<UpdateTimerEvent> Methods HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.PvZSpawningSystem.html": {
    "href": "api/ECS.Systems.Spawning.PvZSpawningSystem.html",
    "title": "Class PvZSpawningSystem | Super Plant BroZ",
    "summary": "Class PvZSpawningSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class PvZSpawningSystem : SystemBase, ISystem Inheritance object SystemBase PvZSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PvZSpawningSystem(GameAssets) public PvZSpawningSystem(GameAssets assets) Parameters assets GameAssets Fields assets private GameAssets assets Field Value GameAssets entityFactory private EntityFactory entityFactory Field Value EntityFactory spawners private Stack<(Vector2, string, Entity, bool)> spawners Field Value Stack<(Vector2, string, Entity, bool)> Methods AssignZombieToRow(Entity, Entity) private void AssignZombieToRow(Entity entity, Entity grid) Parameters entity Entity grid Entity HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.SplatPeaSpawningSystem.html": {
    "href": "api/ECS.Systems.Spawning.SplatPeaSpawningSystem.html",
    "title": "Class SplatPeaSpawningSystem | Super Plant BroZ",
    "summary": "Class SplatPeaSpawningSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class SplatPeaSpawningSystem : SystemBase, ISystem Inheritance object SystemBase SplatPeaSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SplatPeaSpawningSystem(GameAssets) public SplatPeaSpawningSystem(GameAssets assets) Parameters assets GameAssets Fields assets private GameAssets assets Field Value GameAssets entityFactory private EntityFactory entityFactory Field Value EntityFactory spawners private Stack<ProjectileDespawnEvent> spawners Field Value Stack<ProjectileDespawnEvent> Methods HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.ZombieSpawningSystem.html": {
    "href": "api/ECS.Systems.Spawning.ZombieSpawningSystem.html",
    "title": "Class ZombieSpawningSystem | Super Plant BroZ",
    "summary": "Class ZombieSpawningSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class ZombieSpawningSystem : SystemBase, ISystem Inheritance object SystemBase ZombieSpawningSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSpawnPosition(Entity) private Vector2 GetSpawnPosition(Entity grid) Parameters grid Entity Returns Vector2 HandleSpawnAction(IEvent) private void HandleSpawnAction(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World ResetTimer(Entity) private void ResetTimer(Entity entity) Parameters entity Entity Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.ZombiesEatingBrainsSystem.html": {
    "href": "api/ECS.Systems.Spawning.ZombiesEatingBrainsSystem.html",
    "title": "Class ZombiesEatingBrainsSystem | Super Plant BroZ",
    "summary": "Class ZombiesEatingBrainsSystem Namespace ECS.Systems.Spawning Assembly ECS.dll public class ZombiesEatingBrainsSystem : SystemBase, ISystem Inheritance object SystemBase ZombiesEatingBrainsSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ZombiesEatingBrainsSystem(GameStateManager) public ZombiesEatingBrainsSystem(GameStateManager gameStateManager) Parameters gameStateManager GameStateManager Fields BrainsPosition private const float BrainsPosition = 300 Field Value float gameStateManager private GameStateManager gameStateManager Field Value GameStateManager Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Spawning.html": {
    "href": "api/ECS.Systems.Spawning.html",
    "title": "Namespace ECS.Systems.Spawning | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Spawning Classes DespawnSystem HitboxSpawningSystem ProjectileDespawnSystem ProjectileSpawningSystem PvZDeathHandlingSystem PvZDeathMonitoringSystem PvZGridTimerUpdateSystem PvZSpawningSystem SplatPeaSpawningSystem ZombieSpawningSystem ZombiesEatingBrainsSystem"
  },
  "api/ECS.Systems.State.GameStateSystem.html": {
    "href": "api/ECS.Systems.State.GameStateSystem.html",
    "title": "Class GameStateSystem | Super Plant BroZ",
    "summary": "Class GameStateSystem Namespace ECS.Systems.State Assembly ECS.dll public class GameStateSystem : SystemBase, ISystem Inheritance object SystemBase GameStateSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameStateSystem(GameStateManager) public GameStateSystem(GameStateManager gameStateManager) Parameters gameStateManager GameStateManager Fields gameStateManager private readonly GameStateManager gameStateManager Field Value GameStateManager stateHandlers private readonly Dictionary<string, Action> stateHandlers Field Value Dictionary<string, Action> Properties Pausible public override bool Pausible { get; } Property Value bool Methods HandleActionEvent(IEvent) private void HandleActionEvent(IEvent evt) Parameters evt IEvent HandleWinTimer(IEvent) private void HandleWinTimer(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.State.PlayerStateSystem.html": {
    "href": "api/ECS.Systems.State.PlayerStateSystem.html",
    "title": "Class PlayerStateSystem | Super Plant BroZ",
    "summary": "Class PlayerStateSystem Namespace ECS.Systems.State Assembly ECS.dll public class PlayerStateSystem : SystemBase, ISystem Inheritance object SystemBase PlayerStateSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields VELOCITY_THRESHOLD private const float VELOCITY_THRESHOLD = 100 Field Value float previousStates private Dictionary<Entity, PlayerState> previousStates Field Value Dictionary<Entity, PlayerState> Methods DetermineNextState(Entity) private PlayerState DetermineNextState(Entity entity) Parameters entity Entity Returns PlayerState HandleStateChangeRequest(IEvent) private void HandleStateChangeRequest(IEvent evt) Parameters evt IEvent HandleStateTimer(IEvent) private void HandleStateTimer(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World IsInPriorityState(PlayerState) private bool IsInPriorityState(PlayerState state) Parameters state PlayerState Returns bool SetState(Entity, PlayerState, bool) private void SetState(Entity entity, PlayerState newState, bool force) Parameters entity Entity newState PlayerState force bool ShouldOverrideState(PlayerState, PlayerState, bool) private bool ShouldOverrideState(PlayerState currentState, PlayerState newState, bool force) Parameters currentState PlayerState newState PlayerState force bool Returns bool Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.State.html": {
    "href": "api/ECS.Systems.State.html",
    "title": "Namespace ECS.Systems.State | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.State Classes GameStateSystem PlayerStateSystem"
  },
  "api/ECS.Systems.UI.DamageSystem.html": {
    "href": "api/ECS.Systems.UI.DamageSystem.html",
    "title": "Class DamageSystem | Super Plant BroZ",
    "summary": "Class DamageSystem Namespace ECS.Systems.UI Assembly ECS.dll public class DamageSystem : SystemBase, ISystem Inheritance object SystemBase DamageSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandlePercentChange(IEvent) private void HandlePercentChange(IEvent evt) Parameters evt IEvent Initialize(World) public override void Initialize(World world) Parameters world World Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.HUDRenderSystem.html": {
    "href": "api/ECS.Systems.UI.HUDRenderSystem.html",
    "title": "Class HUDRenderSystem | Super Plant BroZ",
    "summary": "Class HUDRenderSystem Namespace ECS.Systems.UI Assembly ECS.dll public class HUDRenderSystem : SystemBase, ISystem Inheritance object SystemBase HUDRenderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HUDRenderSystem(GameAssets, GraphicsManager) public HUDRenderSystem(GameAssets gameAssets, GraphicsManager graphicsManager) Parameters gameAssets GameAssets graphicsManager GraphicsManager Fields LAYER_OFFSET private const float LAYER_OFFSET = 1E-05 Field Value float assets private readonly GameAssets assets Field Value GameAssets graphics private readonly GraphicsManager graphics Field Value GraphicsManager renderQueue private List<Entity> renderQueue Field Value List<Entity> spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch Properties Pausible public override bool Pausible { get; } Property Value bool UseScaledGameTime public override bool UseScaledGameTime { get; } Property Value bool Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.MenuSystem.html": {
    "href": "api/ECS.Systems.UI.MenuSystem.html",
    "title": "Class MenuSystem | Super Plant BroZ",
    "summary": "Class MenuSystem Namespace ECS.Systems.UI Assembly ECS.dll public class MenuSystem : SystemBase, ISystem Inheritance object SystemBase MenuSystem Implements ISystem Inherited Members SystemBase.World SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MenuSystem(GameStateManager) public MenuSystem(GameStateManager gameStateManager) Parameters gameStateManager GameStateManager Fields STATE_CHANGE_COOLDOWN private const float STATE_CHANGE_COOLDOWN = 0.2 Field Value float buttonActions private readonly Dictionary<string, Action> buttonActions Field Value Dictionary<string, Action> characterButtonActions private readonly Dictionary<string, Action<Entity>> characterButtonActions Field Value Dictionary<string, Action<Entity>> gameStateManager private readonly GameStateManager gameStateManager Field Value GameStateManager keyActions private readonly Dictionary<string, Action<Entity>> keyActions Field Value Dictionary<string, Action<Entity>> lastHandledInputTime private double lastHandledInputTime Field Value double previousGameState private GameState previousGameState Field Value GameState stateChangeTimer private float stateChangeTimer Field Value float Properties Pausible public override bool Pausible { get; } Property Value bool Methods ChangeCurrentMenu(UIMenu, ref UIMenu) private void ChangeCurrentMenu(UIMenu menuIn, ref UIMenu menuOut) Parameters menuIn UIMenu menuOut UIMenu DecrementMenu(Entity) private void DecrementMenu(Entity entity) Parameters entity Entity DecrementMenuColumn(Entity) private void DecrementMenuColumn(Entity entity) Parameters entity Entity ExecuteMenuOption(Entity) private void ExecuteMenuOption(Entity entity) Parameters entity Entity GetCurrentGameState() private GameState GetCurrentGameState() Returns GameState HandleActionEvent(IEvent) private void HandleActionEvent(IEvent evt) Parameters evt IEvent IncrementMenu(Entity) private void IncrementMenu(Entity entity) Parameters entity Entity IncrementMenuColumn(Entity) private void IncrementMenuColumn(Entity entity) Parameters entity Entity Initialize(World) public override void Initialize(World world) Parameters world World NextCharacterMenu(Entity) private void NextCharacterMenu(Entity entity) Parameters entity Entity ResetButtonSelection(UIMenu) private void ResetButtonSelection(UIMenu menu) Parameters menu UIMenu ResetColumnSelection(UIMenu2D) private void ResetColumnSelection(UIMenu2D menu) Parameters menu UIMenu2D SetButtonActive(UIMenu, bool) private void SetButtonActive(UIMenu menu, bool active) Parameters menu UIMenu active bool StartSound(string) protected void StartSound(string key) Parameters key string ToggleAI(Entity) private void ToggleAI(Entity entity) Parameters entity Entity Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdateMenuActive(Entity, GameState) private void UpdateMenuActive(Entity entity, GameState currentState) Parameters entity Entity currentState GameState"
  },
  "api/ECS.Systems.UI.UIPositionSystem.html": {
    "href": "api/ECS.Systems.UI.UIPositionSystem.html",
    "title": "Class UIPositionSystem | Super Plant BroZ",
    "summary": "Class UIPositionSystem Namespace ECS.Systems.UI Assembly ECS.dll public class UIPositionSystem : SystemBase, ISystem Inheritance object SystemBase UIPositionSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UIPositionSystem(GraphicsManager) public UIPositionSystem(GraphicsManager graphicsManager) Parameters graphicsManager GraphicsManager Fields graphics private readonly GraphicsManager graphics Field Value GraphicsManager Properties Pausible public override bool Pausible { get; } Property Value bool Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.UITextRenderSystem.html": {
    "href": "api/ECS.Systems.UI.UITextRenderSystem.html",
    "title": "Class UITextRenderSystem | Super Plant BroZ",
    "summary": "Class UITextRenderSystem Namespace ECS.Systems.UI Assembly ECS.dll public class UITextRenderSystem : SystemBase, ISystem Inheritance object SystemBase UITextRenderSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UITextRenderSystem(GameAssets, GraphicsManager) public UITextRenderSystem(GameAssets assets, GraphicsManager graphicsManager) Parameters assets GameAssets graphicsManager GraphicsManager Fields assets private readonly GameAssets assets Field Value GameAssets graphics private readonly GraphicsManager graphics Field Value GraphicsManager spriteBatch private readonly SpriteBatch spriteBatch Field Value SpriteBatch Properties Pausible public override bool Pausible { get; } Property Value bool UseScaledGameTime public override bool UseScaledGameTime { get; } Property Value bool Methods CenterText(SpriteFont, string, TextCenter) private static Vector2 CenterText(SpriteFont font, string text, TextCenter center) Parameters font SpriteFont text string center TextCenter Returns Vector2 Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.UI.html": {
    "href": "api/ECS.Systems.UI.html",
    "title": "Namespace ECS.Systems.UI | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.UI Classes DamageSystem HUDRenderSystem MenuSystem UIPositionSystem UITextRenderSystem"
  },
  "api/ECS.Systems.Utilities.RandomSystem.html": {
    "href": "api/ECS.Systems.Utilities.RandomSystem.html",
    "title": "Class RandomSystem | Super Plant BroZ",
    "summary": "Class RandomSystem Namespace ECS.Systems.Utilities Assembly ECS.dll public class RandomSystem : SystemBase, ISystem Inheritance object SystemBase RandomSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime"
  },
  "api/ECS.Systems.Utilities.TimerSystem.html": {
    "href": "api/ECS.Systems.Utilities.TimerSystem.html",
    "title": "Class TimerSystem | Super Plant BroZ",
    "summary": "Class TimerSystem Namespace ECS.Systems.Utilities Assembly ECS.dll public class TimerSystem : SystemBase, ISystem Inheritance object SystemBase TimerSystem Implements ISystem Inherited Members SystemBase.World SystemBase.Initialize(World) SystemBase.HasComponents<T>(Entity) SystemBase.GetEntitiesWith<T>(Entity) SystemBase.GetComponent<T>(Entity) SystemBase.Subscribe<T>(Action<IEvent>) SystemBase.Publish<T>(T) SystemBase.Pausible SystemBase.UseScaledGameTime object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Update(World, GameTime) public override void Update(World world, GameTime gameTime) Parameters world World gameTime GameTime UpdateTimers(Entity, ref Timers, float) private void UpdateTimers(Entity entity, ref Timers timersComponent, float deltaTime) Parameters entity Entity timersComponent Timers deltaTime float"
  },
  "api/ECS.Systems.Utilities.html": {
    "href": "api/ECS.Systems.Utilities.html",
    "title": "Namespace ECS.Systems.Utilities | Super Plant BroZ",
    "summary": "Namespace ECS.Systems.Utilities Classes RandomSystem TimerSystem"
  },
  "api/ECS.Systems.html": {
    "href": "api/ECS.Systems.html",
    "title": "Namespace ECS.Systems | Super Plant BroZ",
    "summary": "Namespace ECS.Systems Namespaces ECS.Systems.AI ECS.Systems.Animation ECS.Systems.Attacking ECS.Systems.Blocking ECS.Systems.Camera ECS.Systems.Characters ECS.Systems.Collision ECS.Systems.Damage ECS.Systems.Debug ECS.Systems.Effects ECS.Systems.Hitbox ECS.Systems.Input ECS.Systems.Items ECS.Systems.Lives ECS.Systems.Map ECS.Systems.Objects ECS.Systems.Physics ECS.Systems.Player ECS.Systems.Projectile ECS.Systems.Sound ECS.Systems.Spawning ECS.Systems.State ECS.Systems.UI ECS.Systems.Utilities"
  },
  "api/ECS.html": {
    "href": "api/ECS.html",
    "title": "Namespace ECS | Super Plant BroZ",
    "summary": "Namespace ECS Namespaces ECS.Components ECS.Core ECS.Events ECS.Resources ECS.Systems Classes Game1 Program"
  },
  "docs/Backlog.html": {
    "href": "docs/Backlog.html",
    "title": "Backlog | Super Plant BroZ",
    "summary": "Backlog From last sprint Character select screen was implemented Effects upon item pickups were implemented, along with item spawning Backlog for this sprint No originally planned items fell through, though some features are not as fleshed out as they could be. PvZ doesn't have a sun economy, though you can still plant peashooters and sunflowers to shoot at the zombies. There is also no indicator of where the player is on the grid, so it can be difficult to tell where you are planting plants. The AI doesn't attack others, but it doesn't kill itself. Attacks could be more unique, but each character at least has a unique set of specials. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/AndyCodeQualityReview.html": {
    "href": "docs/CodeReviews/CodeQuality/AndyCodeQualityReview.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Andy Yu Date: February 12, 2025 Sprint: 2 Files reviewed: MoveSystem.cs, AttackSystem.cs, BlockSystem.cs, JumpSystem.cs Author of files: Katya Liber Code Smell Analysis 1. You Don't Need It Anymore All code written has a purpose, so they are always used 2. Large Method All methods are concise and focused 3. Large Class The system is concise and under 100 lines of code 4. Switch Statements No switch statements were used in the system 5. Data Clumps Data is well-organized No repeated groups of parameters 6. Same Name Different Meaning Variable names describe its purpose in the code and helps with understandability 7. While Not Done Loop No while loops were used, only conditionals that were descriptive 8. Too Many Parameters Methods did not have an overload of parameters Methods are a good length 9. Asymmetrical Code File is fairly symmetrical with the other files in the project 10. Comments as Smell There are a few comments, but there was no case of comments being used to explain complex code Comments used for readability Conclusion All of the files reviewed had no significant concerns regarding code smells. It followed good programming techniques. Each system is focused and has high cohesion. The code is concise and has no signs of repeatability. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Andy Yu Date: March 5, 2025 Sprint: 3 File(s) reviewed: SoundManager Author of file(s): Brendan Cabungcal Code Smell Analysis 1. You Don't Need It Anymore All code written has a purpose, so they are always used 2. Large Method All methods are concise and focused 3. Large Class The class is concise and under 100 lines of code 4. Switch Statements No switch statements were used in the system 5. Data Clumps Data is well-organized No repeated groups of parameters 6. Same Name Different Meaning Variable names describe its purpose in the code and helps with understandability 7. While Not Done Loop No while loops were used 8. Too Many Parameters Methods did not have an overload of parameters and they were good length or overly complicated 9. Asymmetrical Code File is fairly symmetrical with the other files in the project 10. Comments as Smell The file has no comments, but the code was readable, so they weren't needed Hypothetical Change Analysis Proposed Change: No change so far. Conclusion Everything looks good so far. Just needs more implementation. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint4.html": {
    "href": "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint4.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Andy Yu Date: April 3, 2025 Sprint: 4 File(s) reviewed: RawInputSystem Author of file(s): Peter Eberhard Code Smell Analysis 1. You Don't Need It Anymore All code written has a purpose, so they are always used 2. Large Method All methods are concise and focused 3. Large Class The class is over 100 lines of code, however, I believe each line is important and necessary for the system 4. Switch Statements No switch statements were used in the system 5. Data Clumps Data is well-organized No repeated groups of parameters 6. Same Name Different Meaning Variable names describe its purpose in the code and helps with understandability 7. While Not Done Loop No while loops were used 8. Too Many Parameters Methods did not have an overload of parameters and they were good length or overly complicated 9. Asymmetrical Code File is slightly larger than most files in the project 10. Comments as Smell The file has no comments, but the code was readable, so they weren't needed Hypothetical Change Analysis Proposed Change: No change so far. Conclusion Everything looks good so far. Great job! Previous Page"
  },
  "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint5.html": {
    "href": "docs/CodeReviews/CodeQuality/AndyCodeQualitySprint5.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Andy Yu Date: April 17, 2025 Sprint: 5 File(s) reviewed: PvZSpawningSystem Author of file(s): Ely Maddox Code Smell Analysis 1. You Don't Need It Anymore All code written has a purpose, so they are always used 2. Large Method All methods are concise and focused 3. Large Class The class is not over 100 lines of code, however, which is good 4. Switch Statements No switch statements were used in the system 5. Data Clumps Data is well-organized No repeated groups of parameters 6. Same Name Different Meaning Variable names describe its purpose in the code and helps with understandability 7. While Not Done Loop A while loop is used, but the exit condition is stated 8. Too Many Parameters Methods did not have an overload of parameters and they were good length or overly complicated 9. Asymmetrical Code File is fairly symmetrical to other files in the project 10. Comments as Smell The file has some comments, but the code was readable, so they weren't added to explain complex code Hypothetical Change Analysis Proposed Change: No change so far. Conclusion Everything looks good so far. Code was concise. Amazing job! Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrendanCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/BrendanCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brendan Cabungcal Date: February 14, 2025 Sprint: 2 File reviewed: AISystem.cs Author of file: Ely Maddox Code Smell Analysis 1. Code that never actually runs Makes the code longer and more complex than necessary Just delete the code and it will be easier to read 2. Comparing variables to null If not done carefully, it can lead to many issues, both syntactical and logical 3. Duplicate code Create a method Makes code longer than necessary 4. Methods too big We want simple, easy to read, code The method may be doing too much, extract another method from it Potentially, you could decompose conditionals 5. Strikingly similar subclasses Lots of duplicate code Could potentially move the common code into the parent class 6. Same name different meaning Overloaded vocabulary Leads to misinterpretation Reusing variable names is a sign that your function has run too long 7. Too many parameters Too complex Can be confusing especially if there are many parameters of the same type Could potentially have a mutable struct for some/all of the parameters 8. Variables with same name as type Make the name convey information about its contents Others reading your code will not know what the variable represents 9. Vague identifiers Method names too vague or ambiguous, therefore its funtion is not clear Could be a sign of a method having more than one function/responsibility 10. While not done loops Having the condition of the while just be a boolean variable set to false Shows the writer may not know the purpose of the loop or the exit condition Fixing this can make the code easier to read Conclusion The AISystem.cs file was written efficiently and it works great. No scent of anything fishy to me Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrendanCodeQualitySprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/BrendanCodeQualitySprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brendan Cabungcal Date: March 6, 2025 Sprint: 3 File reviewed: UIUpdateSystem Author of file: Brian Miller Code Smell Analysis 1. Code that never actually runs Makes the code longer and more complex than necessary Just delete the code and it will be easier to read 2. Comparing variables to null If not done carefully, it can lead to many issues, both syntactical and logical 3. Duplicate code Create a method Makes code longer than necessary 4. Methods too big We want simple, easy to read, code The method may be doing too much, extract another method from it Potentially, you could decompose conditionals 5. Strikingly similar subclasses Lots of duplicate code Could potentially move the common code into the parent class 6. Same name different meaning Overloaded vocabulary Leads to misinterpretation Reusing variable names is a sign that your function has run too long 7. Too many parameters Too complex Can be confusing especially if there are many parameters of the same type Could potentially have a mutable struct for some/all of the parameters 8. Variables with same name as type Make the name convey information about its contents Others reading your code will not know what the variable represents 9. Vague identifiers Method names too vague or ambiguous, therefore its funtion is not clear Could be a sign of a method having more than one function/responsibility 10. While not done loops Having the condition of the while just be a boolean variable set to false Shows the writer may not know the purpose of the loop or the exit condition Fixing this can make the code easier to read Hypothetical Change Analysis Proposed Change: No changes to propose Conclusion The UIUpdateSystem looks good, no sign of code smells Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrendanCodeQualitySprint4.html": {
    "href": "docs/CodeReviews/CodeQuality/BrendanCodeQualitySprint4.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brendan Cabungcal Date: April 3, 2025 Sprint: 4 File reviewed: ItemSystem.cs Author of file: Andy Yu Code Smell Analysis 1. Code that never actually runs Makes the code longer and more complex than necessary Just delete the code and it will be easier to read 2. Comparing variables to null If not done carefully, it can lead to many issues, both syntactical and logical 3. Duplicate code Create a method Makes code longer than necessary 4. Methods too big We want simple, easy to read, code The method may be doing too much, extract another method from it Potentially, you could decompose conditionals 5. Strikingly similar subclasses Lots of duplicate code Could potentially move the common code into the parent class 6. Same name different meaning Overloaded vocabulary Leads to misinterpretation Reusing variable names is a sign that your function has run too long 7. Too many parameters Too complex Can be confusing especially if there are many parameters of the same type Could potentially have a mutable struct for some/all of the parameters 8. Variables with same name as type Make the name convey information about its contents Others reading your code will not know what the variable represents 9. Vague identifiers Method names too vague or ambiguous, therefore its funtion is not clear Could be a sign of a method having more than one function/responsibility 10. While not done loops Having the condition of the while just be a boolean variable set to false Shows the writer may not know the purpose of the loop or the exit condition Fixing this can make the code easier to read Hypothetical Change Analysis Proposed Change: No changes to propose Conclusion The ItemSystem.cs looks good, no sign of code smells Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrendanCodeQualitySprint5.html": {
    "href": "docs/CodeReviews/CodeQuality/BrendanCodeQualitySprint5.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brendan Cabungcal Date: April 18, 2025 Sprint: 5 File(s) reviewed: ZombieSpawningSystem.cs Author of file: Katya Liber Code Smell Analysis 1. Code that never actually runs Makes the code longer and more complex than necessary Just delete the code and it will be easier to read 2. Comparing variables to null If not done carefully, it can lead to many issues, both syntactical and logical 3. Duplicate code Create a method Makes code longer than necessary 4. Methods too big We want simple, easy to read, code The method may be doing too much, extract another method from it Potentially, you could decompose conditionals 5. Strikingly similar subclasses Lots of duplicate code Could potentially move the common code into the parent class 6. Same name different meaning Overloaded vocabulary Leads to misinterpretation Reusing variable names is a sign that your function has run too long 7. Too many parameters Too complex Can be confusing especially if there are many parameters of the same type Could potentially have a mutable struct for some/all of the parameters 8. Variables with same name as type Make the name convey information about its contents Others reading your code will not know what the variable represents 9. Vague identifiers Method names too vague or ambiguous, therefore its funtion is not clear Could be a sign of a method having more than one function/responsibility 10. While not done loops Having the condition of the while just be a boolean variable set to false Shows the writer may not know the purpose of the loop or the exit condition Fixing this can make the code easier to read Hypothetical Change Analysis Proposed Change: No changes to propose Conclusion The ZombieSpawningSystem.cs looks good, no sign of code smells Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrianCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/BrianCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brian Miller Date: February 14, 2025 Sprint: 2 File reviewed: PlayerStateSystem.cs PlayerState.cs Author of file: Andy Yu Code Smell Analysis 1. Data Clumps Everything seems pretty well organized, there's no fields/etc that require each other often 2. Long Method Most methods are pretty short (under 10-15 lines) The Update method is 34 lines so it's a bit long, however most of the lines are essential pieces. If it get's too long, the setting state part could be extracted into it's own method after the component checks and whatnot are done. 3. Large Class The class is 98 lines so it's just under the 100-150 lines. 4. Duplicated Code Each method is unique and logic is not repeated anywhere 5. Shotgun Surgery The only place I could see having this issue is with the PlayerState Enum since adding a new state means updating this and then updating how the current state is determined. However preexisting state handling shouldn't be affected when new states are added and these two files should be the only ones changed so probably not an issue. 6. Lazy Class The nature of ECS means entities are somewhat \"lazy\", but everything else is good Control is handed off only where necessary 7. Speculative Generality There's room for adding new states but nothing here is preemptive in doing so Planned states are already in the PlayerState enum but those should be implimented soon so not an issue 8. Refused Bequest PlayerStateSystem.cs inherits the abstract class SystemBase. The only overriden method is Initialize which calls the SystemBase version first so no issues there 9. Cyclomatic Complexity Most of the code is good Update() reaches 5 indentation levels which could grow in complexity when more states are added 10. Comments (as \"deodorant\") Comments are in appropriate places Variable and method names are all appropriate Hypothetical Change Analysis Proposed Change: In future sprints, Update for PlayerStateSystem.cs will probably have to be split up to decrease length and complexity. Also implement more states The current implementation supports this well because: The logic in Update is straightforward States can easily be added to the PlayerState Enum Updating the player state in PlayerStateSystem won't impact other files or code Preexisting systems won't need to be modified to accommodate this Conclusion The Player State system has very good code with no notable code smells. The system should be extendable pretty easily without much impact on unrelated parts. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrianCodeQualitySprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/BrianCodeQualitySprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brian Miller Date: March 5, 2025 Sprint: 3 Files reviewed: CollisionDetectionSystem, CollisionResponseSystem Author of files: Cameron Tucker Code Smell Analysis 1. Data Clumps Pairs of entities are often used together but that's unavoidable with a collision system and these two files are the only place this occurs so not an issue 2. Long Method the HandleCollision method is almost 100 lines long the other methods are pretty succinct 3. Large Class the CollisionDetection class is 360 lines long but I don't think it would be worth splitting it into multiple classes 4. Duplicated Code some lines are repeated for two entities but it's not long enough to warrant change 5. Shotgun Surgery If anything needs changed with collision, these are the only two affected files so no issues here 6. Lazy Class nothing here 7. Speculative Generality the collision class has the option for expanding but isn't anticipating anything that for the future 8. Refused Bequest nothing here 9. Cyclomatic Complexity nothing here 10. Comments (as \"deodorant\") There's a lot of comments but not to cover up bad code Hypothetical Change Analysis Proposed Change: Split up the CollisionDetectionSystem The main reason for this is just that it's a pretty long class but it might not be worth the effort to do since it works well Conclusion Very good code. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/BrianCodeQualitySprint4.html": {
    "href": "docs/CodeReviews/CodeQuality/BrianCodeQualitySprint4.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Brian Miller Date: April 4, 2025 Sprint: 4 Files reviewed: SoundManager, SoundSystem Author of files: Brendan Cabungcal Code Smell Analysis 1. Data Clumps no issues here 2. Long Method all methods are succinct and short 3. Large Class the classes aren't more than 50 lines each so all good here 4. Duplicated Code The \"handleX\" methods are repeated but they will be removed 5. Shotgun Surgery If anything needs changed with Audio, these are the only two affected files so no issues here 6. Lazy Class nothing here 7. Speculative Generality nothing wrong here 8. Refused Bequest nothing here 9. Cyclomatic Complexity nothing here 10. Comments (as \"deodorant\") There's some commented out code in SoundSystem that should be removed but nothing else Hypothetical Change Analysis Proposed Change: Merge the SoundSystem handle events into one, drive the sounds into a json to make it a data problem This will make the sounds a data problem and it will be easier to add more sounds when there's just a sound (or list of sounds) and it's conditions Conclusion Very good code. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/CameronCodeQualityReview.html": {
    "href": "docs/CodeReviews/CodeQuality/CameronCodeQualityReview.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Cameron Tucker Date: February 12, 2025 Sprint: 2 Files reviewed: ProjectileSystem.cs, ProjectileShootingSystem.cs, ProjectileSpawningSystem.cs, DespawnSystem.cs (Projectile systems) Author of files: Ely Maddox Code Smell Analysis 1. Duplicated Code Each system has unique implementation No repeated logic across files Component checks are necessarily similar but not duplicated logic 2. Large Method All methods are concise and focused 3. Large Class Each system is focused and minimal: ProjectileSystem handles lifetime ProjectileShootingSystem handles shooting flags ProjectileSpawningSystem handles creation DespawnSystem handles cleanup 4. Switch Statements Logic flows through direct checks No complex conditionals Clean if/continue pattern in checks 5. Data Clumps Data is well-organized No repeated groups of parameters Event data is cohesive 6. Feature Envy Systems operate in their own domain No unncessary access of other system's data 7. Shotgun Surgery Changes are localized to specific systems Adding new projectile types only affects spawning 8. Primitive Obsession Types are appropriate for their use Data structures are well-chosen No overuse of primitive types 9. Cyclomatic Complexity Logic flows are straightforward Checks are flat and clear No nested decision complexity 10. Divergent Change Systems have clear and single responsibilities Changes are contained within relevant systems Good separation of concerns Hypothetical Change Analysis Proposed Change: Add different types of projectiles with unique behaviors and effects The current implementation supports this well because: ProjectileSpawningSystem only cares about creation; new projectile types just need new components ProjectileSystem handles lifetime through timer events regardless of projectile type DespawnSystem will clean up any projectile type the same way No existing systems would need modification to support new behaviors Conclusion The projectile systems contain clean code with no significant code smells. The design allows for easy extension and modification, without needing to modify exisiting systems. Each system is focused and shows high cohesion with low coupling. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/CameronCodeQualityReview2.html": {
    "href": "docs/CodeReviews/CodeQuality/CameronCodeQualityReview2.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Cameron Tucker Date: February 6, 2025 Sprint: 3 Files reviewed: HitboxSystem.cs, HitSystem.cs Author of files: Ely Maddox Code Smell Analysis 1. Duplicated Code Debug logging statements are duplicated across systems (But this is temporary) 2. Large Method HandleCollisionEvent in HitboxSystem performs too many operations at once DealWithHitPhysics mixes knockback, damage, and debugging concerns 3. Large Class While individual classes aren't large yet, all three show signs of expanding responsibilities 4. Switch Statements None 5. Data Clumps Position, velocity, and state components repeatedly accessed together, but this is normal for our ECS 6. Feature Envy HitSystem directly manipulates physics components that should be handled by physics systems HitboxSystem deeply interrogates AttackInfo data 7. Shotgun Surgery Attack mechanics are spread across three systems, requiring multi-file changes for simple additions 8. Primitive Obsession Magic numbers like 10000 in knockback calculations Boolean flags like Force = true lack meaning 9. Cyclomatic Complexity Nested conditions in event handlers can create complex logic as system responsibility grows Multiple early returns make logic somewhat difficult to follow 10. Divergent Change HitSystem handles both physical impacts and projectile removal, violating SRP (But projectile removal was a quick addition so I'm sure this will change) Hypothetical Change Analysis Proposed Change: Add a status effect (slow, burn) attack type The current implementation makes this difficult because: Combat logic is fragmented across three systems with tight coupling Attack types and effects lack proper abstraction No existing mechanism for temporary status effects (Shouldn't be super hard to add though) Conclusion The combat systems would benefit from refactoring to follow the existing ECS pattern more consistently. The hit systems should: Use EntityRegistry more Separate collision detection from hit resolution (Lean more on collision detection system) Better improve the event pipeline between systems Remove debugging code in favor of debug systems Previous Page"
  },
  "docs/CodeReviews/CodeQuality/CameronCodeQualitySprint4.html": {
    "href": "docs/CodeReviews/CodeQuality/CameronCodeQualitySprint4.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Cameron Tucker Date: Apr 4, 2025 Sprint: 4 Files reviewed: MenuSystem.cs Author of files: Brian Miller Code Smell Analysis 1. Duplicated Code Menu navigation methods repeat similar logic (Increment/Decrement) Button activation code appears in multiple methods 2. Large Method Dictionary initialization in constructor is bloated with hard-coded actions UpdateMenuActive handles too many responsibilities 3. Large Class MenuSystem mixes input handling, state management and UI manipulation 4. Switch Statements None 5. Data Clumps UIMenu and UIMenu2D components consistently accessed together 6. Feature Envy Directly manipulates UIMenu components instead of using proper abstractions 7. Shotgun Surgery Adding new menu types requires changes across multiple methods 8. Primitive Obsession Magic constant STATE_CHANGE_COOLDOWN = 0.2f Manual bounds checking for menu indices 9. Cyclomatic Complexity Multiple nested conditions in UpdateMenuActive Complex conditional logic in event handlers 10. Divergent Change System handles both menu navigation and game state changes Hypothetical Change Analysis Proposed Change: Add settings submenu with configurable options The current implementation makes this difficult because: Menu structure tightly coupled to action handlers 2D menu logic mixed with standard menu handling Conclusion MenuSystem needs refactoring to: Split responsibilities into separate systems Create flexible menu component structure Extract cooldown logic to reusable utility Previous Page"
  },
  "docs/CodeReviews/CodeQuality/CodeQualityPeterSprint5.html": {
    "href": "docs/CodeReviews/CodeQuality/CodeQualityPeterSprint5.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Peter Eberhard Date: April 19th Sprint: 5 File(s) reviewed: ChimneySmokeSystem Author of file(s): Cameron Tucker Code Smell Analysis 1. Long Class Barely long, but i think its mostly fine for a class like this with so many helpers. 2. Shotgun Surgery Not present, very well put together code. 2. Data Clumps None seen. Hypothetical Change Analysis Proposed Change: Refactor the way we determine who is smoke and who is player The lines of code if (HasComponents<Smoke>(collision.Contact.EntityA)) { smokeEntity = collision.Contact.EntityA; characterEntity = collision.Contact.EntityB; } else if (HasComponents<Smoke>(collision.Contact.EntityB)) { smokeEntity = collision.Contact.EntityB; characterEntity = collision.Contact.EntityA; } Feel very repetitive and i'm sure we could find a way to improve them, but im mostly nitpicking. Conclusion Very good overall Previous Page"
  },
  "docs/CodeReviews/CodeQuality/CodeQualityTemplate.html": {
    "href": "docs/CodeReviews/CodeQuality/CodeQualityTemplate.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Your name Date: February PUTDAYHERE, 2025 Sprint: 2 File(s) reviewed: File or files reviewed (remove () if multiple or remove (s) if single from header) Author of file(s): Who are you reviewing (same as above remove () if multiple or remove (s) if single) Code Smell Analysis 1. Code Smell Write Stuff Here 2. Code Smell Write Stuff Here 3. Code Smell Write Stuff Here 4. Code Smell Write Stuff Here 5. Code Smell Write Stuff Here 6. Code Smell Write Stuff Here 7. Code Smell Write Stuff Here 8. Code Smell Write Stuff Here 9. Code Smell Write Stuff Here 10. Code Smell Write Stuff Here Hypothetical Change Analysis Proposed Change: Propose a hypothetical change/feature The current implementation supports this, or doesnt support this and why (Pros & Cons): Reason 1 Reason 2 Reason 3 Conclusion Put your conclusion here. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/ElyCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/ElyCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Ely Maddox Date: February 13, 2025 Sprint: 2 File reviewed: CollisionDetectionSystem.cs Author of file: Cameron Tucker Code Smell Analysis 1. Long Methods Some methods are a bit long, but nothing excessive. Mostly because of the large amount of math needed to be done here. 2. Long Classes Verging on being too long, but everything done in CollisionDetection is related to collision detection. The math could possibly be pulled out into a CollisionUtilities class? 3. Long Parameter List Nothing to see here. 4. Shotgun Surgery Nothing to see here. 5. Data Clumps Nothing to see here. 6. Switch Case -When deciding what shape we should do collision for, it seems a bit switch casey. This will really be an issue when we go to add more shapes, but it's small enough for now. 7. Comments Nothing to see here. All comments only help understanding. 8. Feature Envy Nothing to see here. 9. Lazy Class Nothing to see here. 10. Duplicated Code Same comments as the 'switch' case. Hypothetical Change Analysis Proposed Change: Propose a hypothetical change/feature Back to the 'switch' case, there are n^2 types of combinations. This will scale not great once more shapes get added. Reason 1 Reason 2 Reason 3 Conclusion Everything here is very good for the first draft of collision. I't may not scale super super well, but it works well. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/ElyCodeQualitySprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/ElyCodeQualitySprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Ely Maddox Date: March 5, 2025 Sprint: 3 Files reviewed: LevelLoader.cs, LevelSwitchSystem.cs, LevelLoaderSystem.cs Author of files: Katya Liber Code Smell Analysis 1. Shotgun Surgery -Not much detected, only thing is the magic strings with the names of levels, and the strings with different entity types. These should probably be moved into JSON to be a data issue. 2. Long Classes None Detected 3. Long Parameter List The MakeEntity delegate takes in lots of parameters. Still stays under 6, but it's edging on too many. 4. Long Methods Nothing is too long. 5. Comments as Deodorant None Detected, not many comments needed in the first place. 6. Lazy Class None Detected 7. Duplicated Code There might be a bit in level loader, but the different types of entities that need to be made kind of need to have neccessitates this 8. Switch Case None Detected 9. Data Clumps None Detected 10. Feature Envy None Detected Hypothetical Change Analysis Proposed Change: Load in lots of levels The current implementation supports this, as it loads in lists of entities from JSON. There would need to be changes with the magic strings, so this should likely be moved to data. Conclusion Everything looked good! The main concern are the magic strings littered around the code, but these are present everywhere in the codebase at the moment, so it is not only an issue with these files. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/ElyCodeQualitySprint4.html": {
    "href": "docs/CodeReviews/CodeQuality/ElyCodeQualitySprint4.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Ely Maddox Date: April 3, 2025 Sprint: 4 File reviewed: TerminalSystem.cs Author of file(s): Cameron Tucker Code Smell Analysis If its debug it can't smell... right... right? \uD83D\uDE05\uD83E\uDD2B 1. Long Methods Some are long, but because of switches/long lists of things to do. This will probably be shortened here soon. 2. Long Classes Maybe just a tad long. A little. 3. Long Parameter Lists N/A 4. Comments as Deodorant Good, comments were informative and helpful while only being places where needed. 5. Switch Case There's a few, though none are bad uses. Colors could possibly be set into a dictionary instead. 6. Lazy Class Definitely not. 7. Feature Envy Also none here. 8. Shotgun Surgery If any strings would need to be changed they would need to change within the code. This may want to be a data problem? 9. Data Clumps N/A 10. Duplicated Code N/A Hypothetical Change Analysis Proposed Change: Allow entities to be spawned The current implementation allows this, as only a new mapping would need to be added with a call to some \"SpawnEvent.\" Conclusion Put your conclusion here. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/ElyCodeQualitySprint5.html": {
    "href": "docs/CodeReviews/CodeQuality/ElyCodeQualitySprint5.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Ely Maddox Date: April 18, 2025 Sprint: 5 File(s) reviewed: Menu System Author of file: Brian Miller Code Smell Analysis 1. Long Methods ExecuteMenuOption is doing a lot. It'd probably be best to split into multiple helper methods. 2. Long Class Lots of responsibilites, though everything is cohesive, so it may not be the worst thing. 3. Long Parameter List None Here 4. Comments (as deodorant) None Here 5. Switch Case None Here 6. Lazy class None Here 7. Feature Envy None Here 8. Shotgun Surgery None Here. All actions are mapped in dictionaries to specific functions that handle details of that action. 9. Data Clumps None Here 10. Duplicated Code None Here Hypothetical Change Analysis Proposed Change: Adding buttons to the character select menu to support a new character This would be easy, as only a new button would need to be added in the json No issues would be expected Conclusion The file as a whole is well written. All methods are small snippets of functionality that are only focused on accomplishing their one goal. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/KatyaCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/KatyaCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Katya Liber Date: 2/12/2025 Sprint: Sprint 2 File(s) reviewed: GravitySystem Author of file(s): Peter Eberhard Code Smell Analysis Duplicated Code Long Method Large Class Long Parameter List Shotgun Surgery Switch Statements Lazy Class Message Chains Comments Primitve Obsession Conclusion Techincally there is duplicated code within the systems in general, not just this one. However, there is not really a way around a loop going through all entities in each system, unless we want to change our entire structure to have a single system that loops through the entities instead of repeating the same loop in each system, but that seems unecessary. Other than that, after going through all of my code smells, GravitySystem does not seem to exhibit any other issues. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/KatyaCodeQuality2.html": {
    "href": "docs/CodeReviews/CodeQuality/KatyaCodeQuality2.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Katya Liber Date: March 6, 2025 Sprint: 3 File(s) reviewed: RawInputSystem Author of file(s): Peter Eberhard Code Smell Analysis 1. Duplicated Code Just the getrightjoystick direction and get left joystick direction have some duplicated code, not sure if you can just combine that into one. 2. Long Method Handle triggers is longer than 25 lines but that might just be the way it needs to be. 3. Large Class Same thing as long method but once again, that may just be the way it needs to be. 4. Long Parameter List Looks good! 5. Shotgun Surgery None 6. Switch Statements The get right/left directions have a lot of ifs and elses, maybe that could be made into a dictionary but you already have a lot of dictionaries. That probably just overcomplicates it. 7. Lazy Class Absolutely not. 8. Message Chains None 9. Comments None 10. Primitve Obsession None Hypothetical Change Analysis Proposed Change: Propose a hypothetical change/feature Also working with a switch controller. The groundwork for using other controllers is there, but some of the specifics of how to do so may need to change. Conclusion It looks good. I could never do it. You can try to implement some of those suggestions, but not if it overcomplicates things. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/KatyaCodeQualitySprint4.html": {
    "href": "docs/CodeReviews/CodeQuality/KatyaCodeQualitySprint4.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Katya Liber Date: April 3, 2025 Sprint: 4 File(s) reviewed: AttackHitSystem, HitResolutionSystem, HitDetectionSystem Author of file(s): Ely Maddox Code Smell Analysis 1. Duplicated Code No duplicated code. 2. Long Method No methods over 25 lines. 3. Large Class None of the classes over 100 lines. 4. Long Parameter List Not over the limit for any of the methods. 5. Shotgun Surgery IsBlocking could be unified into a higher level so none of the lower level systems need to change it. 6. Switch Statements No switch statements. 7. Lazy Class None 8. Message Chains None 9. Comments None 10. Primitve Obsession None Hypothetical Change Analysis Proposed Change: Propose a hypothetical change/feature: Attacks with dynamic hit boxes. Hitboxes assume a single collision shape for the entirety of the duration of the attack, and this assumption breaks once we need the hitbox to change during the attack. This would require a major refactor to accomplish. Conclusion Everything looks pretty good. No evident issues. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/KatyaCodeQualitySprint5.html": {
    "href": "docs/CodeReviews/CodeQuality/KatyaCodeQualitySprint5.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Katya Liber Date: April 19, 2025 Sprint: 5 File(s) reviewed: Grab System Author of file(s): Andy Yu Code Smell Analysis 1. Duplicated Code No duplicated code. 2. Long Method No methods over 25 lines. 3. Large Class Not over 100 lines. 4. Long Parameter List Not over the limit for any of the methods. 5. Shotgun Surgery None 6. Switch Statements No switch statements. 7. Lazy Class None 8. Message Chains None 9. Comments None 10. Primitve Obsession None Hypothetical Change Analysis Proposed Change: None Conclusion Everything looks pretty good. No evident issues. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/PeterCodeQuality.html": {
    "href": "docs/CodeReviews/CodeQuality/PeterCodeQuality.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Peter Eberhard Date: 2/13/2025 Sprint: Sprint 2 File(s) reviewed: AISystem Author of file(s): Ely Maddox Code Smell Analysis Duplicated Code Very little, ECS by nature has some, but this code has the bare minimum. Long parameter lists Longest Parameter list is 2, very clear for this one. Cyclomatic Complexity All logic is very simple and readable, completely clear of this one. Empty Catch Statements No catch statements to be empty. Switch Statements No switch statements here. Data Clumps By nature of an ECS we use the components togethers, but I think this is a feature and not a bug in this case, as coupling is still quite low. Primitive Obsession Possibly should make actions their own entity or class rather than a string, but this code matches the current convention so nothing wrong here. Shotgun Surgery Very low coupling here, seems good in this regard. Long methods All methods are very short and readable. Innapropirate Intimacy We know very little about other classes in this file. Conclusion After going through all my code smells, the only possible change here would be to change how actions are handled away from strings. However, that is more a group effort than a problem with this particular code. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/PeterCodeQualitySprint4.html": {
    "href": "docs/CodeReviews/CodeQuality/PeterCodeQualitySprint4.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Peter Eberhard Date: April 5th Sprint: 4 File(s) reviewed: MAGIC.cs Author of file(s): Katya Liber Code Smell Analysis 1. Long Class This class is just over the comfortable length, but the fact that it is well sectioned off into groups makes it much more maintainable. 2. Shotgun Surgery This class actually significant reduces this problem across our code as it allows us to have a single source on strings. Hypothetical Change Analysis Proposed Change: Change this to a JSON file This is the current intended plan, it just takes a lot of startup work Would allow us to change magic numbers without a recompile Keeps data problems in the data Conclusion Overall a very good class that has been needed for a long time. Previous Page"
  },
  "docs/CodeReviews/CodeQuality/PeterCodeReviewSprint3.html": {
    "href": "docs/CodeReviews/CodeQuality/PeterCodeReviewSprint3.html",
    "title": "Code Quality Review | Super Plant BroZ",
    "summary": "Code Quality Review Author: Peter Eberhard Date: March 5 2025 Sprint: 3 File(s) reviewed: PlayerDespawnSystem Author of file(s): Andy Yu Code Smell Analysis 1. Long Methods Extreamly short methods, very concice. No problems here 2. Long Class Simmilar to above, does exactly what its meant to and nothing more. 3. Shotgun Surgery We have one magic number, but its centralised and its slated to be fixed 4. Data Clumps No problems here, window size is correctly one variable and isnt split into 2 or 4 5. Duplicated Code None found 6. Comments as Deoderant This class features no comments. However, it is quite readable and concise. Hypothetical Change Analysis Proposed Change: I proposed a change to the class, removing colision and just using an offset from screen size Andy managed to update the class before I even could finish writing this review, so the class can clearly support this. Conclusion Overall this is a short and sweet class that does exactly what its meant to, with no extra weight. Previous Page"
  },
  "docs/CodeReviews/README.html": {
    "href": "docs/CodeReviews/README.html",
    "title": "Code Reviews | Super Plant BroZ",
    "summary": "Code Reviews Code quality and readability reviews organized by team member. Sprint 4 Code Quality Cameron - Review of MenuSystem Katya - Review of Attack Hit System, Hit Resolution System, Hit Detection System Andy - Review of RawInputSystem Brian - Review of Sound Manager, Sound System Ely - Review of Terminal System Peter - Review of MAGIC.cs Brendan - Review of Item System Readability Cameron - Review of MenuSystem Katya - Review of HitResolutionSystem, HitDetectionSystem, AttackHitSystem Andy - Review of RawInputSystem Brian - Review of Sound Manager, Sound System Ely - Review of Terminal System Peter - Review of night-level.json, spawnpoints.json Brendan - Review of Item System Additional Notes Previous Page"
  },
  "docs/CodeReviews/Readability/AndyReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/AndyReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Andy Yu Date: February 12, 2025 Sprint: 2 Files reviewed: MoveSystem.cs, AttackSystem.cs, BlockSystem.cs, JumpSystem.cs Author of files: Katya Liber Time spent: 10 minutes Readability Comments Positive Aspects Consistent naming conventions across all systems Clear component checks using HasComponents Methods concise and straightforward Areas for Improvement No improvements to readability are necessary. Everything was readable and understandable. Previous Page"
  },
  "docs/CodeReviews/Readability/AndyReadabilitySprint3.html": {
    "href": "docs/CodeReviews/Readability/AndyReadabilitySprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Andy Yu Date: March 5, 2025 Sprint: 3 Files reviewed: SoundManager Author of files: Brendan Cabungcal Time spent: 10 minutes Readability Comments Positive Aspects Methods were concise and straightforward Variable names described their purpose and weren't ambiguous Areas for Improvement No improvements to readability are necessary. Everything was readable and understandable. Previous Page"
  },
  "docs/CodeReviews/Readability/AndyReadabilitySprint4.html": {
    "href": "docs/CodeReviews/Readability/AndyReadabilitySprint4.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Andy Yu Date: April 3, 2025 Sprint: 4 Files reviewed: RawInputSystem Author of files: Peter Eberhard Time spent: 20 minutes Readability Comments Positive Aspects Methods were concise and straightforward Variable names described their purpose and weren't ambiguous Areas for Improvement No improvements to readability are necessary. Everything was readable and understandable. Previous Page"
  },
  "docs/CodeReviews/Readability/AndyReadabilitySprint5.html": {
    "href": "docs/CodeReviews/Readability/AndyReadabilitySprint5.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Andy Yu Date: April 17, 2025 Sprint: 5 Files reviewed: PvZSpawningSystem Author of files: Ely Maddox Time spent: 15 minutes Readability Comments Positive Aspects Methods were concise and straightforward Variable names described their purpose and weren't ambiguous Areas for Improvement No improvements to readability are necessary. Everything was readable and understandable. Previous Page"
  },
  "docs/CodeReviews/Readability/BrendanReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/BrendanReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brendan Cabungcal Date: February 14, 2025 Sprint: 2 File reviewed: AISystem.cs Author of file: Ely Maddox Time spent: 10 minutes Readability Comments Positive Aspects Very well spaced and organized, easy on the eyes Variables are well named, it is clear what they are Some quick and helpful comments to follow along Areas for Improvement Nothing comes to mind, looks great, keep it up! Previous Page"
  },
  "docs/CodeReviews/Readability/BrendanReadabilitySprint3.html": {
    "href": "docs/CodeReviews/Readability/BrendanReadabilitySprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brendan Cabungcal Date: March 6, 2025 Sprint: 3 File reviewed: UIUpdateSystem Author of file: Brian Miller Time spent: 15 minutes Readability Comments Positive Aspects Identifiers are well named - easy to understand their purpose Good spacing within methods Areas for Improvement Method names are pretty straight forward, however, it wouldn't hurt to add some comments for each method's functionality as well as some comments for the procedures in the method bodies. Maybe add another line or two of space in between methods so that they are even easier to differentiate if you are scrolling through quickly Previous Page"
  },
  "docs/CodeReviews/Readability/BrendanReadabilitySprint4.html": {
    "href": "docs/CodeReviews/Readability/BrendanReadabilitySprint4.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brendan Cabungcal Date: April 4, 2025 Sprint: 4 File reviewed: ItemSystem.cs Author of files: Andy Yu Time spent: 10 minutes Readability Comments Positive Aspects Identifiers are well named - easy to understand their purpose Helpful comments throughout Code is well spaced Areas for Improvement I have no recommendations, good work! Previous Page"
  },
  "docs/CodeReviews/Readability/BrendanReadabilitySprint5.html": {
    "href": "docs/CodeReviews/Readability/BrendanReadabilitySprint5.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brendan Cabungcal Date: April 18, 2025 Sprint: 2 Files reviewed: ZombieSpawningSystem.cs Author of files: Katya Liber Time spent: 15 minutes Readability Comments Positive Aspects Clear method headers and variable names Great spacing/organization, easy to read Methods are short and concise Areas for Improvement One very small thing, the addition of some comments could make the code even easier to read. Previous Page"
  },
  "docs/CodeReviews/Readability/BrianReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/BrianReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brian Miller Date: February 14, 2025 Sprint: 2 File reviewed: UIRenderSystem.cs Author of file: Peter Eberhard Time spent: 10 minutes Readability Comments Positive Aspects The file is very succinct Only one comment but everything is self explanatory whitespace separates logic well variable names make sense Areas for Improvement Nothing from what I can tell Previous Page"
  },
  "docs/CodeReviews/Readability/BrianReadabilitySprint3.html": {
    "href": "docs/CodeReviews/Readability/BrianReadabilitySprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brian Miller Date: March 6, 2025 Sprint: 3 Files reviewed: CollisionDetectionSystem, CollisionResponseSystem Author of files: Cameron Tucker Time spent: 10 minutes Readability Comments Positive Aspects Good use of comments to explain the general processes Descriptive Variable names Good use of spacing to separate logic Logic is simple and separated into necessary components Areas for Improvement Nothing I can think of Previous Page"
  },
  "docs/CodeReviews/Readability/BrianReadabilitySprint4.html": {
    "href": "docs/CodeReviews/Readability/BrianReadabilitySprint4.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Brian Miller Date: April 4, 2025 Sprint: 4 Files reviewed: SoundManager, SoundSystem Author of files: Brendan Cabungcal Time spent: 10 minutes Readability Comments Positive Aspects Descriptive Variable names Good use of spacing to separate logic Classes are simple and to the point Areas for Improvement Nothing I can think of Previous Page"
  },
  "docs/CodeReviews/Readability/CameronReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/CameronReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Cameron Tucker Date: February 12, 2025 Sprint: 2 Files reviewed: ProjectileSystem.cs, ProjectileShootingSystem.cs, ProjectileSpawningSystem.cs, DespawnSystem.cs (Projectile systems) Author of files: Ely Maddox Time spent: 10 minutes Readability Comments Positive Aspects Consistent naming conventions across all systems Clear and logical component checks using HasComponents Clean event handling implementation with descriptive event names Good use of whitespace/indentation Clear stack usage for managing entities in DespawnSystem and ProjectileSpawningSystem Areas for Improvement The code is self-documenting and clear in its intent. No improvements to readability are necessary. Previous Page"
  },
  "docs/CodeReviews/Readability/CameronReadabilityReview2.html": {
    "href": "docs/CodeReviews/Readability/CameronReadabilityReview2.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Cameron Tucker Date: February 6, 2025 Sprint: 2 Files reviewed: HitboxSystem.cs, HitSystem.cs Author of files: Ely Maddox Time spent: 30 minutes Readability Comments Positive Aspects Clear method naming conventions throughout all files Consistent ECS pattern usage with component references Good use of early returns to avoid excessive nesting Event-based communication between systems Areas for Improvement Debug statements (System.Diagnostics.Debug.WriteLine) should be removed or replaced with proper logging Magic numbers (flippedContact.Y -= 1, 10000 in knockback calculation) need constants or comments Complex conditional branching in collision detection is hard to follow Redundant code like return attackerParent.Value == target.Id ? true : false; instead of simply return attackerParent.Value == target.Id; Previous Page"
  },
  "docs/CodeReviews/Readability/CameronReadabilitySprint4.html": {
    "href": "docs/CodeReviews/Readability/CameronReadabilitySprint4.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Cameron Tucker Date: April 4, 2025 Sprint: 4 Files reviewed: MenuSystem.cs Author of files: Brian Miller Time spent: 15 minutes Readability Comments Positive Aspects Consistent method naming conventions (Increment/Decrement pattern) Clear organization with focused helper methods Good use of whitespace and indentation Descriptive variable names that convey purpose Helpful comments explaining state management and menu behavior Areas for Improvement The ResetColumnSelection method exists but is never called Several level menu actions call the same StartGame() method without differentiation Multiple early returns in UpdateMenuActive make flow harder to follow Some comments restate the obvious (e.g., \"// Get current game state\") The stateChangeTimer logic is not immediately obvious in its purpose Previous Page"
  },
  "docs/CodeReviews/Readability/ElyReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/ElyReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Ely Maddox Date: February 13, 2025 Sprint: 2 File reviewed: ItemSwitchSystem.cs Author of file: Cameron Tucker Time spent: 15 Readability Comments Positive Aspects Consistent naming conventions that match the rest of the codebase. Whitespace is utilized to separate code into blocks that relate within themselves. Everything is well commented if any extra context is needed. Areas for Improvement Not much to see here. Previous Page"
  },
  "docs/CodeReviews/Readability/ElyReadabilitySprint3.html": {
    "href": "docs/CodeReviews/Readability/ElyReadabilitySprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Ely Maddox Date: March 5, 2025 Sprint: 3 Files reviewed: LevelLoader.cs, LevelSwitchSystem.cs, LevelLoaderSystem.cs Author of files: Katya Liber Time spent: 10 min Readability Comments Positive Aspects Most variables are appropriately named Whitespace is used appropriately All indentations are there Areas for Improvement Some of the naming conventions in LevelLoader for the methods can get a bit confusing (MakeEntity vs makeEntity) A couple comments may be a bit redundant, but they don't intrude or distract from the code Previous Page"
  },
  "docs/CodeReviews/Readability/ElyReadabilitySprint4.html": {
    "href": "docs/CodeReviews/Readability/ElyReadabilitySprint4.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Ely Maddox Date: April 3, 2025 Sprint: 4 File reviewed: TerminalSystem.cs Author of files: Cameron Tucker Readability Comments Positive Aspects Any confusing sections have a comment letting the reader know what's going on Good variable/method naming Areas for Improvement Long chains of switch/if statements can be difficult to read/find what one is looking for Most of this breaks down to long methods being hard to read Previous Page"
  },
  "docs/CodeReviews/Readability/ElyReadabilitySprint5.html": {
    "href": "docs/CodeReviews/Readability/ElyReadabilitySprint5.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Ely Maddox Date: April 18, 2025 Sprint: 5 Files reviewed: MenuSystem Author of files: Brian Miller Readability Comments Positive Aspects The dictionaries at the top of the file are laid out nicely, and the mappings are easy to follow. Methods are small and easy to walk through. Areas for Improvement None. All methods are well commented when needed, and no uncommented code is hard to follow. Previous Page"
  },
  "docs/CodeReviews/Readability/KatyaReadability2.html": {
    "href": "docs/CodeReviews/Readability/KatyaReadability2.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Katya Liber Date: March 6, 2025 Sprint: 3 Files reviewed: RawInputSystem Author of files: Peter Eberhard Time spent: 10 Readability Comments Positive Aspects Clear variable and method names Lots of helpful comments Areas for Improvement None. Previous Page"
  },
  "docs/CodeReviews/Readability/KatyaReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/KatyaReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Katya Liber Date: 2/11/2025 Sprint: 2 Files reviewed: PlayerStateSystem Author of files: Andy Yu Time spent: 10 minutes Readability Comments Positive Aspects The file is very readable due to extensive refactoring. Comments are provided above all sections of the code that require a description. Methods are all under 25 lines of code, and the entire system is under 100 lines. Areas for Improvement No significant areas for improvement. Previous Page"
  },
  "docs/CodeReviews/Readability/KatyaReadabilitySprint4.html": {
    "href": "docs/CodeReviews/Readability/KatyaReadabilitySprint4.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Katya Liber Date: Arpil 3, 2025 Sprint: 4 Files reviewed: HitResolutionSystem, HitDetectionSystem, AttackHitSystem Author of files: Ely Maddox Time spent: 10 Readability Comments Positive Aspects Clear variable and method names Comments that are there are helpful. Areas for Improvement None. Previous Page"
  },
  "docs/CodeReviews/Readability/KatyaReadabilitySprint5.html": {
    "href": "docs/CodeReviews/Readability/KatyaReadabilitySprint5.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Katya Liber Date: Arpil 19, 2025 Sprint: 4 Files reviewed: GrabSystem Author of files: Andy Time spent: 10 Readability Comments Positive Aspects Clear variable and method names No comments but everything is self explanatory. Areas for Improvement None. Previous Page"
  },
  "docs/CodeReviews/Readability/PeterReadabilityReveiwSprint3.html": {
    "href": "docs/CodeReviews/Readability/PeterReadabilityReveiwSprint3.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Peter Eberhard Date: March 5, 2025 Sprint: 3 Files reviewed: EntityFatory, specifically CreateEntityFromConfig Author of files: File written by Cameron Tucker. The section I'm method was written by Andy Yu Time spent: 15 mins Readability Comments Positive Aspects This is a very short method so inheranly pretty readable The addition of having a default spawn makes intuitive sense Areas for Improvement I know the code is already readable so comments feel like a waste but I like being able to tell immidiatly what the author was thinking, so just one or two comments in the method would be nice. Previous Page"
  },
  "docs/CodeReviews/Readability/PeterReadabilityReveiwSprint4.html": {
    "href": "docs/CodeReviews/Readability/PeterReadabilityReveiwSprint4.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Your name Date: April 5, 2025 Sprint: 4 Files reviewed: night-level.json, spawnpoints.json Author of files: Katya Liber Time spent: >5 mins Readability Comments Positive Aspects I was assigned to reveiw for Katya who spent this sprint designing new levels using our level loader which makes readability quite good consider all the files are json. Areas for Improvement In spawnpoints it's a little unclear what the numbers are refering to other than just vague \"spawnpoints\" Maybe we could change the parser to make it clearer? Previous Page"
  },
  "docs/CodeReviews/Readability/PeterReadabilityReveiwSprint5.html": {
    "href": "docs/CodeReviews/Readability/PeterReadabilityReveiwSprint5.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Peter Eberhard Date: April 19, 2025 Sprint: 5 Files reviewed: ChimneySmokeSystem Author of files: Cameron Tucketer Time spent: 10 mins Readability Comments Positive Aspects This code is quite well commented considering how rushed i know we got it out. I is very readable overall Areas for Improvement Huge Nitpick but having the 1 line functions mixed in makes it a bit harder to sort through methods, maybe we could put them at the top? Previous Page"
  },
  "docs/CodeReviews/Readability/PeterReadabilityReview.html": {
    "href": "docs/CodeReviews/Readability/PeterReadabilityReview.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Peter Eberhard Date: 2/13/2025 Sprint: 2 Files reviewed: RenderSystem Author of files: Cameron Tucker Time spent: 10 minutes Readability Comments Positive Aspects The code is largely very readable, particularly the second half. Areas for Improvement The update loop took a moment to understand and required reading another file; a brief comment explaining its purpose would be helpful. Although the use of the bool Pausible is somewhat intuitive, a short comment explaining its purpose would assist in future maintenance. Previous Page"
  },
  "docs/CodeReviews/Readability/ReadabilityTemplate.html": {
    "href": "docs/CodeReviews/Readability/ReadabilityTemplate.html",
    "title": "Readability Review | Super Plant BroZ",
    "summary": "Readability Review Author: Your name Date: February PUTDAYHERE, 2025 Sprint: 2 Files reviewed: File or files reviewed (remove () if multiple files, or remove (s) if single file from header) Author of files: Who are you reviewing (same as above remove () if multiple or remove (s) if single) Time spent: Put the time spent Readability Comments Positive Aspects Put Stuff Here Areas for Improvement Write what to improve here. Previous Page"
  },
  "docs/Controls.html": {
    "href": "docs/Controls.html",
    "title": "Controls | Super Plant BroZ",
    "summary": "Controls Keyboard Character Controls PLEASE READ: Attacking is possible, but very awkward to do with the keyboard. It requires two simultaneuous inputs, e.g. up and jab. The attack keybindings for keyboard are as follows Up: T Down: G Left: F Right: H Jab: Y Special: U On gamepad, these controls are a bit simpler: Direction: Use right joystick Jab: Left Trigger Special: Right Trigger Player 1 Controls Walk Left: Left Arrow Walk Right: Right Arrow Jump: Up Arrow Run: Right Shift Block: , Player 2 Controls Walk Left: A Walk Right: D Jump: Space, C Run: Left Shift Block: R Drop Through: S Gamepad Controls Player Controls Walk Left: Left Walk Right: Right Jump: X Attacking: See Notes Above UI Go up in Menu: Up Go down in Menu: Down Enter Menu: Enter/Space Game State Pause: P Reset: L Exit: Escape Switching Switch Item Forward: M Switch Item Backward: N Switch Character Forward: K Switch Character Backward: J Level Switching Switching Between Levels: X UI Controls Take Damage: T Go up in Menu: Up, W Go down in Menu: Down, S Select From Menu: Enter, Space In Game Console: ` Camera Zoom in: + Zoom out: - Reset camera: I Debug Toggle FPS: F1 Toggle Movement Vectors: F2 Toggle Hitboxes: F3 Toggle Player state: F4 Toggle Entity Ids: F5 Toggle Mouse Coordinates: F6 Toggle Polygon Creation: F7 Toggle Terminal: ~ (tilda) Items Switch Item Forward: M Switch Item Backward: N Characters Switch Character Forward: K Switch Character Backward: J PVZ Controls Row Up: W Row Down: S Column Right: D Column Left: A PlantListRight: E PlantListLeft: Q Plant: R Dig: F On gamepad, you control the grid location with the left stick, switch plants with the triggers, plant with A, and dig with B. Previous Page"
  },
  "docs/DesignNotes/Attacks.html": {
    "href": "docs/DesignNotes/Attacks.html",
    "title": "Attack Notes | Super Plant BroZ",
    "summary": "Attack Notes Thoughts We're assuming two variables - direction and type of attack direction will be up, down, left, right type will be normal or special Let's restrict ourselves to these for now to keep art and complexity managable while still being semi-true to smash How to do this Make attack systems that deal with the spawning of the attack Figure out what type of attack by dealing with raw input events make a new type of event, AttackAction? Parallel system to InputMapping that sends these events out"
  },
  "docs/ECSBestPractices.html": {
    "href": "docs/ECSBestPractices.html",
    "title": "ECS Best Practices | Super Plant BroZ",
    "summary": "ECS Best Practices Components Keep them small and data-only Always use structs, never classes Name them clearly (Position, Health, etc.) Initialize all fields Systems One system = one job Always check if components exist before using them Handle related events in Initialize() Use appropriate execution phases (Input, Update, Render) Events Keep them small Always include Entity field Only use for discrete changes, not continuous state Unsubscribe when done Entity Creation Use EntityFactory Set good defaults Initialize all required components Don't create entities in systems Performance Use 'ref' when getting components Don't get components repeatedly in loops Tips Load resources at startup Handle errors Keep systems simple Test edge cases Common Mistakes Assuming components exist Forgetting to remove components Mixing logic and data Doing heavy work every frame Previous Page"
  },
  "docs/FinalDocumentation.html": {
    "href": "docs/FinalDocumentation.html",
    "title": "Final Documentaion (What We Planned to Do and Did it Happen) | Super Plant BroZ",
    "summary": "Final Documentaion (What We Planned to Do and Did it Happen) Meetings Plan Scrums: Plan: Virtual a few times a week (Happened, Met over Discord for Scrums: Thursday, Sunday) Main meeting: Plan: In person, likely on the weekend (Happened, Had one main meeting on Tuesdays) Task Management Plan: Jira for task assignement and timeline (Happened) Discord for communication (Happened) Sprint 2 Features Plan: Character Movement Funtionality (running, walking, jumping) Player State Changes(running, walking, jumping, attacking, blocking, idle) Projectiles (peashooter shooting peas) AI Enemies Player Controls Timer Map Objects (platforms, items) Health Sprites (Peashooter, Bonk choy, items, and platforms) Everything we had planned above got done. We also added on basic collision to test the movement and physics systems, as we need something to jump off of. Previous Page"
  },
  "docs/FrameworkOverview.html": {
    "href": "docs/FrameworkOverview.html",
    "title": "ECS Framework Overview | Super Plant BroZ",
    "summary": "ECS Framework Overview Architecture Overview Core Concepts Entities: Simple ID containers that serve as unique identifiers for game objects Components: Pure data structures that define entity properties (e.g., Position, Velocity) Systems: Logic processors that operate on entities with specific component combinations World: The main container that manages entities, components, and systems Event Bus: Handles communication between systems using events System Execution Phases Systems are executed in a specific order based on phases with a priority field as a secondary sort: Input: Handle raw input and generate events PreUpdate: Pre-processing before main update Update: Main game logic PostUpdate: Post-processing after main update Render: Handle all rendering operations Component System Creating Components Components are simple data structures. Create new components as structs in the ECS.Components namespace: namespace ECS.Components; public struct MyNewComponent { public float Value; public Vector2 Direction; } Working with Components // Add component to entity world.GetPool<MyNewComponent>().Set(entity, new MyNewComponent { Value = 1.0f, Direction = Vector2.One }); // Check if entity has component if (HasComponents<MyNewComponent>(entity)) { // Get component reference ref var component = ref GetComponent<MyNewComponent>(entity); component.Value = 2.0f; } Event System Event Types Events are structs that implement IEvent. Each event should include the Entity that triggered it: public struct MyNewEvent : IEvent { public Entity Entity; public float Value; } Using Events // Subscribe to events World.EventBus.Subscribe<MyNewEvent>(HandleMyNewEvent); // Publish events World.EventBus.Publish(new MyNewEvent { Entity = entity, Value = 1.0f }); // Handle events private void HandleMyNewEvent(IEvent evt) { var myEvent = (MyNewEvent)evt; // Handle the event } Creating New Systems Create a new class in the ECS.Systems namespace Inherit from SystemBase Implement required methods: namespace ECS.Systems; public class MyNewSystem : SystemBase { public override void Initialize(World world) { base.Initialize(world); // Subscribe to events if needed World.EventBus.Subscribe<MyNewEvent>(HandleMyNewEvent); } public override void Update(World world, GameTime gameTime) { foreach (var entity in World.GetEntities()) { if (!HasComponents<RequiredComponent1>(entity) || !HasComponents<RequiredComponent2>(entity)) continue; ref var comp1 = ref GetComponent<RequiredComponent1>(entity); ref var comp2 = ref GetComponent<RequiredComponent2>(entity); // Process components } } private void HandleMyNewEvent(IEvent evt) { var myEvent = (MyNewEvent)evt; // Handle event } } Register the system in Game1.Initialize(): world.AddSystem(new MyNewSystem(), SystemExecutionPhase.Update, priority); Entity Factory The EntityFactory class provides a centralized place to create complex entities. Add new entity creation methods here: public Entity CreateMyNewEntity(params...) { var entity = world.CreateEntity(); // Add required components world.GetPool<Component1>().Set(entity, new Component1()); world.GetPool<Component2>().Set(entity, new Component2()); return entity; } Resource Loading Use the provided loaders for JSON configuration: JsonLoader: Generic JSON loading InputConfigLoader: Input configuration SpriteSheetLoader: Sprite sheet and animation data Example: var config = InputConfigLoader.LoadInputConfig(File.ReadAllText(\"Config/input.json\")); Previous Page"
  },
  "docs/KnownBugs.html": {
    "href": "docs/KnownBugs.html",
    "title": "Known Bugs (or features) | Super Plant BroZ",
    "summary": "Known Bugs (or features) Bugs Features The menu has a limit on how fast you can flip through it. This was to help control it with a gamepad, though it may feel slow and unresponsive on keyboard. Player can jump after walking off of the map. Think Wiley Coyote. Peas go through the level. Might be a bit bad for game balance, but it's fun to snipe people as peashooter. Previous Page"
  },
  "docs/Meetings/Meeting1.html": {
    "href": "docs/Meetings/Meeting1.html",
    "title": "TEAM NAME (TBD) | Super Plant BroZ",
    "summary": "TEAM NAME (TBD) Team Structure 2 PMs? Cameron (Technical?) Katya (Organization/Coordinator/Logistics?) Conflict Resolution Personal Conflicts Try to resolve between individuals first Then escalate to PMs Idea Disagreement Vote Meetings Scrums: Over Zoom a few times a week Main meeting: In person, likely on the weekend (depends on schedules) Collaboration GitHub, pull requests for code. Review code changes during long-form meeting. Jira for task assignement and timeline Discord for communication Game Idea Smash with PVZ theme Smash Content Characters Peashooter Zombies Character qualities Abilities Weight Health Power Items Powerups Plant Food Increase constants/variables Maps PVZ Roof Inputs Keyboard/Mouse Controller (probably main input device) Multiplayer Splitscreen Networking? Things To Do Character Movement Attacks directional Special move Jump Shield Grab (maybe) Character Status Health Theme PVZ Vibe/Music/Art PVZ vibe Custom soundtrack Prob custom pixel art Coding Standards CamelCase / C# standard Previous Page"
  },
  "docs/Meetings/Meeting3.html": {
    "href": "docs/Meetings/Meeting3.html",
    "title": "Meeting 3 Notes | Super Plant BroZ",
    "summary": "Meeting 3 Notes TODO Code Reviews Block Switching System / Sprites Implement remaining player/item sprites Damage system / UI % Code metrics Remaining documentation Mention Pruning Feature Branches Bugs Controls Sprint Reflection Peer Reviews (Due monday) Mention merges were reviewed in person (Hence no PR) Sprint 3 Planning Gamepad integration Different maps Item functionality Map switching UI Collision System v2 Ledge grabbing Attacking Utilize pull requests more Code reviews Jira shenanigans More character functionality Parry system ART UI Elements More map stuff More character state sprites More items Rake or Shovel Walnut Shield Sheild door Previous Page"
  },
  "docs/Meetings/MeetingSchedule.html": {
    "href": "docs/Meetings/MeetingSchedule.html",
    "title": "Weekly Meetings Schedule | Super Plant BroZ",
    "summary": "Weekly Meetings Schedule Big Meeting (In-Person or Hybrid if needed) Tuesday 4:15-5:15 (We can go over if needed) Scrums (Discord) Thursday 3:15-3:30 Sunday 4:00-4:15 Previous Page"
  },
  "docs/Meetings/README.html": {
    "href": "docs/Meetings/README.html",
    "title": "Meeting Notes | Super Plant BroZ",
    "summary": "Meeting Notes Schedule Weekly Meetings Schedule Team Meetings Meeting 1 - Initial game planning and team organization Meeting 2 - Notes were taken but lost to the aether Meeting 3 - Sprint 2 wrap-up and Sprint 3 planning Previous Page"
  },
  "docs/Meetings/Scrum-2-9-25.html": {
    "href": "docs/Meetings/Scrum-2-9-25.html",
    "title": "SCRUM 2/9/25 | Super Plant BroZ",
    "summary": "SCRUM 2/9/25 Ely Changed how projectiles work Issue with attaching projectile sprites Katya Not much Need something to work on Peter Split off render system Andy Working on player state Cameron Added cache for component build from config Added registry to store entity config/sprite config/spritesheet assets with a key Switching for items/characters supported Shaders are a PAIN on mac lol Previous Page"
  },
  "docs/Meetings/Sprint5Planning.html": {
    "href": "docs/Meetings/Sprint5Planning.html",
    "title": "Sprint 5 Notes | Super Plant BroZ",
    "summary": "Sprint 5 Notes What needs done Primary Plans More Characters (2) Even More Levels Competent AI More complex attacks Level Hazards Art for all of this Settings Camera/Screen resizing Error handling through logger Backlog Character Select Screen Effects (Slows, burn, poison, etc) Other Possibilities (time permitting) Level of Plants Vs. Zombies Grabs Assigned work Everyone Cleanup your stuff to error through logger Ely Attacks Chomper art Andy Grabs Katya Levels PvZ Brian Art Zombie art Character Select Screen Camera stuff Peter Stage Hazards Cameron Effects Terminal Stuff Brendan More sound effects Unassigned/Team Effort AI stuff"
  },
  "docs/README.html": {
    "href": "docs/README.html",
    "title": "Documentation | Super Plant BroZ",
    "summary": "Documentation Sprint 5 Code Reviews - Code Quality and Readability Reviews Controls - Guide of keybinds for Sprint 5 Team Roles - Initial assigned roles for Sprint 5 Final Documentation - Sprint outcomes and planned vs completed features Known Bugs - Any known bugs, or features that may seem like bugs Backlog - Notes of any backlog from previous or for the next sprint Sprint 5 Features - List of Features for Sprint 5 General Notes & Information Team Meetings - Meeting notes and schedule Pitch - Game pitch presentation slides Development Documentation Framework Overview - ECS architecture and implementation guide ECS Best Practices - Development guidelines and patterns Syntax Cheat Sheet - C# syntax examples from codebase TODO List - Comprehensive TODO/wish list of all features"
  },
  "docs/Roles.html": {
    "href": "docs/Roles.html",
    "title": "Roles | Super Plant BroZ",
    "summary": "Roles Tasks Easy collision, just on the floor Physics? For gravity and such Movement system needs split up Proposed: GravityForceSystem FrictionForceSystem InputForceSystem ForceAggregatorSystem (combines all forces) VelocitySystem PositionSystem (maybe split) PhysicsPositionSystem (updates pos based on velocity) KinematicPositionSystem (static objects/direct position changes like moving platforms/teleporting entites) States for different movements? Need to be able to shoot out pea Items We need health Cameron Collision GitHub management ECS Support Code Review Brendan Map w/o collisions Peter Movement Jumping, walking Brian SPRITES Peashooter Bonk Choy All need attacking, idle, walking, jumping. Block, run, slide come later. TERRAIN Blocks Platforms Background? PROJECTILES Pea shockwave? ITEMS Sun Fertilizer Shovel? maybe not rn. Katya Jira/Planning Movement Ely AI Projectiles Andy PlayerStateSystems Previous Page"
  },
  "docs/Sprint3.html": {
    "href": "docs/Sprint3.html",
    "title": "Final Documentaion (What We Planned to Do and Did it Happen) | Super Plant BroZ",
    "summary": "Final Documentaion (What We Planned to Do and Did it Happen) Meetings Plan Scrums: Plan: Virtual a few times a week (Happened, Met over Discord for Scrums: Thursday, Sunday) Main meeting: Plan: In person, likely on the weekend (Happened, Had one main meeting on Tuesdays) Task Management Plan: Jira for task assignement and timeline (Happened) Discord for communication (Happened) Sprint 3 Features Plan: Polygon-based collision Level loading Attacking Death and respawning Gamepad support Basic sound Basic UI Elements Camera movement Everything we had planned above got done. We also added some extra debug systems to assist in development. Previous Page"
  },
  "docs/Sprint4.html": {
    "href": "docs/Sprint4.html",
    "title": "Final Documentaion (What We Planned to Do and Did it Happen) | Super Plant BroZ",
    "summary": "Final Documentaion (What We Planned to Do and Did it Happen) Meetings Plan Scrums: Plan: Virtual a few times a week (Happened, Met over Discord for Scrums: Thursday, Sunday) Main meeting: Plan: In person, likely on the weekend (Happened, Had one main meeting on Tuesdays) Task Management Plan: Jira for task assignement and timeline (Happened) Discord for communication (Happened) Sprint 4 Features Plan: Improved attacking system Character Select Menu Map Select Menu Effect System Win Screen New Characters Gamepad compatible with multiplayer Item Pickups Sound System More levels Balance movement/attack feel In-game command console Begin to formalize testing Debug logging systems Magic cleanup Everything except for the addition of new characters, effect system (item pickups are triggered, but not removed), & character select, was accomplished, and magic cleanup got partially done. Unplanned TerminalSystem was added (Very cool). See Backlog. Previous Page"
  },
  "docs/Sprint4Roles.html": {
    "href": "docs/Sprint4Roles.html",
    "title": "Roles | Super Plant BroZ",
    "summary": "Roles Tasks Improved Attacking system Character Select Menu Map Select Menu Win Screen New Characters Gamepad compatible with multiplayer Item Pickups Sound System More levels Balance Movement/Attack Feel In-game Command Console Begin to formalize testing Debug logging systems Magic cleanup Cameron Fix deep clone issue General Magic Number/String Cleanup Effect system for items/attacks Brendan Game music Effect sounds Peter Controllers for multiplayer Testing Brian More art, as needed (character attacks) Menu (level UI, Character Select UI, Win Screen) Katya More Levels Ely Attacking Andy Pickups and effects Item system Testing Previous Page"
  },
  "docs/Sprint5.html": {
    "href": "docs/Sprint5.html",
    "title": "Final Documentaion (What We Planned to Do and Did it Happen) | Super Plant BroZ",
    "summary": "Final Documentaion (What We Planned to Do and Did it Happen) Meetings Plan Scrums: Plan: Virtual a few times a week (Happened, Met over Discord for Scrums: Thursday, Sunday) Main meeting: Plan: In person, likely on the weekend (Happened, Had one main meeting on Tuesdays) Task Management Plan: Jira for task assignement and timeline (Happened) Discord for communication (Happened) Sprint 5 Features Plan: Improved attacking (directional) AI that doesn't kill itself 2 new characters 1 new map Level Hazards Grabs PvZ Level Buff/Debuff Effects Character Select Screen More info can be found in Sprint5Features, linked in the homepage. What got done: Improved attacking (directional) AI that doesn't kill itself 2 new characters 1 new map Level Hazards Grabs PvZ Level Buff/Debuff Effects Character Select Screen Improved debug terminal Screen resizing Random item spawning See Backlog for notes on anything that fell short. Notes At this point, the game is very difficult to play without a controller. The intended controller for use is a gamecube controller, and other controllers have not been thoroughly tested, though they may still work. Please see the Controls subpage for details on new controls. The game is intended to play in fullscreen or windowed on a 1920x1080 monitor. Playing in fullscreen while zoomed out on larger monitors may cause the background to be small enough to see the edges. Previous Page"
  },
  "docs/Sprint5Features.html": {
    "href": "docs/Sprint5Features.html",
    "title": "Sprint 5 Plans | Super Plant BroZ",
    "summary": "Sprint 5 Plans These are the original plans set out for Sprint5. Primary Plans More Characters (2) - Chomper - Zombie Even More Levels - Night Roof - Pool - Night Pool (w/ fog?) Competent AI - Tracks player - Doesn't run off of the edge - Actually tries to fight More complex attacks - Directional: up, down, left, right - Two modes: normal/special - Total of ~8 attacks per player Level Hazards - Moving platforms - Traps (e.g. chimney blowing smoke and acting like a geyser) Backlog Character Select Screen - Allows each player to select their character - Allows players to select which characters to play against - AI difficulty level is a wishlist item Effects (Slows, burn, poison, etc) - Some attacks should apply debuffs Other Possibilities (time permitting) Level of Plants Vs. Zombies - Will reuse current plant and zombie sprites, just with different behavior - Grid system to control plant placement and zombie spawning Grabs - In smash, characters can grab ahold of other players and throw them"
  },
  "docs/Sprint5Plans.html": {
    "href": "docs/Sprint5Plans.html",
    "title": "Sprint 5 Plans | Super Plant BroZ",
    "summary": "Sprint 5 Plans For Sure More Characters (2) Even More Levels Competent AI More complex attacks Level Hazards Possibilities Level of Plants Vs. Zombies (time permitting) Grabs"
  },
  "docs/Sprint5Roles.html": {
    "href": "docs/Sprint5Roles.html",
    "title": "Roles | Super Plant BroZ",
    "summary": "Roles Tasks Improved attacking (directional) AI that doesn't kill itself 2 new characters 1 new map Level Hazards Grabs PvZ Level Buff/Debuff Effects Character Select Screen Improved debug terminal Screen resizing Random item spawning Cameron AI Buff/Debug Effects w/ items Screen Resize Improving Debug Terminal Brendan More sounds Volume control Peter Improve controller support Level Hazards Brian Lots of art Character Select Screen Katya New map PvZ Ely Improved Attacking PvZ Documentation Andy Grabs Items Previous Page"
  },
  "docs/SyntaxCheatSheet.html": {
    "href": "docs/SyntaxCheatSheet.html",
    "title": "C# Syntax Cheat Sheet | Super Plant BroZ",
    "summary": "C# Syntax Cheat Sheet Generic Constraints where T : struct Restricts generic type to value types public class ComponentPool<T> where T : struct public static T ParseJson<T>(string jsonContent) where T : struct Null Operators ??= (Null-coalescing Assignment Operator) Assigns right-hand value only if left-hand is null ?. (Null-conditional Operator) Safely accesses members, returns null if object is null options ??= DefaultOptions; removeMethod?.Invoke(pool, new object[] { entity }); Pattern Matching is Type checking and casting in one operation ref Creates reference to value type if (evt is GameExitEvent gameExitEvent) ref var state = ref GetComponent<AnimationState>(entity); Lambda Expressions => Creates anonymous functions with different parameter patterns: systems.Sort((a, b) => b.Priority.CompareTo(a.Priority)); Dictionary Operations TryGetValue Safe dictionary access returning success status if (!componentPools.TryGetValue(type, out var pool)) { pool = new ComponentPool<T>(); componentPools[type] = pool; } Collection Operations (x, y) Tuple destructuring in foreach out Returns additional value through parameter foreach (var (actionName, action) in config.Actions) entityToIndex.Remove(entity.Id, out int index) Delegates and Events Delegates are type-safe function pointers that can reference methods with a specific signature. Good for event driven systems. Action<T> Delegate type for methods taking parameters with no return private Dictionary<Type, List<Action<IEvent>>> subscribers; public void Subscribe<T>(Action<IEvent> handler) where T : IEvent; Global Using Directives global using Project-wide namespace import global using Microsoft.Xna.Framework; global using Microsoft.Xna.Framework.Graphics; Method Expression Bodies => Shorthand for single-expression methods/properties public Entity(int id) => Id = id; public override int GetHashCode() => Id; public override bool Equals(object obj) => obj is Entity other && other.Id == Id; Object Initialization new() Infers type from context private readonly Dictionary<Type, object> componentPools = new(); private readonly HashSet<Entity> entities = new(); private Stack<int> freeIndices = new(); Method Access GetType() Gets type information GetMethod() Gets method info by name var removeMethod = pool.GetType().GetMethod(\"Remove\"); removeMethod?.Invoke(pool, new object[] { entity }); Previous Page"
  },
  "docs/TodoList.html": {
    "href": "docs/TodoList.html",
    "title": "TODO List (More like wishlist lol) | Super Plant BroZ",
    "summary": "TODO List (More like wishlist lol) Basic Movement Double jump Air control/drift (Should be straightforward with force component) Fast fall (Pushing down to fall faster) Dash/run Wall jump Edge grab Dodge Combat Light attacks Strong attacks Special moves Air attacks Grabs/throws (maybe) Blocking/shield Parry (maybe) Core Systems Gravity Basic Collision Damage percentage Knockback scaling Death zones/blast lines Stock/life system Match timer Hit detection Stun system DI (Directional Influence) Characters Multiple character support Different weights/speeds Unique special moves Animations Taunts Stages Multiple platforms Fall-through platforms Stage hazards Blast zones Moving platforms Background elements Items Powerups Debuffs Effects & Polish (Wishlist realistically) Hit sparks Smoke trails Screen shake Hit freeze KO explosions Star KO Screen flashes Launch lines Audio Hit sounds Character voices Background music Menu sounds Announcer Impact effects Crowd cheering Game Modes Stock battle Time battle AI Scalable difficulty Reinforcement learning would be awesome (More like final coding boss here...) UI Elements Damage display Stock icons Timer Player indicators Winner screen CSS (Character Select Screen) Menu system Stage select Technical Needs GameState system (Exit, Pause/Resume) (Needs decoupled from InputEventSystem ASAP) Controller support Hitbox system Debug mode Previous Page"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome | Super Plant BroZ",
    "summary": "Welcome"
  }
}